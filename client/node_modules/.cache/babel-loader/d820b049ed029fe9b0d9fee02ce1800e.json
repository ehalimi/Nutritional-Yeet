{"ast":null,"code":"/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\nfunction polyfill(input) {\n  var str = String(input).replace(/=+$/, '');\n  if (str.length % 4 == 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n  // initialize result and counters\n  var bc = 0, bs, buffer, idx = 0, output = '';\n  // get next character\n  buffer = str.charAt(idx++);\n  // character found in table? initialize bit storage and add its ascii value;\n  ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n  // and if not first of each 4 characters,\n  // convert the first 8 bits to one ascii character\n  bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\nmodule.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;","map":{"version":3,"names":["chars","InvalidCharacterError","message","prototype","Error","name","polyfill","input","str","String","replace","length","bc","bs","buffer","idx","output","charAt","fromCharCode","indexOf","module","exports","window","atob","bind"],"sources":["/Users/emahalimi/projects/Nutritional-Yeet/client/node_modules/jwt-decode/lib/atob.js"],"sourcesContent":["/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nfunction polyfill (input) {\n  var str = String(input).replace(/=+$/, '');\n  if (str.length % 4 == 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n    // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = '';\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n\nmodule.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAG,mEAAmE;AAE/E,SAASC,qBAAqB,CAACC,OAAO,EAAE;EACtC,IAAI,CAACA,OAAO,GAAGA,OAAO;AACxB;AAEAD,qBAAqB,CAACE,SAAS,GAAG,IAAIC,KAAK,EAAE;AAC7CH,qBAAqB,CAACE,SAAS,CAACE,IAAI,GAAG,uBAAuB;AAE9D,SAASC,QAAQ,CAAEC,KAAK,EAAE;EACxB,IAAIC,GAAG,GAAGC,MAAM,CAACF,KAAK,CAAC,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC1C,IAAIF,GAAG,CAACG,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE;IACvB,MAAM,IAAIV,qBAAqB,CAAC,mEAAmE,CAAC;EACtG;EACA;EACE;EACA,IAAIW,EAAE,GAAG,CAAC,EAAEC,EAAE,EAAEC,MAAM,EAAEC,GAAG,GAAG,CAAC,EAAEC,MAAM,GAAG,EAAE;EAC5C;EACAF,MAAM,GAAGN,GAAG,CAACS,MAAM,CAACF,GAAG,EAAE,CAAC;EAC1B;EACA,CAACD,MAAM,KAAKD,EAAE,GAAGD,EAAE,GAAG,CAAC,GAAGC,EAAE,GAAG,EAAE,GAAGC,MAAM,GAAGA,MAAM;EACjD;EACA;EACAF,EAAE,EAAE,GAAG,CAAC,CAAC,GAAGI,MAAM,IAAIP,MAAM,CAACS,YAAY,CAAC,GAAG,GAAGL,EAAE,KAAK,CAAC,CAAC,GAAGD,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAC1E;IACA;IACAE,MAAM,GAAGd,KAAK,CAACmB,OAAO,CAACL,MAAM,CAAC;EAChC;EACA,OAAOE,MAAM;AACf;AAGAI,MAAM,CAACC,OAAO,GAAG,OAAOC,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,IAAI,IAAID,MAAM,CAACC,IAAI,CAACC,IAAI,CAACF,MAAM,CAAC,IAAIhB,QAAQ"},"metadata":{},"sourceType":"script"}