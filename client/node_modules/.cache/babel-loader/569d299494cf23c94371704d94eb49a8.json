{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n        var _iterator = _createForOfIteratorHelper(operationDefs),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var operation = _step.value;\n            var _iterator3 = _createForOfIteratorHelper(context.getRecursivelyReferencedFragments(operation)),\n              _step3;\n            try {\n              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                var fragment = _step3.value;\n                fragmentNameUsed[fragment.name.value] = true;\n              }\n            } catch (err) {\n              _iterator3.e(err);\n            } finally {\n              _iterator3.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        var _iterator2 = _createForOfIteratorHelper(fragmentDefs),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var fragmentDef = _step2.value;\n            var fragName = fragmentDef.name.value;\n            if (fragmentNameUsed[fragName] !== true) {\n              context.reportError(new GraphQLError(\"Fragment \\\"\".concat(fragName, \"\\\" is never used.\"), {\n                nodes: fragmentDef\n              }));\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","NoUnusedFragmentsRule","context","operationDefs","fragmentDefs","OperationDefinition","node","push","FragmentDefinition","Document","leave","fragmentNameUsed","Object","create","operation","getRecursivelyReferencedFragments","fragment","name","value","fragmentDef","fragName","reportError","nodes"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-Must-Be-Used\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(\n            operation,\n          )) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(\n              new GraphQLError(`Fragment \"${fragName}\" is never used.`, {\n                nodes: fragmentDef,\n              }),\n            );\n          }\n        }\n      },\n    },\n  };\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqB,CAACC,OAAO,EAAE;EAC7C,IAAMC,aAAa,GAAG,EAAE;EACxB,IAAMC,YAAY,GAAG,EAAE;EACvB,OAAO;IACLC,mBAAmB,+BAACC,IAAI,EAAE;MACxBH,aAAa,CAACI,IAAI,CAACD,IAAI,CAAC;MACxB,OAAO,KAAK;IACd,CAAC;IAEDE,kBAAkB,8BAACF,IAAI,EAAE;MACvBF,YAAY,CAACG,IAAI,CAACD,IAAI,CAAC;MACvB,OAAO,KAAK;IACd,CAAC;IAEDG,QAAQ,EAAE;MACRC,KAAK,mBAAG;QACN,IAAMC,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;QAAC,2CAErBV,aAAa;UAAA;QAAA;UAArC,oDAAuC;YAAA,IAA5BW,SAAS;YAAA,4CACKZ,OAAO,CAACa,iCAAiC,CAC9DD,SAAS,CACV;cAAA;YAAA;cAFD,uDAEG;gBAAA,IAFQE,QAAQ;gBAGjBL,gBAAgB,CAACK,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,GAAG,IAAI;cAC9C;YAAC;cAAA;YAAA;cAAA;YAAA;UACH;QAAC;UAAA;QAAA;UAAA;QAAA;QAAA,4CAEyBd,YAAY;UAAA;QAAA;UAAtC,uDAAwC;YAAA,IAA7Be,WAAW;YACpB,IAAMC,QAAQ,GAAGD,WAAW,CAACF,IAAI,CAACC,KAAK;YAEvC,IAAIP,gBAAgB,CAACS,QAAQ,CAAC,KAAK,IAAI,EAAE;cACvClB,OAAO,CAACmB,WAAW,CACjB,IAAIrB,YAAY,sBAAcoB,QAAQ,wBAAoB;gBACxDE,KAAK,EAAEH;cACT,CAAC,CAAC,CACH;YACH;UACF;QAAC;UAAA;QAAA;UAAA;QAAA;MACH;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}