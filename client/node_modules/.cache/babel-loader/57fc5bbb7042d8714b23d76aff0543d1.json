{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  var operations = [];\n  var depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n  var _iterator = _createForOfIteratorHelper(documentAST.definitions),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var definitionNode = _step.value;\n      switch (definitionNode.kind) {\n        case Kind.OPERATION_DEFINITION:\n          operations.push(definitionNode);\n          break;\n        case Kind.FRAGMENT_DEFINITION:\n          depGraph[definitionNode.name.value] = collectDependencies(definitionNode.selectionSet);\n          break;\n        default: // ignore non-executable definitions\n      }\n    } // For each operation, produce a new synthesized AST which includes only what\n    // is necessary for completing that operation.\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var separatedDocumentASTs = Object.create(null);\n  var _loop = function _loop() {\n    var operation = _operations[_i];\n    var dependencies = new Set();\n    var _iterator2 = _createForOfIteratorHelper(collectDependencies(operation.selectionSet)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var fragmentName = _step2.value;\n        collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n      } // Provides the empty string for anonymous operations.\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    var operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(function (node) {\n        return node === operation || node.kind === Kind.FRAGMENT_DEFINITION && dependencies.has(node.name.value);\n      })\n    };\n  };\n  for (var _i = 0, _operations = operations; _i < _operations.length; _i++) {\n    _loop();\n  }\n  return separatedDocumentASTs;\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    var immediateDeps = depGraph[fromName];\n    if (immediateDeps !== undefined) {\n      var _iterator3 = _createForOfIteratorHelper(immediateDeps),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var toName = _step3.value;\n          collectTransitiveDependencies(collected, depGraph, toName);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }\n}\nfunction collectDependencies(selectionSet) {\n  var dependencies = [];\n  visit(selectionSet, {\n    FragmentSpread: function FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    }\n  });\n  return dependencies;\n}","map":{"version":3,"names":["Kind","visit","separateOperations","documentAST","operations","depGraph","Object","create","definitions","definitionNode","kind","OPERATION_DEFINITION","push","FRAGMENT_DEFINITION","name","value","collectDependencies","selectionSet","separatedDocumentASTs","operation","dependencies","Set","fragmentName","collectTransitiveDependencies","operationName","DOCUMENT","filter","node","has","collected","fromName","add","immediateDeps","undefined","toName","FragmentSpread"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/utilities/separateOperations.mjs"],"sourcesContent":["import { Kind } from '../language/kinds.mjs';\nimport { visit } from '../language/visitor.mjs';\n/**\n * separateOperations accepts a single AST document which may contain many\n * operations and fragments and returns a collection of AST documents each of\n * which contains a single operation as well the fragment definitions it\n * refers to.\n */\n\nexport function separateOperations(documentAST) {\n  const operations = [];\n  const depGraph = Object.create(null); // Populate metadata and build a dependency graph.\n\n  for (const definitionNode of documentAST.definitions) {\n    switch (definitionNode.kind) {\n      case Kind.OPERATION_DEFINITION:\n        operations.push(definitionNode);\n        break;\n\n      case Kind.FRAGMENT_DEFINITION:\n        depGraph[definitionNode.name.value] = collectDependencies(\n          definitionNode.selectionSet,\n        );\n        break;\n\n      default: // ignore non-executable definitions\n    }\n  } // For each operation, produce a new synthesized AST which includes only what\n  // is necessary for completing that operation.\n\n  const separatedDocumentASTs = Object.create(null);\n\n  for (const operation of operations) {\n    const dependencies = new Set();\n\n    for (const fragmentName of collectDependencies(operation.selectionSet)) {\n      collectTransitiveDependencies(dependencies, depGraph, fragmentName);\n    } // Provides the empty string for anonymous operations.\n\n    const operationName = operation.name ? operation.name.value : ''; // The list of definition nodes to be included for this operation, sorted\n    // to retain the same order as the original document.\n\n    separatedDocumentASTs[operationName] = {\n      kind: Kind.DOCUMENT,\n      definitions: documentAST.definitions.filter(\n        (node) =>\n          node === operation ||\n          (node.kind === Kind.FRAGMENT_DEFINITION &&\n            dependencies.has(node.name.value)),\n      ),\n    };\n  }\n\n  return separatedDocumentASTs;\n}\n\n// From a dependency graph, collects a list of transitive dependencies by\n// recursing through a dependency graph.\nfunction collectTransitiveDependencies(collected, depGraph, fromName) {\n  if (!collected.has(fromName)) {\n    collected.add(fromName);\n    const immediateDeps = depGraph[fromName];\n\n    if (immediateDeps !== undefined) {\n      for (const toName of immediateDeps) {\n        collectTransitiveDependencies(collected, depGraph, toName);\n      }\n    }\n  }\n}\n\nfunction collectDependencies(selectionSet) {\n  const dependencies = [];\n  visit(selectionSet, {\n    FragmentSpread(node) {\n      dependencies.push(node.name.value);\n    },\n  });\n  return dependencies;\n}\n"],"mappings":";AAAA,SAASA,IAAI,QAAQ,uBAAuB;AAC5C,SAASC,KAAK,QAAQ,yBAAyB;AAC/C;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAkB,CAACC,WAAW,EAAE;EAC9C,IAAMC,UAAU,GAAG,EAAE;EACrB,IAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAAA,2CAETJ,WAAW,CAACK,WAAW;IAAA;EAAA;IAApD,oDAAsD;MAAA,IAA3CC,cAAc;MACvB,QAAQA,cAAc,CAACC,IAAI;QACzB,KAAKV,IAAI,CAACW,oBAAoB;UAC5BP,UAAU,CAACQ,IAAI,CAACH,cAAc,CAAC;UAC/B;QAEF,KAAKT,IAAI,CAACa,mBAAmB;UAC3BR,QAAQ,CAACI,cAAc,CAACK,IAAI,CAACC,KAAK,CAAC,GAAGC,mBAAmB,CACvDP,cAAc,CAACQ,YAAY,CAC5B;UACD;QAEF,QAAQ,CAAC;MAAA;IAEb,CAAC,CAAC;IACF;EAAA;IAAA;EAAA;IAAA;EAAA;EAEA,IAAMC,qBAAqB,GAAGZ,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAAC;IAE7C,IAAMY,SAAS;IAClB,IAAMC,YAAY,GAAG,IAAIC,GAAG,EAAE;IAAC,4CAEJL,mBAAmB,CAACG,SAAS,CAACF,YAAY,CAAC;MAAA;IAAA;MAAtE,uDAAwE;QAAA,IAA7DK,YAAY;QACrBC,6BAA6B,CAACH,YAAY,EAAEf,QAAQ,EAAEiB,YAAY,CAAC;MACrE,CAAC,CAAC;IAAA;MAAA;IAAA;MAAA;IAAA;IAEF,IAAME,aAAa,GAAGL,SAAS,CAACL,IAAI,GAAGK,SAAS,CAACL,IAAI,CAACC,KAAK,GAAG,EAAE,CAAC,CAAC;IAClE;;IAEAG,qBAAqB,CAACM,aAAa,CAAC,GAAG;MACrCd,IAAI,EAAEV,IAAI,CAACyB,QAAQ;MACnBjB,WAAW,EAAEL,WAAW,CAACK,WAAW,CAACkB,MAAM,CACzC,UAACC,IAAI;QAAA,OACHA,IAAI,KAAKR,SAAS,IACjBQ,IAAI,CAACjB,IAAI,KAAKV,IAAI,CAACa,mBAAmB,IACrCO,YAAY,CAACQ,GAAG,CAACD,IAAI,CAACb,IAAI,CAACC,KAAK,CAAE;MAAA;IAE1C,CAAC;EAAC;EAlBJ,+BAAwBX,UAAU,iCAAE;IAAA;EAmBpC;EAEA,OAAOc,qBAAqB;AAC9B;;AAEA;AACA;AACA,SAASK,6BAA6B,CAACM,SAAS,EAAExB,QAAQ,EAAEyB,QAAQ,EAAE;EACpE,IAAI,CAACD,SAAS,CAACD,GAAG,CAACE,QAAQ,CAAC,EAAE;IAC5BD,SAAS,CAACE,GAAG,CAACD,QAAQ,CAAC;IACvB,IAAME,aAAa,GAAG3B,QAAQ,CAACyB,QAAQ,CAAC;IAExC,IAAIE,aAAa,KAAKC,SAAS,EAAE;MAAA,4CACVD,aAAa;QAAA;MAAA;QAAlC,uDAAoC;UAAA,IAAzBE,MAAM;UACfX,6BAA6B,CAACM,SAAS,EAAExB,QAAQ,EAAE6B,MAAM,CAAC;QAC5D;MAAC;QAAA;MAAA;QAAA;MAAA;IACH;EACF;AACF;AAEA,SAASlB,mBAAmB,CAACC,YAAY,EAAE;EACzC,IAAMG,YAAY,GAAG,EAAE;EACvBnB,KAAK,CAACgB,YAAY,EAAE;IAClBkB,cAAc,0BAACR,IAAI,EAAE;MACnBP,YAAY,CAACR,IAAI,CAACe,IAAI,CAACb,IAAI,CAACC,KAAK,CAAC;IACpC;EACF,CAAC,CAAC;EACF,OAAOK,YAAY;AACrB"},"metadata":{},"sourceType":"module"}