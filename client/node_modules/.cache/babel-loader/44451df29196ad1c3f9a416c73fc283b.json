{"ast":null,"code":"import _slicedToArray from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  var _ref = secondArg ? [firstArg, secondArg] : [undefined, firstArg],\n    _ref2 = _slicedToArray(_ref, 2),\n    subMessage = _ref2[0],\n    suggestionsArg = _ref2[1];\n  var message = ' Did you mean ';\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n  var suggestions = suggestionsArg.map(function (x) {\n    return \"\\\"\".concat(x, \"\\\"\");\n  });\n  switch (suggestions.length) {\n    case 0:\n      return '';\n    case 1:\n      return message + suggestions[0] + '?';\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n  var selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  var lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}","map":{"version":3,"names":["MAX_SUGGESTIONS","didYouMean","firstArg","secondArg","undefined","subMessage","suggestionsArg","message","suggestions","map","x","length","selected","slice","lastItem","pop","join"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/jsutils/didYouMean.mjs"],"sourcesContent":["const MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\nexport function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = secondArg\n    ? [firstArg, secondArg]\n    : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map((x) => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n"],"mappings":";AAAA,IAAMA,eAAe,GAAG,CAAC;AACzB;AACA;AACA;;AAEA,OAAO,SAASC,UAAU,CAACC,QAAQ,EAAEC,SAAS,EAAE;EAC9C,WAAqCA,SAAS,GAC1C,CAACD,QAAQ,EAAEC,SAAS,CAAC,GACrB,CAACC,SAAS,EAAEF,QAAQ,CAAC;IAAA;IAFlBG,UAAU;IAAEC,cAAc;EAGjC,IAAIC,OAAO,GAAG,gBAAgB;EAE9B,IAAIF,UAAU,EAAE;IACdE,OAAO,IAAIF,UAAU,GAAG,GAAG;EAC7B;EAEA,IAAMG,WAAW,GAAGF,cAAc,CAACG,GAAG,CAAC,UAACC,CAAC;IAAA,mBAASA,CAAC;EAAA,CAAG,CAAC;EAEvD,QAAQF,WAAW,CAACG,MAAM;IACxB,KAAK,CAAC;MACJ,OAAO,EAAE;IAEX,KAAK,CAAC;MACJ,OAAOJ,OAAO,GAAGC,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG;IAEvC,KAAK,CAAC;MACJ,OAAOD,OAAO,GAAGC,WAAW,CAAC,CAAC,CAAC,GAAG,MAAM,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAG,GAAG;EAAC;EAGpE,IAAMI,QAAQ,GAAGJ,WAAW,CAACK,KAAK,CAAC,CAAC,EAAEb,eAAe,CAAC;EACtD,IAAMc,QAAQ,GAAGF,QAAQ,CAACG,GAAG,EAAE;EAC/B,OAAOR,OAAO,GAAGK,QAAQ,CAACI,IAAI,CAAC,IAAI,CAAC,GAAG,OAAO,GAAGF,QAAQ,GAAG,GAAG;AACjE"},"metadata":{},"sourceType":"module"}