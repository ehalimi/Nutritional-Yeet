{"ast":null,"code":"import _toConsumableArray from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { isTypeDefinitionNode, isTypeExtensionNode } from '../language/predicates.mjs';\nimport { GraphQLEnumType, GraphQLInputObjectType, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLScalarType, GraphQLUnionType, isEnumType, isInputObjectType, isInterfaceType, isListType, isNonNullType, isObjectType, isScalarType, isUnionType } from '../type/definition.mjs';\nimport { GraphQLDeprecatedDirective, GraphQLDirective, GraphQLSpecifiedByDirective } from '../type/directives.mjs';\nimport { introspectionTypes, isIntrospectionType } from '../type/introspection.mjs';\nimport { isSpecifiedScalarType, specifiedScalarTypes } from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(false, 'Must provide valid Document AST.');\n  if ((options === null || options === void 0 ? void 0 : options.assumeValid) !== true && (options === null || options === void 0 ? void 0 : options.assumeValidSDL) !== true) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n  var schemaConfig = schema.toConfig();\n  var extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig ? schema : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  var typeDefs = [];\n  var typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  var directiveDefs = [];\n  var schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  var schemaExtensions = [];\n  var _iterator = _createForOfIteratorHelper(documentAST.definitions),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var def = _step.value;\n      if (def.kind === Kind.SCHEMA_DEFINITION) {\n        schemaDef = def;\n      } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n        schemaExtensions.push(def);\n      } else if (isTypeDefinitionNode(def)) {\n        typeDefs.push(def);\n      } else if (isTypeExtensionNode(def)) {\n        var extendedTypeName = def.name.value;\n        var existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n        typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n      } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        directiveDefs.push(def);\n      }\n    } // If this document contains no new types, extensions, or directives then\n    // return the same unmodified GraphQLSchema instance.\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {\n    return schemaConfig;\n  }\n  var typeMap = Object.create(null);\n  var _iterator2 = _createForOfIteratorHelper(schemaConfig.types),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var existingType = _step2.value;\n      typeMap[existingType.name] = extendNamedType(existingType);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  for (var _i = 0, _typeDefs = typeDefs; _i < _typeDefs.length; _i++) {\n    var typeNode = _typeDefs[_i];\n    var _stdTypeMap$name;\n    var name = typeNode.name.value;\n    typeMap[name] = (_stdTypeMap$name = stdTypeMap[name]) !== null && _stdTypeMap$name !== void 0 ? _stdTypeMap$name : buildType(typeNode);\n  }\n  var operationTypes = _objectSpread(_objectSpread({\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription)\n  }, schemaDef && getOperationTypes([schemaDef])), getOperationTypes(schemaExtensions)); // Then produce and return a Schema config with these types.\n\n  return _objectSpread(_objectSpread({\n    description: (_schemaDef = schemaDef) === null || _schemaDef === void 0 ? void 0 : (_schemaDef$descriptio = _schemaDef.description) === null || _schemaDef$descriptio === void 0 ? void 0 : _schemaDef$descriptio.value\n  }, operationTypes), {}, {\n    types: Object.values(typeMap),\n    directives: [].concat(_toConsumableArray(schemaConfig.directives.map(replaceDirective)), _toConsumableArray(directiveDefs.map(buildDirective))),\n    extensions: Object.create(null),\n    astNode: (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0 ? _schemaDef2 : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid: (_options$assumeValid = options === null || options === void 0 ? void 0 : options.assumeValid) !== null && _options$assumeValid !== void 0 ? _options$assumeValid : false\n  }); // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n  function replaceDirective(directive) {\n    var config = directive.toConfig();\n    return new GraphQLDirective(_objectSpread(_objectSpread({}, config), {}, {\n      args: mapValue(config.args, extendArg)\n    }));\n  }\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co !== void 0 ? _typeExtensionsMap$co : [];\n    return new GraphQLInputObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, function (field) {\n          return _objectSpread(_objectSpread({}, field), {}, {\n            type: replaceType(field.type)\n          });\n        })), buildInputFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null && _typeExtensionsMap$ty !== void 0 ? _typeExtensionsMap$ty : [];\n    return new GraphQLEnumType(_objectSpread(_objectSpread({}, config), {}, {\n      values: _objectSpread(_objectSpread({}, config.values), buildEnumValueMap(extensions)),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co2 !== void 0 ? _typeExtensionsMap$co2 : [];\n    var specifiedByURL = config.specifiedByURL;\n    var _iterator3 = _createForOfIteratorHelper(extensions),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var extensionNode = _step3.value;\n        var _getSpecifiedByURL;\n        specifiedByURL = (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null && _getSpecifiedByURL !== void 0 ? _getSpecifiedByURL : specifiedByURL;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n    return new GraphQLScalarType(_objectSpread(_objectSpread({}, config), {}, {\n      specifiedByURL: specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co3 !== void 0 ? _typeExtensionsMap$co3 : [];\n    return new GraphQLObjectType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(_toConsumableArray(type.getInterfaces().map(replaceNamedType)), _toConsumableArray(buildInterfaces(extensions)));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co4 !== void 0 ? _typeExtensionsMap$co4 : [];\n    return new GraphQLInterfaceType(_objectSpread(_objectSpread({}, config), {}, {\n      interfaces: function interfaces() {\n        return [].concat(_toConsumableArray(type.getInterfaces().map(replaceNamedType)), _toConsumableArray(buildInterfaces(extensions)));\n      },\n      fields: function fields() {\n        return _objectSpread(_objectSpread({}, mapValue(config.fields, extendField)), buildFieldMap(extensions));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n    var config = type.toConfig();\n    var extensions = (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null && _typeExtensionsMap$co5 !== void 0 ? _typeExtensionsMap$co5 : [];\n    return new GraphQLUnionType(_objectSpread(_objectSpread({}, config), {}, {\n      types: function types() {\n        return [].concat(_toConsumableArray(type.getTypes().map(replaceNamedType)), _toConsumableArray(buildUnionTypes(extensions)));\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    }));\n  }\n  function extendField(field) {\n    return _objectSpread(_objectSpread({}, field), {}, {\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg)\n    });\n  }\n  function extendArg(arg) {\n    return _objectSpread(_objectSpread({}, arg), {}, {\n      type: replaceType(arg.type)\n    });\n  }\n  function getOperationTypes(nodes) {\n    var opTypes = {};\n    var _iterator4 = _createForOfIteratorHelper(nodes),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var node = _step4.value;\n        var _node$operationTypes;\n\n        // FIXME: https://github.com/graphql/graphql-js/issues/2203\n        var operationTypesNodes = /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null && _node$operationTypes !== void 0 ? _node$operationTypes : [];\n        var _iterator5 = _createForOfIteratorHelper(operationTypesNodes),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var operationType = _step5.value;\n            // Note: While this could make early assertions to get the correctly\n            // typed values below, that would throw immediately while type system\n            // validation with validateSchema() will produce more actionable results.\n            // @ts-expect-error\n            opTypes[operationType.operation] = getNamedType(operationType.type);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    return opTypes;\n  }\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n    var name = node.name.value;\n    var type = (_stdTypeMap$name2 = stdTypeMap[name]) !== null && _stdTypeMap$name2 !== void 0 ? _stdTypeMap$name2 : typeMap[name];\n    if (type === undefined) {\n      throw new Error(\"Unknown type: \\\"\".concat(name, \"\\\".\"));\n    }\n    return type;\n  }\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n    return getNamedType(node);\n  }\n  function buildDirective(node) {\n    var _node$description;\n    return new GraphQLDirective({\n      name: node.name.value,\n      description: (_node$description = node.description) === null || _node$description === void 0 ? void 0 : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(function (_ref) {\n        var value = _ref.value;\n        return value;\n      }),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node\n    });\n  }\n  function buildFieldMap(nodes) {\n    var fieldConfigMap = Object.create(null);\n    var _iterator6 = _createForOfIteratorHelper(nodes),\n      _step6;\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var node = _step6.value;\n        var _node$fields;\n\n        // FIXME: https://github.com/graphql/graphql-js/issues/2203\n        var nodeFields = /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0 ? _node$fields : [];\n        var _iterator7 = _createForOfIteratorHelper(nodeFields),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var field = _step7.value;\n            var _field$description;\n            fieldConfigMap[field.name.value] = {\n              // Note: While this could make assertions to get the correctly typed\n              // value, that would throw immediately while type system validation\n              // with validateSchema() will produce more actionable results.\n              type: getWrappedType(field.type),\n              description: (_field$description = field.description) === null || _field$description === void 0 ? void 0 : _field$description.value,\n              args: buildArgumentMap(field.arguments),\n              deprecationReason: getDeprecationReason(field),\n              astNode: field\n            };\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n    return fieldConfigMap;\n  }\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    var argsNodes = /* c8 ignore next */\n    args !== null && args !== void 0 ? args : [];\n    var argConfigMap = Object.create(null);\n    var _iterator8 = _createForOfIteratorHelper(argsNodes),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var arg = _step8.value;\n        var _arg$description;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        var type = getWrappedType(arg.type);\n        argConfigMap[arg.name.value] = {\n          type: type,\n          description: (_arg$description = arg.description) === null || _arg$description === void 0 ? void 0 : _arg$description.value,\n          defaultValue: valueFromAST(arg.defaultValue, type),\n          deprecationReason: getDeprecationReason(arg),\n          astNode: arg\n        };\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    return argConfigMap;\n  }\n  function buildInputFieldMap(nodes) {\n    var inputFieldMap = Object.create(null);\n    var _iterator9 = _createForOfIteratorHelper(nodes),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var node = _step9.value;\n        var _node$fields2;\n\n        // FIXME: https://github.com/graphql/graphql-js/issues/2203\n        var fieldsNodes = /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0 ? _node$fields2 : [];\n        var _iterator10 = _createForOfIteratorHelper(fieldsNodes),\n          _step10;\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var field = _step10.value;\n            var _field$description2;\n\n            // Note: While this could make assertions to get the correctly typed\n            // value, that would throw immediately while type system validation\n            // with validateSchema() will produce more actionable results.\n            var type = getWrappedType(field.type);\n            inputFieldMap[field.name.value] = {\n              type: type,\n              description: (_field$description2 = field.description) === null || _field$description2 === void 0 ? void 0 : _field$description2.value,\n              defaultValue: valueFromAST(field.defaultValue, type),\n              deprecationReason: getDeprecationReason(field),\n              astNode: field\n            };\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    return inputFieldMap;\n  }\n  function buildEnumValueMap(nodes) {\n    var enumValueMap = Object.create(null);\n    var _iterator11 = _createForOfIteratorHelper(nodes),\n      _step11;\n    try {\n      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n        var node = _step11.value;\n        var _node$values;\n\n        // FIXME: https://github.com/graphql/graphql-js/issues/2203\n        var valuesNodes = /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n        var _iterator12 = _createForOfIteratorHelper(valuesNodes),\n          _step12;\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var value = _step12.value;\n            var _value$description;\n            enumValueMap[value.name.value] = {\n              description: (_value$description = value.description) === null || _value$description === void 0 ? void 0 : _value$description.value,\n              deprecationReason: getDeprecationReason(value),\n              astNode: value\n            };\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n      }\n    } catch (err) {\n      _iterator11.e(err);\n    } finally {\n      _iterator11.f();\n    }\n    return enumValueMap;\n  }\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    function (node) {\n      var _node$interfaces$map, _node$interfaces;\n      return (/* c8 ignore next */\n        (_node$interfaces$map = (_node$interfaces = node.interfaces) === null || _node$interfaces === void 0 ? void 0 : _node$interfaces.map(getNamedType)) !== null && _node$interfaces$map !== void 0 ? _node$interfaces$map : []\n      );\n    });\n  }\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    function (node) {\n      var _node$types$map, _node$types;\n      return (/* c8 ignore next */\n        (_node$types$map = (_node$types = node.types) === null || _node$types === void 0 ? void 0 : _node$types.map(getNamedType)) !== null && _node$types$map !== void 0 ? _node$types$map : []\n      );\n    });\n  }\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n    var name = astNode.name.value;\n    var extensionASTNodes = (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null && _typeExtensionsMap$na !== void 0 ? _typeExtensionsMap$na : [];\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        {\n          var _astNode$description;\n          var allNodes = [astNode].concat(_toConsumableArray(extensionASTNodes));\n          return new GraphQLObjectType({\n            name: name,\n            description: (_astNode$description = astNode.description) === null || _astNode$description === void 0 ? void 0 : _astNode$description.value,\n            interfaces: function interfaces() {\n              return buildInterfaces(allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        {\n          var _astNode$description2;\n          var _allNodes = [astNode].concat(_toConsumableArray(extensionASTNodes));\n          return new GraphQLInterfaceType({\n            name: name,\n            description: (_astNode$description2 = astNode.description) === null || _astNode$description2 === void 0 ? void 0 : _astNode$description2.value,\n            interfaces: function interfaces() {\n              return buildInterfaces(_allNodes);\n            },\n            fields: function fields() {\n              return buildFieldMap(_allNodes);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n      case Kind.ENUM_TYPE_DEFINITION:\n        {\n          var _astNode$description3;\n          var _allNodes2 = [astNode].concat(_toConsumableArray(extensionASTNodes));\n          return new GraphQLEnumType({\n            name: name,\n            description: (_astNode$description3 = astNode.description) === null || _astNode$description3 === void 0 ? void 0 : _astNode$description3.value,\n            values: buildEnumValueMap(_allNodes2),\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n      case Kind.UNION_TYPE_DEFINITION:\n        {\n          var _astNode$description4;\n          var _allNodes3 = [astNode].concat(_toConsumableArray(extensionASTNodes));\n          return new GraphQLUnionType({\n            name: name,\n            description: (_astNode$description4 = astNode.description) === null || _astNode$description4 === void 0 ? void 0 : _astNode$description4.value,\n            types: function types() {\n              return buildUnionTypes(_allNodes3);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n      case Kind.SCALAR_TYPE_DEFINITION:\n        {\n          var _astNode$description5;\n          return new GraphQLScalarType({\n            name: name,\n            description: (_astNode$description5 = astNode.description) === null || _astNode$description5 === void 0 ? void 0 : _astNode$description5.value,\n            specifiedByURL: getSpecifiedByURL(astNode),\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        {\n          var _astNode$description6;\n          var _allNodes4 = [astNode].concat(_toConsumableArray(extensionASTNodes));\n          return new GraphQLInputObjectType({\n            name: name,\n            description: (_astNode$description6 = astNode.description) === null || _astNode$description6 === void 0 ? void 0 : _astNode$description6.value,\n            fields: function fields() {\n              return buildInputFieldMap(_allNodes4);\n            },\n            astNode: astNode,\n            extensionASTNodes: extensionASTNodes\n          });\n        }\n    }\n  }\n}\nvar stdTypeMap = keyMap([].concat(_toConsumableArray(specifiedScalarTypes), _toConsumableArray(introspectionTypes)), function (type) {\n  return type.name;\n});\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  var deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0 ? void 0 : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  var specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0 ? void 0 : specifiedBy.url;\n}","map":{"version":3,"names":["devAssert","inspect","invariant","keyMap","mapValue","Kind","isTypeDefinitionNode","isTypeExtensionNode","GraphQLEnumType","GraphQLInputObjectType","GraphQLInterfaceType","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLScalarType","GraphQLUnionType","isEnumType","isInputObjectType","isInterfaceType","isListType","isNonNullType","isObjectType","isScalarType","isUnionType","GraphQLDeprecatedDirective","GraphQLDirective","GraphQLSpecifiedByDirective","introspectionTypes","isIntrospectionType","isSpecifiedScalarType","specifiedScalarTypes","assertSchema","GraphQLSchema","assertValidSDLExtension","getDirectiveValues","valueFromAST","extendSchema","schema","documentAST","options","kind","DOCUMENT","assumeValid","assumeValidSDL","schemaConfig","toConfig","extendedConfig","extendSchemaImpl","_schemaDef","_schemaDef$descriptio","_schemaDef2","_options$assumeValid","typeDefs","typeExtensionsMap","Object","create","directiveDefs","schemaDef","schemaExtensions","definitions","def","SCHEMA_DEFINITION","SCHEMA_EXTENSION","push","extendedTypeName","name","value","existingTypeExtensions","concat","DIRECTIVE_DEFINITION","keys","length","typeMap","types","existingType","extendNamedType","typeNode","_stdTypeMap$name","stdTypeMap","buildType","operationTypes","query","replaceNamedType","mutation","subscription","getOperationTypes","description","values","directives","map","replaceDirective","buildDirective","extensions","astNode","extensionASTNodes","replaceType","type","ofType","directive","config","args","extendArg","extendScalarType","extendObjectType","extendInterfaceType","extendUnionType","extendEnumType","extendInputObjectType","_typeExtensionsMap$co","fields","field","buildInputFieldMap","_typeExtensionsMap$ty","buildEnumValueMap","_typeExtensionsMap$co2","specifiedByURL","extensionNode","_getSpecifiedByURL","getSpecifiedByURL","_typeExtensionsMap$co3","interfaces","getInterfaces","buildInterfaces","extendField","buildFieldMap","_typeExtensionsMap$co4","_typeExtensionsMap$co5","getTypes","buildUnionTypes","arg","nodes","opTypes","node","_node$operationTypes","operationTypesNodes","operationType","operation","getNamedType","_stdTypeMap$name2","undefined","Error","getWrappedType","LIST_TYPE","NON_NULL_TYPE","_node$description","locations","isRepeatable","repeatable","buildArgumentMap","arguments","fieldConfigMap","_node$fields","nodeFields","_field$description","deprecationReason","getDeprecationReason","argsNodes","argConfigMap","_arg$description","defaultValue","inputFieldMap","_node$fields2","fieldsNodes","_field$description2","enumValueMap","_node$values","valuesNodes","_value$description","flatMap","_node$interfaces$map","_node$interfaces","_node$types$map","_node$types","_typeExtensionsMap$na","OBJECT_TYPE_DEFINITION","_astNode$description","allNodes","INTERFACE_TYPE_DEFINITION","_astNode$description2","ENUM_TYPE_DEFINITION","_astNode$description3","UNION_TYPE_DEFINITION","_astNode$description4","SCALAR_TYPE_DEFINITION","_astNode$description5","INPUT_OBJECT_TYPE_DEFINITION","_astNode$description6","deprecated","reason","specifiedBy","url"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/utilities/extendSchema.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { mapValue } from '../jsutils/mapValue.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../language/predicates.mjs';\nimport {\n  GraphQLEnumType,\n  GraphQLInputObjectType,\n  GraphQLInterfaceType,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLScalarType,\n  GraphQLUnionType,\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNonNullType,\n  isObjectType,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport {\n  GraphQLDeprecatedDirective,\n  GraphQLDirective,\n  GraphQLSpecifiedByDirective,\n} from '../type/directives.mjs';\nimport {\n  introspectionTypes,\n  isIntrospectionType,\n} from '../type/introspection.mjs';\nimport {\n  isSpecifiedScalarType,\n  specifiedScalarTypes,\n} from '../type/scalars.mjs';\nimport { assertSchema, GraphQLSchema } from '../type/schema.mjs';\nimport { assertValidSDLExtension } from '../validation/validate.mjs';\nimport { getDirectiveValues } from '../execution/values.mjs';\nimport { valueFromAST } from './valueFromAST.mjs';\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  (documentAST != null && documentAST.kind === Kind.DOCUMENT) ||\n    devAssert(false, 'Must provide valid Document AST.');\n\n  if (\n    (options === null || options === void 0 ? void 0 : options.assumeValid) !==\n      true &&\n    (options === null || options === void 0\n      ? void 0\n      : options.assumeValidSDL) !== true\n  ) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig\n    ? schema\n    : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  var _schemaDef, _schemaDef$descriptio, _schemaDef2, _options$assumeValid;\n\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions\n        ? existingTypeExtensions.concat([def])\n        : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n  if (\n    Object.keys(typeExtensionsMap).length === 0 &&\n    typeDefs.length === 0 &&\n    directiveDefs.length === 0 &&\n    schemaExtensions.length === 0 &&\n    schemaDef == null\n  ) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    var _stdTypeMap$name;\n\n    const name = typeNode.name.value;\n    typeMap[name] =\n      (_stdTypeMap$name = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name !== void 0\n        ? _stdTypeMap$name\n        : buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription:\n      schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions),\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description:\n      (_schemaDef = schemaDef) === null || _schemaDef === void 0\n        ? void 0\n        : (_schemaDef$descriptio = _schemaDef.description) === null ||\n          _schemaDef$descriptio === void 0\n        ? void 0\n        : _schemaDef$descriptio.value,\n    ...operationTypes,\n    types: Object.values(typeMap),\n    directives: [\n      ...schemaConfig.directives.map(replaceDirective),\n      ...directiveDefs.map(buildDirective),\n    ],\n    extensions: Object.create(null),\n    astNode:\n      (_schemaDef2 = schemaDef) !== null && _schemaDef2 !== void 0\n        ? _schemaDef2\n        : schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid:\n      (_options$assumeValid =\n        options === null || options === void 0\n          ? void 0\n          : options.assumeValid) !== null && _options$assumeValid !== void 0\n        ? _options$assumeValid\n        : false,\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // @ts-expect-error\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // @ts-expect-error\n      return new GraphQLNonNull(replaceType(type.ofType));\n    } // @ts-expect-error FIXME\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({\n      ...config,\n      args: mapValue(config.args, extendArg),\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    }\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    }\n    /* c8 ignore next 3 */\n    // Not reachable, all possible type definition nodes have been considered.\n\n    false || invariant(false, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    var _typeExtensionsMap$co;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co !== void 0\n        ? _typeExtensionsMap$co\n        : [];\n    return new GraphQLInputObjectType({\n      ...config,\n      fields: () => ({\n        ...mapValue(config.fields, (field) => ({\n          ...field,\n          type: replaceType(field.type),\n        })),\n        ...buildInputFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendEnumType(type) {\n    var _typeExtensionsMap$ty;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$ty = typeExtensionsMap[type.name]) !== null &&\n      _typeExtensionsMap$ty !== void 0\n        ? _typeExtensionsMap$ty\n        : [];\n    return new GraphQLEnumType({\n      ...config,\n      values: { ...config.values, ...buildEnumValueMap(extensions) },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendScalarType(type) {\n    var _typeExtensionsMap$co2;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co2 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co2 !== void 0\n        ? _typeExtensionsMap$co2\n        : [];\n    let specifiedByURL = config.specifiedByURL;\n\n    for (const extensionNode of extensions) {\n      var _getSpecifiedByURL;\n\n      specifiedByURL =\n        (_getSpecifiedByURL = getSpecifiedByURL(extensionNode)) !== null &&\n        _getSpecifiedByURL !== void 0\n          ? _getSpecifiedByURL\n          : specifiedByURL;\n    }\n\n    return new GraphQLScalarType({\n      ...config,\n      specifiedByURL,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendObjectType(type) {\n    var _typeExtensionsMap$co3;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co3 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co3 !== void 0\n        ? _typeExtensionsMap$co3\n        : [];\n    return new GraphQLObjectType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendInterfaceType(type) {\n    var _typeExtensionsMap$co4;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co4 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co4 !== void 0\n        ? _typeExtensionsMap$co4\n        : [];\n    return new GraphQLInterfaceType({\n      ...config,\n      interfaces: () => [\n        ...type.getInterfaces().map(replaceNamedType),\n        ...buildInterfaces(extensions),\n      ],\n      fields: () => ({\n        ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions),\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendUnionType(type) {\n    var _typeExtensionsMap$co5;\n\n    const config = type.toConfig();\n    const extensions =\n      (_typeExtensionsMap$co5 = typeExtensionsMap[config.name]) !== null &&\n      _typeExtensionsMap$co5 !== void 0\n        ? _typeExtensionsMap$co5\n        : [];\n    return new GraphQLUnionType({\n      ...config,\n      types: () => [\n        ...type.getTypes().map(replaceNamedType),\n        ...buildUnionTypes(extensions),\n      ],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions),\n    });\n  }\n\n  function extendField(field) {\n    return {\n      ...field,\n      type: replaceType(field.type),\n      args: field.args && mapValue(field.args, extendArg),\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg, type: replaceType(arg.type) };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      var _node$operationTypes;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const operationTypesNodes =\n        /* c8 ignore next */\n        (_node$operationTypes = node.operationTypes) !== null &&\n        _node$operationTypes !== void 0\n          ? _node$operationTypes\n          : [];\n\n      for (const operationType of operationTypesNodes) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        // @ts-expect-error\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    }\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    var _stdTypeMap$name2;\n\n    const name = node.name.value;\n    const type =\n      (_stdTypeMap$name2 = stdTypeMap[name]) !== null &&\n      _stdTypeMap$name2 !== void 0\n        ? _stdTypeMap$name2\n        : typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    var _node$description;\n\n    return new GraphQLDirective({\n      name: node.name.value,\n      description:\n        (_node$description = node.description) === null ||\n        _node$description === void 0\n          ? void 0\n          : _node$description.value,\n      // @ts-expect-error\n      locations: node.locations.map(({ value }) => value),\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node,\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const nodeFields =\n        /* c8 ignore next */\n        (_node$fields = node.fields) !== null && _node$fields !== void 0\n          ? _node$fields\n          : [];\n\n      for (const field of nodeFields) {\n        var _field$description;\n\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description:\n            (_field$description = field.description) === null ||\n            _field$description === void 0\n              ? void 0\n              : _field$description.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // FIXME: https://github.com/graphql/graphql-js/issues/2203\n    const argsNodes =\n      /* c8 ignore next */\n      args !== null && args !== void 0 ? args : [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      var _arg$description;\n\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description:\n          (_arg$description = arg.description) === null ||\n          _arg$description === void 0\n            ? void 0\n            : _arg$description.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg,\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$fields2;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const fieldsNodes =\n        /* c8 ignore next */\n        (_node$fields2 = node.fields) !== null && _node$fields2 !== void 0\n          ? _node$fields2\n          : [];\n\n      for (const field of fieldsNodes) {\n        var _field$description2;\n\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description:\n            (_field$description2 = field.description) === null ||\n            _field$description2 === void 0\n              ? void 0\n              : _field$description2.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field,\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      var _node$values;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      const valuesNodes =\n        /* c8 ignore next */\n        (_node$values = node.values) !== null && _node$values !== void 0\n          ? _node$values\n          : [];\n\n      for (const value of valuesNodes) {\n        var _value$description;\n\n        enumValueMap[value.name.value] = {\n          description:\n            (_value$description = value.description) === null ||\n            _value$description === void 0\n              ? void 0\n              : _value$description.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value,\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$interfaces$map, _node$interfaces;\n\n        return (\n          /* c8 ignore next */\n          (_node$interfaces$map =\n            (_node$interfaces = node.interfaces) === null ||\n            _node$interfaces === void 0\n              ? void 0\n              : _node$interfaces.map(getNamedType)) !== null &&\n            _node$interfaces$map !== void 0\n            ? _node$interfaces$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildUnionTypes(nodes) {\n    // Note: While this could make assertions to get the correctly typed\n    // values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    // @ts-expect-error\n    return nodes.flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (node) => {\n        var _node$types$map, _node$types;\n\n        return (\n          /* c8 ignore next */\n          (_node$types$map =\n            (_node$types = node.types) === null || _node$types === void 0\n              ? void 0\n              : _node$types.map(getNamedType)) !== null &&\n            _node$types$map !== void 0\n            ? _node$types$map\n            : []\n        );\n      },\n    );\n  }\n\n  function buildType(astNode) {\n    var _typeExtensionsMap$na;\n\n    const name = astNode.name.value;\n    const extensionASTNodes =\n      (_typeExtensionsMap$na = typeExtensionsMap[name]) !== null &&\n      _typeExtensionsMap$na !== void 0\n        ? _typeExtensionsMap$na\n        : [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION: {\n        var _astNode$description;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLObjectType({\n          name,\n          description:\n            (_astNode$description = astNode.description) === null ||\n            _astNode$description === void 0\n              ? void 0\n              : _astNode$description.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INTERFACE_TYPE_DEFINITION: {\n        var _astNode$description2;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInterfaceType({\n          name,\n          description:\n            (_astNode$description2 = astNode.description) === null ||\n            _astNode$description2 === void 0\n              ? void 0\n              : _astNode$description2.value,\n          interfaces: () => buildInterfaces(allNodes),\n          fields: () => buildFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.ENUM_TYPE_DEFINITION: {\n        var _astNode$description3;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLEnumType({\n          name,\n          description:\n            (_astNode$description3 = astNode.description) === null ||\n            _astNode$description3 === void 0\n              ? void 0\n              : _astNode$description3.value,\n          values: buildEnumValueMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.UNION_TYPE_DEFINITION: {\n        var _astNode$description4;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLUnionType({\n          name,\n          description:\n            (_astNode$description4 = astNode.description) === null ||\n            _astNode$description4 === void 0\n              ? void 0\n              : _astNode$description4.value,\n          types: () => buildUnionTypes(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.SCALAR_TYPE_DEFINITION: {\n        var _astNode$description5;\n\n        return new GraphQLScalarType({\n          name,\n          description:\n            (_astNode$description5 = astNode.description) === null ||\n            _astNode$description5 === void 0\n              ? void 0\n              : _astNode$description5.value,\n          specifiedByURL: getSpecifiedByURL(astNode),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION: {\n        var _astNode$description6;\n\n        const allNodes = [astNode, ...extensionASTNodes];\n        return new GraphQLInputObjectType({\n          name,\n          description:\n            (_astNode$description6 = astNode.description) === null ||\n            _astNode$description6 === void 0\n              ? void 0\n              : _astNode$description6.value,\n          fields: () => buildInputFieldMap(allNodes),\n          astNode,\n          extensionASTNodes,\n        });\n      }\n    }\n  }\n}\nconst stdTypeMap = keyMap(\n  [...specifiedScalarTypes, ...introspectionTypes],\n  (type) => type.name,\n);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return deprecated === null || deprecated === void 0\n    ? void 0\n    : deprecated.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByURL.\n */\n\nfunction getSpecifiedByURL(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node); // @ts-expect-error validated by `getDirectiveValues`\n\n  return specifiedBy === null || specifiedBy === void 0\n    ? void 0\n    : specifiedBy.url;\n}\n"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,IAAI,QAAQ,uBAAuB;AAC5C,SACEC,oBAAoB,EACpBC,mBAAmB,QACd,4BAA4B;AACnC,SACEC,eAAe,EACfC,sBAAsB,EACtBC,oBAAoB,EACpBC,WAAW,EACXC,cAAc,EACdC,iBAAiB,EACjBC,iBAAiB,EACjBC,gBAAgB,EAChBC,UAAU,EACVC,iBAAiB,EACjBC,eAAe,EACfC,UAAU,EACVC,aAAa,EACbC,YAAY,EACZC,YAAY,EACZC,WAAW,QACN,wBAAwB;AAC/B,SACEC,0BAA0B,EAC1BC,gBAAgB,EAChBC,2BAA2B,QACtB,wBAAwB;AAC/B,SACEC,kBAAkB,EAClBC,mBAAmB,QACd,2BAA2B;AAClC,SACEC,qBAAqB,EACrBC,oBAAoB,QACf,qBAAqB;AAC5B,SAASC,YAAY,EAAEC,aAAa,QAAQ,oBAAoB;AAChE,SAASC,uBAAuB,QAAQ,4BAA4B;AACpE,SAASC,kBAAkB,QAAQ,yBAAyB;AAC5D,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAY,CAACC,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAE;EACzDR,YAAY,CAACM,MAAM,CAAC;EACnBC,WAAW,IAAI,IAAI,IAAIA,WAAW,CAACE,IAAI,KAAKnC,IAAI,CAACoC,QAAQ,IACxDzC,SAAS,CAAC,KAAK,EAAE,kCAAkC,CAAC;EAEtD,IACE,CAACuC,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACG,WAAW,MACpE,IAAI,IACN,CAACH,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GACnC,KAAK,CAAC,GACNA,OAAO,CAACI,cAAc,MAAM,IAAI,EACpC;IACAV,uBAAuB,CAACK,WAAW,EAAED,MAAM,CAAC;EAC9C;EAEA,IAAMO,YAAY,GAAGP,MAAM,CAACQ,QAAQ,EAAE;EACtC,IAAMC,cAAc,GAAGC,gBAAgB,CAACH,YAAY,EAAEN,WAAW,EAAEC,OAAO,CAAC;EAC3E,OAAOK,YAAY,KAAKE,cAAc,GAClCT,MAAM,GACN,IAAIL,aAAa,CAACc,cAAc,CAAC;AACvC;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAgB,CAACH,YAAY,EAAEN,WAAW,EAAEC,OAAO,EAAE;EACnE,IAAIS,UAAU,EAAEC,qBAAqB,EAAEC,WAAW,EAAEC,oBAAoB;;EAExE;EACA,IAAMC,QAAQ,GAAG,EAAE;EACnB,IAAMC,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/C;;EAEA,IAAMC,aAAa,GAAG,EAAE;EACxB,IAAIC,SAAS,CAAC,CAAC;;EAEf,IAAMC,gBAAgB,GAAG,EAAE;EAAC,2CAEVpB,WAAW,CAACqB,WAAW;IAAA;EAAA;IAAzC,oDAA2C;MAAA,IAAhCC,GAAG;MACZ,IAAIA,GAAG,CAACpB,IAAI,KAAKnC,IAAI,CAACwD,iBAAiB,EAAE;QACvCJ,SAAS,GAAGG,GAAG;MACjB,CAAC,MAAM,IAAIA,GAAG,CAACpB,IAAI,KAAKnC,IAAI,CAACyD,gBAAgB,EAAE;QAC7CJ,gBAAgB,CAACK,IAAI,CAACH,GAAG,CAAC;MAC5B,CAAC,MAAM,IAAItD,oBAAoB,CAACsD,GAAG,CAAC,EAAE;QACpCR,QAAQ,CAACW,IAAI,CAACH,GAAG,CAAC;MACpB,CAAC,MAAM,IAAIrD,mBAAmB,CAACqD,GAAG,CAAC,EAAE;QACnC,IAAMI,gBAAgB,GAAGJ,GAAG,CAACK,IAAI,CAACC,KAAK;QACvC,IAAMC,sBAAsB,GAAGd,iBAAiB,CAACW,gBAAgB,CAAC;QAClEX,iBAAiB,CAACW,gBAAgB,CAAC,GAAGG,sBAAsB,GACxDA,sBAAsB,CAACC,MAAM,CAAC,CAACR,GAAG,CAAC,CAAC,GACpC,CAACA,GAAG,CAAC;MACX,CAAC,MAAM,IAAIA,GAAG,CAACpB,IAAI,KAAKnC,IAAI,CAACgE,oBAAoB,EAAE;QACjDb,aAAa,CAACO,IAAI,CAACH,GAAG,CAAC;MACzB;IACF,CAAC,CAAC;IACF;EAAA;IAAA;EAAA;IAAA;EAAA;EAEA,IACEN,MAAM,CAACgB,IAAI,CAACjB,iBAAiB,CAAC,CAACkB,MAAM,KAAK,CAAC,IAC3CnB,QAAQ,CAACmB,MAAM,KAAK,CAAC,IACrBf,aAAa,CAACe,MAAM,KAAK,CAAC,IAC1Bb,gBAAgB,CAACa,MAAM,KAAK,CAAC,IAC7Bd,SAAS,IAAI,IAAI,EACjB;IACA,OAAOb,YAAY;EACrB;EAEA,IAAM4B,OAAO,GAAGlB,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAAC,4CAETX,YAAY,CAAC6B,KAAK;IAAA;EAAA;IAA7C,uDAA+C;MAAA,IAApCC,YAAY;MACrBF,OAAO,CAACE,YAAY,CAACT,IAAI,CAAC,GAAGU,eAAe,CAACD,YAAY,CAAC;IAC5D;EAAC;IAAA;EAAA;IAAA;EAAA;EAED,6BAAuBtB,QAAQ,+BAAE;IAA5B,IAAMwB,QAAQ;IACjB,IAAIC,gBAAgB;IAEpB,IAAMZ,IAAI,GAAGW,QAAQ,CAACX,IAAI,CAACC,KAAK;IAChCM,OAAO,CAACP,IAAI,CAAC,GACX,CAACY,gBAAgB,GAAGC,UAAU,CAACb,IAAI,CAAC,MAAM,IAAI,IAC9CY,gBAAgB,KAAK,KAAK,CAAC,GACvBA,gBAAgB,GAChBE,SAAS,CAACH,QAAQ,CAAC;EAC3B;EAEA,IAAMI,cAAc;IAClB;IACAC,KAAK,EAAErC,YAAY,CAACqC,KAAK,IAAIC,gBAAgB,CAACtC,YAAY,CAACqC,KAAK,CAAC;IACjEE,QAAQ,EAAEvC,YAAY,CAACuC,QAAQ,IAAID,gBAAgB,CAACtC,YAAY,CAACuC,QAAQ,CAAC;IAC1EC,YAAY,EACVxC,YAAY,CAACwC,YAAY,IAAIF,gBAAgB,CAACtC,YAAY,CAACwC,YAAY;EAAC,GAEtE3B,SAAS,IAAI4B,iBAAiB,CAAC,CAAC5B,SAAS,CAAC,CAAC,GAC5C4B,iBAAiB,CAAC3B,gBAAgB,CAAC,CACvC,CAAC,CAAC;;EAEH;IACE4B,WAAW,EACT,CAACtC,UAAU,GAAGS,SAAS,MAAM,IAAI,IAAIT,UAAU,KAAK,KAAK,CAAC,GACtD,KAAK,CAAC,GACN,CAACC,qBAAqB,GAAGD,UAAU,CAACsC,WAAW,MAAM,IAAI,IACzDrC,qBAAqB,KAAK,KAAK,CAAC,GAChC,KAAK,CAAC,GACNA,qBAAqB,CAACiB;EAAK,GAC9Bc,cAAc;IACjBP,KAAK,EAAEnB,MAAM,CAACiC,MAAM,CAACf,OAAO,CAAC;IAC7BgB,UAAU,+BACL5C,YAAY,CAAC4C,UAAU,CAACC,GAAG,CAACC,gBAAgB,CAAC,sBAC7ClC,aAAa,CAACiC,GAAG,CAACE,cAAc,CAAC,EACrC;IACDC,UAAU,EAAEtC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAC/BsC,OAAO,EACL,CAAC3C,WAAW,GAAGO,SAAS,MAAM,IAAI,IAAIP,WAAW,KAAK,KAAK,CAAC,GACxDA,WAAW,GACXN,YAAY,CAACiD,OAAO;IAC1BC,iBAAiB,EAAElD,YAAY,CAACkD,iBAAiB,CAAC1B,MAAM,CAACV,gBAAgB,CAAC;IAC1EhB,WAAW,EACT,CAACS,oBAAoB,GACnBZ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAClC,KAAK,CAAC,GACNA,OAAO,CAACG,WAAW,MAAM,IAAI,IAAIS,oBAAoB,KAAK,KAAK,CAAC,GAClEA,oBAAoB,GACpB;EAAK,GACX,CAAC;EACH;;EAEA,SAAS4C,WAAW,CAACC,IAAI,EAAE;IACzB,IAAI7E,UAAU,CAAC6E,IAAI,CAAC,EAAE;MACpB;MACA,OAAO,IAAIrF,WAAW,CAACoF,WAAW,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC;IAClD;IAEA,IAAI7E,aAAa,CAAC4E,IAAI,CAAC,EAAE;MACvB;MACA,OAAO,IAAIpF,cAAc,CAACmF,WAAW,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC;IACrD,CAAC,CAAC;;IAEF,OAAOf,gBAAgB,CAACc,IAAI,CAAC;EAC/B;EAEA,SAASd,gBAAgB,CAACc,IAAI,EAAE;IAC9B;IACA;IACA;IACA,OAAOxB,OAAO,CAACwB,IAAI,CAAC/B,IAAI,CAAC;EAC3B;EAEA,SAASyB,gBAAgB,CAACQ,SAAS,EAAE;IACnC,IAAMC,MAAM,GAAGD,SAAS,CAACrD,QAAQ,EAAE;IACnC,OAAO,IAAIpB,gBAAgB,iCACtB0E,MAAM;MACTC,IAAI,EAAEhG,QAAQ,CAAC+F,MAAM,CAACC,IAAI,EAAEC,SAAS;IAAC,GACtC;EACJ;EAEA,SAAS1B,eAAe,CAACqB,IAAI,EAAE;IAC7B,IAAIpE,mBAAmB,CAACoE,IAAI,CAAC,IAAInE,qBAAqB,CAACmE,IAAI,CAAC,EAAE;MAC5D;MACA,OAAOA,IAAI;IACb;IAEA,IAAI1E,YAAY,CAAC0E,IAAI,CAAC,EAAE;MACtB,OAAOM,gBAAgB,CAACN,IAAI,CAAC;IAC/B;IAEA,IAAI3E,YAAY,CAAC2E,IAAI,CAAC,EAAE;MACtB,OAAOO,gBAAgB,CAACP,IAAI,CAAC;IAC/B;IAEA,IAAI9E,eAAe,CAAC8E,IAAI,CAAC,EAAE;MACzB,OAAOQ,mBAAmB,CAACR,IAAI,CAAC;IAClC;IAEA,IAAIzE,WAAW,CAACyE,IAAI,CAAC,EAAE;MACrB,OAAOS,eAAe,CAACT,IAAI,CAAC;IAC9B;IAEA,IAAIhF,UAAU,CAACgF,IAAI,CAAC,EAAE;MACpB,OAAOU,cAAc,CAACV,IAAI,CAAC;IAC7B;IAEA,IAAI/E,iBAAiB,CAAC+E,IAAI,CAAC,EAAE;MAC3B,OAAOW,qBAAqB,CAACX,IAAI,CAAC;IACpC;IACA;IACA;;IAEA,KAAK,IAAI9F,SAAS,CAAC,KAAK,EAAE,mBAAmB,GAAGD,OAAO,CAAC+F,IAAI,CAAC,CAAC;EAChE;EAEA,SAASW,qBAAqB,CAACX,IAAI,EAAE;IACnC,IAAIY,qBAAqB;IAEzB,IAAMT,MAAM,GAAGH,IAAI,CAACnD,QAAQ,EAAE;IAC9B,IAAM+C,UAAU,GACd,CAACgB,qBAAqB,GAAGvD,iBAAiB,CAAC8C,MAAM,CAAClC,IAAI,CAAC,MAAM,IAAI,IACjE2C,qBAAqB,KAAK,KAAK,CAAC,GAC5BA,qBAAqB,GACrB,EAAE;IACR,OAAO,IAAInG,sBAAsB,iCAC5B0F,MAAM;MACTU,MAAM,EAAE;QAAA,uCACHzG,QAAQ,CAAC+F,MAAM,CAACU,MAAM,EAAE,UAACC,KAAK;UAAA,uCAC5BA,KAAK;YACRd,IAAI,EAAED,WAAW,CAACe,KAAK,CAACd,IAAI;UAAC;QAAA,CAC7B,CAAC,GACAe,kBAAkB,CAACnB,UAAU,CAAC;MAAA,CACjC;MACFE,iBAAiB,EAAEK,MAAM,CAACL,iBAAiB,CAAC1B,MAAM,CAACwB,UAAU;IAAC,GAC9D;EACJ;EAEA,SAASc,cAAc,CAACV,IAAI,EAAE;IAC5B,IAAIgB,qBAAqB;IAEzB,IAAMb,MAAM,GAAGH,IAAI,CAACnD,QAAQ,EAAE;IAC9B,IAAM+C,UAAU,GACd,CAACoB,qBAAqB,GAAG3D,iBAAiB,CAAC2C,IAAI,CAAC/B,IAAI,CAAC,MAAM,IAAI,IAC/D+C,qBAAqB,KAAK,KAAK,CAAC,GAC5BA,qBAAqB,GACrB,EAAE;IACR,OAAO,IAAIxG,eAAe,iCACrB2F,MAAM;MACTZ,MAAM,kCAAOY,MAAM,CAACZ,MAAM,GAAK0B,iBAAiB,CAACrB,UAAU,CAAC,CAAE;MAC9DE,iBAAiB,EAAEK,MAAM,CAACL,iBAAiB,CAAC1B,MAAM,CAACwB,UAAU;IAAC,GAC9D;EACJ;EAEA,SAASU,gBAAgB,CAACN,IAAI,EAAE;IAC9B,IAAIkB,sBAAsB;IAE1B,IAAMf,MAAM,GAAGH,IAAI,CAACnD,QAAQ,EAAE;IAC9B,IAAM+C,UAAU,GACd,CAACsB,sBAAsB,GAAG7D,iBAAiB,CAAC8C,MAAM,CAAClC,IAAI,CAAC,MAAM,IAAI,IAClEiD,sBAAsB,KAAK,KAAK,CAAC,GAC7BA,sBAAsB,GACtB,EAAE;IACR,IAAIC,cAAc,GAAGhB,MAAM,CAACgB,cAAc;IAAC,4CAEfvB,UAAU;MAAA;IAAA;MAAtC,uDAAwC;QAAA,IAA7BwB,aAAa;QACtB,IAAIC,kBAAkB;QAEtBF,cAAc,GACZ,CAACE,kBAAkB,GAAGC,iBAAiB,CAACF,aAAa,CAAC,MAAM,IAAI,IAChEC,kBAAkB,KAAK,KAAK,CAAC,GACzBA,kBAAkB,GAClBF,cAAc;MACtB;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAO,IAAIrG,iBAAiB,iCACvBqF,MAAM;MACTgB,cAAc,EAAdA,cAAc;MACdrB,iBAAiB,EAAEK,MAAM,CAACL,iBAAiB,CAAC1B,MAAM,CAACwB,UAAU;IAAC,GAC9D;EACJ;EAEA,SAASW,gBAAgB,CAACP,IAAI,EAAE;IAC9B,IAAIuB,sBAAsB;IAE1B,IAAMpB,MAAM,GAAGH,IAAI,CAACnD,QAAQ,EAAE;IAC9B,IAAM+C,UAAU,GACd,CAAC2B,sBAAsB,GAAGlE,iBAAiB,CAAC8C,MAAM,CAAClC,IAAI,CAAC,MAAM,IAAI,IAClEsD,sBAAsB,KAAK,KAAK,CAAC,GAC7BA,sBAAsB,GACtB,EAAE;IACR,OAAO,IAAI1G,iBAAiB,iCACvBsF,MAAM;MACTqB,UAAU,EAAE;QAAA,oCACPxB,IAAI,CAACyB,aAAa,EAAE,CAAChC,GAAG,CAACP,gBAAgB,CAAC,sBAC1CwC,eAAe,CAAC9B,UAAU,CAAC;MAAA,CAC/B;MACDiB,MAAM,EAAE;QAAA,uCACHzG,QAAQ,CAAC+F,MAAM,CAACU,MAAM,EAAEc,WAAW,CAAC,GACpCC,aAAa,CAAChC,UAAU,CAAC;MAAA,CAC5B;MACFE,iBAAiB,EAAEK,MAAM,CAACL,iBAAiB,CAAC1B,MAAM,CAACwB,UAAU;IAAC,GAC9D;EACJ;EAEA,SAASY,mBAAmB,CAACR,IAAI,EAAE;IACjC,IAAI6B,sBAAsB;IAE1B,IAAM1B,MAAM,GAAGH,IAAI,CAACnD,QAAQ,EAAE;IAC9B,IAAM+C,UAAU,GACd,CAACiC,sBAAsB,GAAGxE,iBAAiB,CAAC8C,MAAM,CAAClC,IAAI,CAAC,MAAM,IAAI,IAClE4D,sBAAsB,KAAK,KAAK,CAAC,GAC7BA,sBAAsB,GACtB,EAAE;IACR,OAAO,IAAInH,oBAAoB,iCAC1ByF,MAAM;MACTqB,UAAU,EAAE;QAAA,oCACPxB,IAAI,CAACyB,aAAa,EAAE,CAAChC,GAAG,CAACP,gBAAgB,CAAC,sBAC1CwC,eAAe,CAAC9B,UAAU,CAAC;MAAA,CAC/B;MACDiB,MAAM,EAAE;QAAA,uCACHzG,QAAQ,CAAC+F,MAAM,CAACU,MAAM,EAAEc,WAAW,CAAC,GACpCC,aAAa,CAAChC,UAAU,CAAC;MAAA,CAC5B;MACFE,iBAAiB,EAAEK,MAAM,CAACL,iBAAiB,CAAC1B,MAAM,CAACwB,UAAU;IAAC,GAC9D;EACJ;EAEA,SAASa,eAAe,CAACT,IAAI,EAAE;IAC7B,IAAI8B,sBAAsB;IAE1B,IAAM3B,MAAM,GAAGH,IAAI,CAACnD,QAAQ,EAAE;IAC9B,IAAM+C,UAAU,GACd,CAACkC,sBAAsB,GAAGzE,iBAAiB,CAAC8C,MAAM,CAAClC,IAAI,CAAC,MAAM,IAAI,IAClE6D,sBAAsB,KAAK,KAAK,CAAC,GAC7BA,sBAAsB,GACtB,EAAE;IACR,OAAO,IAAI/G,gBAAgB,iCACtBoF,MAAM;MACT1B,KAAK,EAAE;QAAA,oCACFuB,IAAI,CAAC+B,QAAQ,EAAE,CAACtC,GAAG,CAACP,gBAAgB,CAAC,sBACrC8C,eAAe,CAACpC,UAAU,CAAC;MAAA,CAC/B;MACDE,iBAAiB,EAAEK,MAAM,CAACL,iBAAiB,CAAC1B,MAAM,CAACwB,UAAU;IAAC,GAC9D;EACJ;EAEA,SAAS+B,WAAW,CAACb,KAAK,EAAE;IAC1B,uCACKA,KAAK;MACRd,IAAI,EAAED,WAAW,CAACe,KAAK,CAACd,IAAI,CAAC;MAC7BI,IAAI,EAAEU,KAAK,CAACV,IAAI,IAAIhG,QAAQ,CAAC0G,KAAK,CAACV,IAAI,EAAEC,SAAS;IAAC;EAEvD;EAEA,SAASA,SAAS,CAAC4B,GAAG,EAAE;IACtB,uCAAYA,GAAG;MAAEjC,IAAI,EAAED,WAAW,CAACkC,GAAG,CAACjC,IAAI;IAAC;EAC9C;EAEA,SAASX,iBAAiB,CAAC6C,KAAK,EAAE;IAChC,IAAMC,OAAO,GAAG,CAAC,CAAC;IAAC,4CAEAD,KAAK;MAAA;IAAA;MAAxB,uDAA0B;QAAA,IAAfE,IAAI;QACb,IAAIC,oBAAoB;;QAExB;QACA,IAAMC,mBAAmB,GACvB;QACA,CAACD,oBAAoB,GAAGD,IAAI,CAACpD,cAAc,MAAM,IAAI,IACrDqD,oBAAoB,KAAK,KAAK,CAAC,GAC3BA,oBAAoB,GACpB,EAAE;QAAC,4CAEmBC,mBAAmB;UAAA;QAAA;UAA/C,uDAAiD;YAAA,IAAtCC,aAAa;YACtB;YACA;YACA;YACA;YACAJ,OAAO,CAACI,aAAa,CAACC,SAAS,CAAC,GAAGC,YAAY,CAACF,aAAa,CAACvC,IAAI,CAAC;UACrE;QAAC;UAAA;QAAA;UAAA;QAAA;MACH;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAOmC,OAAO;EAChB;EAEA,SAASM,YAAY,CAACL,IAAI,EAAE;IAC1B,IAAIM,iBAAiB;IAErB,IAAMzE,IAAI,GAAGmE,IAAI,CAACnE,IAAI,CAACC,KAAK;IAC5B,IAAM8B,IAAI,GACR,CAAC0C,iBAAiB,GAAG5D,UAAU,CAACb,IAAI,CAAC,MAAM,IAAI,IAC/CyE,iBAAiB,KAAK,KAAK,CAAC,GACxBA,iBAAiB,GACjBlE,OAAO,CAACP,IAAI,CAAC;IAEnB,IAAI+B,IAAI,KAAK2C,SAAS,EAAE;MACtB,MAAM,IAAIC,KAAK,2BAAmB3E,IAAI,SAAK;IAC7C;IAEA,OAAO+B,IAAI;EACb;EAEA,SAAS6C,cAAc,CAACT,IAAI,EAAE;IAC5B,IAAIA,IAAI,CAAC5F,IAAI,KAAKnC,IAAI,CAACyI,SAAS,EAAE;MAChC,OAAO,IAAInI,WAAW,CAACkI,cAAc,CAACT,IAAI,CAACpC,IAAI,CAAC,CAAC;IACnD;IAEA,IAAIoC,IAAI,CAAC5F,IAAI,KAAKnC,IAAI,CAAC0I,aAAa,EAAE;MACpC,OAAO,IAAInI,cAAc,CAACiI,cAAc,CAACT,IAAI,CAACpC,IAAI,CAAC,CAAC;IACtD;IAEA,OAAOyC,YAAY,CAACL,IAAI,CAAC;EAC3B;EAEA,SAASzC,cAAc,CAACyC,IAAI,EAAE;IAC5B,IAAIY,iBAAiB;IAErB,OAAO,IAAIvH,gBAAgB,CAAC;MAC1BwC,IAAI,EAAEmE,IAAI,CAACnE,IAAI,CAACC,KAAK;MACrBoB,WAAW,EACT,CAAC0D,iBAAiB,GAAGZ,IAAI,CAAC9C,WAAW,MAAM,IAAI,IAC/C0D,iBAAiB,KAAK,KAAK,CAAC,GACxB,KAAK,CAAC,GACNA,iBAAiB,CAAC9E,KAAK;MAC7B;MACA+E,SAAS,EAAEb,IAAI,CAACa,SAAS,CAACxD,GAAG,CAAC;QAAA,IAAGvB,KAAK,QAALA,KAAK;QAAA,OAAOA,KAAK;MAAA,EAAC;MACnDgF,YAAY,EAAEd,IAAI,CAACe,UAAU;MAC7B/C,IAAI,EAAEgD,gBAAgB,CAAChB,IAAI,CAACiB,SAAS,CAAC;MACtCxD,OAAO,EAAEuC;IACX,CAAC,CAAC;EACJ;EAEA,SAASR,aAAa,CAACM,KAAK,EAAE;IAC5B,IAAMoB,cAAc,GAAGhG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAAC,4CAExB2E,KAAK;MAAA;IAAA;MAAxB,uDAA0B;QAAA,IAAfE,IAAI;QACb,IAAImB,YAAY;;QAEhB;QACA,IAAMC,UAAU,GACd;QACA,CAACD,YAAY,GAAGnB,IAAI,CAACvB,MAAM,MAAM,IAAI,IAAI0C,YAAY,KAAK,KAAK,CAAC,GAC5DA,YAAY,GACZ,EAAE;QAAC,4CAEWC,UAAU;UAAA;QAAA;UAA9B,uDAAgC;YAAA,IAArB1C,KAAK;YACd,IAAI2C,kBAAkB;YAEtBH,cAAc,CAACxC,KAAK,CAAC7C,IAAI,CAACC,KAAK,CAAC,GAAG;cACjC;cACA;cACA;cACA8B,IAAI,EAAE6C,cAAc,CAAC/B,KAAK,CAACd,IAAI,CAAC;cAChCV,WAAW,EACT,CAACmE,kBAAkB,GAAG3C,KAAK,CAACxB,WAAW,MAAM,IAAI,IACjDmE,kBAAkB,KAAK,KAAK,CAAC,GACzB,KAAK,CAAC,GACNA,kBAAkB,CAACvF,KAAK;cAC9BkC,IAAI,EAAEgD,gBAAgB,CAACtC,KAAK,CAACuC,SAAS,CAAC;cACvCK,iBAAiB,EAAEC,oBAAoB,CAAC7C,KAAK,CAAC;cAC9CjB,OAAO,EAAEiB;YACX,CAAC;UACH;QAAC;UAAA;QAAA;UAAA;QAAA;MACH;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAOwC,cAAc;EACvB;EAEA,SAASF,gBAAgB,CAAChD,IAAI,EAAE;IAC9B;IACA,IAAMwD,SAAS,GACb;IACAxD,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAGA,IAAI,GAAG,EAAE;IAC9C,IAAMyD,YAAY,GAAGvG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAAC,4CAEvBqG,SAAS;MAAA;IAAA;MAA3B,uDAA6B;QAAA,IAAlB3B,GAAG;QACZ,IAAI6B,gBAAgB;;QAEpB;QACA;QACA;QACA,IAAM9D,IAAI,GAAG6C,cAAc,CAACZ,GAAG,CAACjC,IAAI,CAAC;QACrC6D,YAAY,CAAC5B,GAAG,CAAChE,IAAI,CAACC,KAAK,CAAC,GAAG;UAC7B8B,IAAI,EAAJA,IAAI;UACJV,WAAW,EACT,CAACwE,gBAAgB,GAAG7B,GAAG,CAAC3C,WAAW,MAAM,IAAI,IAC7CwE,gBAAgB,KAAK,KAAK,CAAC,GACvB,KAAK,CAAC,GACNA,gBAAgB,CAAC5F,KAAK;UAC5B6F,YAAY,EAAE5H,YAAY,CAAC8F,GAAG,CAAC8B,YAAY,EAAE/D,IAAI,CAAC;UAClD0D,iBAAiB,EAAEC,oBAAoB,CAAC1B,GAAG,CAAC;UAC5CpC,OAAO,EAAEoC;QACX,CAAC;MACH;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAO4B,YAAY;EACrB;EAEA,SAAS9C,kBAAkB,CAACmB,KAAK,EAAE;IACjC,IAAM8B,aAAa,GAAG1G,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAAC,4CAEvB2E,KAAK;MAAA;IAAA;MAAxB,uDAA0B;QAAA,IAAfE,IAAI;QACb,IAAI6B,aAAa;;QAEjB;QACA,IAAMC,WAAW,GACf;QACA,CAACD,aAAa,GAAG7B,IAAI,CAACvB,MAAM,MAAM,IAAI,IAAIoD,aAAa,KAAK,KAAK,CAAC,GAC9DA,aAAa,GACb,EAAE;QAAC,6CAEWC,WAAW;UAAA;QAAA;UAA/B,0DAAiC;YAAA,IAAtBpD,KAAK;YACd,IAAIqD,mBAAmB;;YAEvB;YACA;YACA;YACA,IAAMnE,IAAI,GAAG6C,cAAc,CAAC/B,KAAK,CAACd,IAAI,CAAC;YACvCgE,aAAa,CAAClD,KAAK,CAAC7C,IAAI,CAACC,KAAK,CAAC,GAAG;cAChC8B,IAAI,EAAJA,IAAI;cACJV,WAAW,EACT,CAAC6E,mBAAmB,GAAGrD,KAAK,CAACxB,WAAW,MAAM,IAAI,IAClD6E,mBAAmB,KAAK,KAAK,CAAC,GAC1B,KAAK,CAAC,GACNA,mBAAmB,CAACjG,KAAK;cAC/B6F,YAAY,EAAE5H,YAAY,CAAC2E,KAAK,CAACiD,YAAY,EAAE/D,IAAI,CAAC;cACpD0D,iBAAiB,EAAEC,oBAAoB,CAAC7C,KAAK,CAAC;cAC9CjB,OAAO,EAAEiB;YACX,CAAC;UACH;QAAC;UAAA;QAAA;UAAA;QAAA;MACH;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAOkD,aAAa;EACtB;EAEA,SAAS/C,iBAAiB,CAACiB,KAAK,EAAE;IAChC,IAAMkC,YAAY,GAAG9G,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IAAC,6CAEtB2E,KAAK;MAAA;IAAA;MAAxB,0DAA0B;QAAA,IAAfE,IAAI;QACb,IAAIiC,YAAY;;QAEhB;QACA,IAAMC,WAAW,GACf;QACA,CAACD,YAAY,GAAGjC,IAAI,CAAC7C,MAAM,MAAM,IAAI,IAAI8E,YAAY,KAAK,KAAK,CAAC,GAC5DA,YAAY,GACZ,EAAE;QAAC,6CAEWC,WAAW;UAAA;QAAA;UAA/B,0DAAiC;YAAA,IAAtBpG,KAAK;YACd,IAAIqG,kBAAkB;YAEtBH,YAAY,CAAClG,KAAK,CAACD,IAAI,CAACC,KAAK,CAAC,GAAG;cAC/BoB,WAAW,EACT,CAACiF,kBAAkB,GAAGrG,KAAK,CAACoB,WAAW,MAAM,IAAI,IACjDiF,kBAAkB,KAAK,KAAK,CAAC,GACzB,KAAK,CAAC,GACNA,kBAAkB,CAACrG,KAAK;cAC9BwF,iBAAiB,EAAEC,oBAAoB,CAACzF,KAAK,CAAC;cAC9C2B,OAAO,EAAE3B;YACX,CAAC;UACH;QAAC;UAAA;QAAA;UAAA;QAAA;MACH;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAOkG,YAAY;EACrB;EAEA,SAAS1C,eAAe,CAACQ,KAAK,EAAE;IAC9B;IACA;IACA;IACA;IACA,OAAOA,KAAK,CAACsC,OAAO;IAClB;IACA,UAACpC,IAAI,EAAK;MACR,IAAIqC,oBAAoB,EAAEC,gBAAgB;MAE1C,OACE;QACA,CAACD,oBAAoB,GACnB,CAACC,gBAAgB,GAAGtC,IAAI,CAACZ,UAAU,MAAM,IAAI,IAC7CkD,gBAAgB,KAAK,KAAK,CAAC,GACvB,KAAK,CAAC,GACNA,gBAAgB,CAACjF,GAAG,CAACgD,YAAY,CAAC,MAAM,IAAI,IAChDgC,oBAAoB,KAAK,KAAK,CAAC,GAC7BA,oBAAoB,GACpB;MAAE;IAEV,CAAC,CACF;EACH;EAEA,SAASzC,eAAe,CAACE,KAAK,EAAE;IAC9B;IACA;IACA;IACA;IACA,OAAOA,KAAK,CAACsC,OAAO;IAClB;IACA,UAACpC,IAAI,EAAK;MACR,IAAIuC,eAAe,EAAEC,WAAW;MAEhC,OACE;QACA,CAACD,eAAe,GACd,CAACC,WAAW,GAAGxC,IAAI,CAAC3D,KAAK,MAAM,IAAI,IAAImG,WAAW,KAAK,KAAK,CAAC,GACzD,KAAK,CAAC,GACNA,WAAW,CAACnF,GAAG,CAACgD,YAAY,CAAC,MAAM,IAAI,IAC3CkC,eAAe,KAAK,KAAK,CAAC,GACxBA,eAAe,GACf;MAAE;IAEV,CAAC,CACF;EACH;EAEA,SAAS5F,SAAS,CAACc,OAAO,EAAE;IAC1B,IAAIgF,qBAAqB;IAEzB,IAAM5G,IAAI,GAAG4B,OAAO,CAAC5B,IAAI,CAACC,KAAK;IAC/B,IAAM4B,iBAAiB,GACrB,CAAC+E,qBAAqB,GAAGxH,iBAAiB,CAACY,IAAI,CAAC,MAAM,IAAI,IAC1D4G,qBAAqB,KAAK,KAAK,CAAC,GAC5BA,qBAAqB,GACrB,EAAE;IAER,QAAQhF,OAAO,CAACrD,IAAI;MAClB,KAAKnC,IAAI,CAACyK,sBAAsB;QAAE;UAChC,IAAIC,oBAAoB;UAExB,IAAMC,QAAQ,IAAInF,OAAO,4BAAKC,iBAAiB,EAAC;UAChD,OAAO,IAAIjF,iBAAiB,CAAC;YAC3BoD,IAAI,EAAJA,IAAI;YACJqB,WAAW,EACT,CAACyF,oBAAoB,GAAGlF,OAAO,CAACP,WAAW,MAAM,IAAI,IACrDyF,oBAAoB,KAAK,KAAK,CAAC,GAC3B,KAAK,CAAC,GACNA,oBAAoB,CAAC7G,KAAK;YAChCsD,UAAU,EAAE;cAAA,OAAME,eAAe,CAACsD,QAAQ,CAAC;YAAA;YAC3CnE,MAAM,EAAE;cAAA,OAAMe,aAAa,CAACoD,QAAQ,CAAC;YAAA;YACrCnF,OAAO,EAAPA,OAAO;YACPC,iBAAiB,EAAjBA;UACF,CAAC,CAAC;QACJ;MAEA,KAAKzF,IAAI,CAAC4K,yBAAyB;QAAE;UACnC,IAAIC,qBAAqB;UAEzB,IAAMF,SAAQ,IAAInF,OAAO,4BAAKC,iBAAiB,EAAC;UAChD,OAAO,IAAIpF,oBAAoB,CAAC;YAC9BuD,IAAI,EAAJA,IAAI;YACJqB,WAAW,EACT,CAAC4F,qBAAqB,GAAGrF,OAAO,CAACP,WAAW,MAAM,IAAI,IACtD4F,qBAAqB,KAAK,KAAK,CAAC,GAC5B,KAAK,CAAC,GACNA,qBAAqB,CAAChH,KAAK;YACjCsD,UAAU,EAAE;cAAA,OAAME,eAAe,CAACsD,SAAQ,CAAC;YAAA;YAC3CnE,MAAM,EAAE;cAAA,OAAMe,aAAa,CAACoD,SAAQ,CAAC;YAAA;YACrCnF,OAAO,EAAPA,OAAO;YACPC,iBAAiB,EAAjBA;UACF,CAAC,CAAC;QACJ;MAEA,KAAKzF,IAAI,CAAC8K,oBAAoB;QAAE;UAC9B,IAAIC,qBAAqB;UAEzB,IAAMJ,UAAQ,IAAInF,OAAO,4BAAKC,iBAAiB,EAAC;UAChD,OAAO,IAAItF,eAAe,CAAC;YACzByD,IAAI,EAAJA,IAAI;YACJqB,WAAW,EACT,CAAC8F,qBAAqB,GAAGvF,OAAO,CAACP,WAAW,MAAM,IAAI,IACtD8F,qBAAqB,KAAK,KAAK,CAAC,GAC5B,KAAK,CAAC,GACNA,qBAAqB,CAAClH,KAAK;YACjCqB,MAAM,EAAE0B,iBAAiB,CAAC+D,UAAQ,CAAC;YACnCnF,OAAO,EAAPA,OAAO;YACPC,iBAAiB,EAAjBA;UACF,CAAC,CAAC;QACJ;MAEA,KAAKzF,IAAI,CAACgL,qBAAqB;QAAE;UAC/B,IAAIC,qBAAqB;UAEzB,IAAMN,UAAQ,IAAInF,OAAO,4BAAKC,iBAAiB,EAAC;UAChD,OAAO,IAAI/E,gBAAgB,CAAC;YAC1BkD,IAAI,EAAJA,IAAI;YACJqB,WAAW,EACT,CAACgG,qBAAqB,GAAGzF,OAAO,CAACP,WAAW,MAAM,IAAI,IACtDgG,qBAAqB,KAAK,KAAK,CAAC,GAC5B,KAAK,CAAC,GACNA,qBAAqB,CAACpH,KAAK;YACjCO,KAAK,EAAE;cAAA,OAAMuD,eAAe,CAACgD,UAAQ,CAAC;YAAA;YACtCnF,OAAO,EAAPA,OAAO;YACPC,iBAAiB,EAAjBA;UACF,CAAC,CAAC;QACJ;MAEA,KAAKzF,IAAI,CAACkL,sBAAsB;QAAE;UAChC,IAAIC,qBAAqB;UAEzB,OAAO,IAAI1K,iBAAiB,CAAC;YAC3BmD,IAAI,EAAJA,IAAI;YACJqB,WAAW,EACT,CAACkG,qBAAqB,GAAG3F,OAAO,CAACP,WAAW,MAAM,IAAI,IACtDkG,qBAAqB,KAAK,KAAK,CAAC,GAC5B,KAAK,CAAC,GACNA,qBAAqB,CAACtH,KAAK;YACjCiD,cAAc,EAAEG,iBAAiB,CAACzB,OAAO,CAAC;YAC1CA,OAAO,EAAPA,OAAO;YACPC,iBAAiB,EAAjBA;UACF,CAAC,CAAC;QACJ;MAEA,KAAKzF,IAAI,CAACoL,4BAA4B;QAAE;UACtC,IAAIC,qBAAqB;UAEzB,IAAMV,UAAQ,IAAInF,OAAO,4BAAKC,iBAAiB,EAAC;UAChD,OAAO,IAAIrF,sBAAsB,CAAC;YAChCwD,IAAI,EAAJA,IAAI;YACJqB,WAAW,EACT,CAACoG,qBAAqB,GAAG7F,OAAO,CAACP,WAAW,MAAM,IAAI,IACtDoG,qBAAqB,KAAK,KAAK,CAAC,GAC5B,KAAK,CAAC,GACNA,qBAAqB,CAACxH,KAAK;YACjC2C,MAAM,EAAE;cAAA,OAAME,kBAAkB,CAACiE,UAAQ,CAAC;YAAA;YAC1CnF,OAAO,EAAPA,OAAO;YACPC,iBAAiB,EAAjBA;UACF,CAAC,CAAC;QACJ;IAAC;EAEL;AACF;AACA,IAAMhB,UAAU,GAAG3E,MAAM,8BACnB2B,oBAAoB,sBAAKH,kBAAkB,IAC/C,UAACqE,IAAI;EAAA,OAAKA,IAAI,CAAC/B,IAAI;AAAA,EACpB;AACD;AACA;AACA;AACA;;AAEA,SAAS0F,oBAAoB,CAACvB,IAAI,EAAE;EAClC,IAAMuD,UAAU,GAAGzJ,kBAAkB,CAACV,0BAA0B,EAAE4G,IAAI,CAAC,CAAC,CAAC;;EAEzE,OAAOuD,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GAC/C,KAAK,CAAC,GACNA,UAAU,CAACC,MAAM;AACvB;AACA;AACA;AACA;;AAEA,SAAStE,iBAAiB,CAACc,IAAI,EAAE;EAC/B,IAAMyD,WAAW,GAAG3J,kBAAkB,CAACR,2BAA2B,EAAE0G,IAAI,CAAC,CAAC,CAAC;;EAE3E,OAAOyD,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GACjD,KAAK,CAAC,GACNA,WAAW,CAACC,GAAG;AACrB"},"metadata":{},"sourceType":"module"}