{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nexport function setContext(setter) {\n  return new ApolloLink(function (operation, forward) {\n    var request = __rest(operation, []);\n    return new Observable(function (observer) {\n      var handle;\n      var closed = false;\n      Promise.resolve(request).then(function (req) {\n        return setter(req, operation.getContext());\n      }).then(operation.setContext).then(function () {\n        if (closed) return;\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer)\n        });\n      }).catch(observer.error.bind(observer));\n      return function () {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAA6C,kBAAU;AAC1E,SAASC,UAAU,QAAgC,0BAAkB;AAOrE,OAAM,SAAUC,UAAU,CAACC,MAAqB;EAC9C,OAAO,IAAIH,UAAU,CAAC,UAACI,SAAoB,EAAEC,OAAiB;IAC5D,IAAWC,OAAO,UAAKF,SAAS,EAA1B,EAAc,CAAY;IAEhC,OAAO,IAAIH,UAAU,CAAC,kBAAQ;MAC5B,IAAIM,MAA8B;MAClC,IAAIC,MAAM,GAAG,KAAK;MAClBC,OAAO,CAACC,OAAO,CAACJ,OAAO,CAAC,CACrBK,IAAI,CAAC,aAAG;QAAI,aAAM,CAACC,GAAG,EAAER,SAAS,CAACS,UAAU,EAAE,CAAC;MAAnC,CAAmC,CAAC,CAChDF,IAAI,CAACP,SAAS,CAACF,UAAU,CAAC,CAC1BS,IAAI,CAAC;QAEJ,IAAIH,MAAM,EAAE;QACZD,MAAM,GAAGF,OAAO,CAACD,SAAS,CAAC,CAACU,SAAS,CAAC;UACpCC,IAAI,EAAEC,QAAQ,CAACD,IAAI,CAACE,IAAI,CAACD,QAAQ,CAAC;UAClCE,KAAK,EAAEF,QAAQ,CAACE,KAAK,CAACD,IAAI,CAACD,QAAQ,CAAC;UACpCG,QAAQ,EAAEH,QAAQ,CAACG,QAAQ,CAACF,IAAI,CAACD,QAAQ;SAC1C,CAAC;MACJ,CAAC,CAAC,CACDI,KAAK,CAACJ,QAAQ,CAACE,KAAK,CAACD,IAAI,CAACD,QAAQ,CAAC,CAAC;MAEvC,OAAO;QACLR,MAAM,GAAG,IAAI;QACb,IAAID,MAAM,EAAEA,MAAM,CAACc,WAAW,EAAE;MAClC,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ","names":["ApolloLink","Observable","setContext","setter","operation","forward","request","handle","closed","Promise","resolve","then","req","getContext","subscribe","next","observer","bind","error","complete","catch","unsubscribe"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/@apollo/src/link/context/index.ts"],"sourcesContent":["import { ApolloLink, Operation, GraphQLRequest, NextLink } from '../core';\nimport { Observable, ObservableSubscription } from '../../utilities';\n\nexport type ContextSetter = (\n  operation: GraphQLRequest,\n  prevContext: any,\n) => Promise<any> | any;\n\nexport function setContext(setter: ContextSetter): ApolloLink {\n  return new ApolloLink((operation: Operation, forward: NextLink) => {\n    const { ...request } = operation;\n\n    return new Observable(observer => {\n      let handle: ObservableSubscription;\n      let closed = false;\n      Promise.resolve(request)\n        .then(req => setter(req, operation.getContext()))\n        .then(operation.setContext)\n        .then(() => {\n          // if the observer is already closed, no need to subscribe.\n          if (closed) return;\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer),\n          });\n        })\n        .catch(observer.error.bind(observer));\n\n      return () => {\n        closed = true;\n        if (handle) handle.unsubscribe();\n      };\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}