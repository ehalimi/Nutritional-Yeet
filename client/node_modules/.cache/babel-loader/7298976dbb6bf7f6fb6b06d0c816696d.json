{"ast":null,"code":"import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            var fieldName = node.name.value;\n            var typeStr = inspect(type);\n            context.reportError(new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since type \\\"\").concat(typeStr, \"\\\" has no subfields.\"), {\n              nodes: selectionSet\n            }));\n          }\n        } else if (!selectionSet) {\n          var _fieldName = node.name.value;\n          var _typeStr = inspect(type);\n          context.reportError(new GraphQLError(\"Field \\\"\".concat(_fieldName, \"\\\" of type \\\"\").concat(_typeStr, \"\\\" must have a selection of subfields. Did you mean \\\"\").concat(_fieldName, \" { ... }\\\"?\"), {\n            nodes: node\n          }));\n        }\n      }\n    }\n  };\n}","map":{"version":3,"names":["inspect","GraphQLError","getNamedType","isLeafType","ScalarLeafsRule","context","Field","node","type","getType","selectionSet","fieldName","name","value","typeStr","reportError","nodes"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"],"sourcesContent":["import { inspect } from '../../jsutils/inspect.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { getNamedType, isLeafType } from '../../type/definition.mjs';\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(\n              new GraphQLError(\n                `Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`,\n                {\n                  nodes: selectionSet,\n                },\n              ),\n            );\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(\n            new GraphQLError(\n              `Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`,\n              {\n                nodes: node,\n              },\n            ),\n          );\n        }\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,YAAY,EAAEC,UAAU,QAAQ,2BAA2B;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,eAAe,CAACC,OAAO,EAAE;EACvC,OAAO;IACLC,KAAK,iBAACC,IAAI,EAAE;MACV,IAAMC,IAAI,GAAGH,OAAO,CAACI,OAAO,EAAE;MAC9B,IAAMC,YAAY,GAAGH,IAAI,CAACG,YAAY;MAEtC,IAAIF,IAAI,EAAE;QACR,IAAIL,UAAU,CAACD,YAAY,CAACM,IAAI,CAAC,CAAC,EAAE;UAClC,IAAIE,YAAY,EAAE;YAChB,IAAMC,SAAS,GAAGJ,IAAI,CAACK,IAAI,CAACC,KAAK;YACjC,IAAMC,OAAO,GAAGd,OAAO,CAACQ,IAAI,CAAC;YAC7BH,OAAO,CAACU,WAAW,CACjB,IAAId,YAAY,mBACJU,SAAS,uDAA2CG,OAAO,2BACrE;cACEE,KAAK,EAAEN;YACT,CAAC,CACF,CACF;UACH;QACF,CAAC,MAAM,IAAI,CAACA,YAAY,EAAE;UACxB,IAAMC,UAAS,GAAGJ,IAAI,CAACK,IAAI,CAACC,KAAK;UACjC,IAAMC,QAAO,GAAGd,OAAO,CAACQ,IAAI,CAAC;UAC7BH,OAAO,CAACU,WAAW,CACjB,IAAId,YAAY,mBACJU,UAAS,0BAAcG,QAAO,mEAAuDH,UAAS,kBACxG;YACEK,KAAK,EAAET;UACT,CAAC,CACF,CACF;QACH;MACF;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}