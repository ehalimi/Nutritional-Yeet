{"ast":null,"code":"import PropTypes from 'prop-types';\nimport React, { useContext } from 'react';\nimport DropdownContext from './DropdownContext';\nvar noop = function noop() {};\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\n\nexport function useDropdownToggle() {\n  var _ref = useContext(DropdownContext) || {},\n    _ref$show = _ref.show,\n    show = _ref$show === void 0 ? false : _ref$show,\n    _ref$toggle = _ref.toggle,\n    toggle = _ref$toggle === void 0 ? noop : _ref$toggle,\n    setToggle = _ref.setToggle;\n  return [{\n    ref: setToggle || noop,\n    'aria-haspopup': true,\n    'aria-expanded': !!show\n  }, {\n    show: show,\n    toggle: toggle\n  }];\n}\nvar propTypes = {\n  /**\n   * A render prop that returns a Toggle element. The `props`\n   * argument should spread through to **a component that can accept a ref**. Use\n   * the `onToggle` argument to toggle the menu open or closed\n   *\n   * @type {Function ({\n   *   show: boolean,\n   *   toggle: (show: boolean) => void,\n   *   props: {\n   *     ref: (?HTMLElement) => void,\n   *     aria-haspopup: true\n   *     aria-expanded: boolean\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired\n};\n\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\nfunction DropdownToggle(_ref2) {\n  var children = _ref2.children;\n  var _useDropdownToggle = useDropdownToggle(),\n    props = _useDropdownToggle[0],\n    _useDropdownToggle$ = _useDropdownToggle[1],\n    show = _useDropdownToggle$.show,\n    toggle = _useDropdownToggle$.toggle;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children({\n    show: show,\n    toggle: toggle,\n    props: props\n  }));\n}\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\nDropdownToggle.propTypes = propTypes;\n/** @component */\n\nexport default DropdownToggle;","map":{"version":3,"names":["PropTypes","React","useContext","DropdownContext","noop","useDropdownToggle","_ref","_ref$show","show","_ref$toggle","toggle","setToggle","ref","propTypes","children","func","isRequired","DropdownToggle","_ref2","_useDropdownToggle","props","_useDropdownToggle$","createElement","Fragment","displayName"],"sources":["/Users/emahalimi/projects/Nutritional-Yeet/client/node_modules/react-overlays/esm/DropdownToggle.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useContext } from 'react';\nimport DropdownContext from './DropdownContext';\n\nvar noop = function noop() {};\n/**\n * Wires up Dropdown toggle functionality, returning a set a props to attach\n * to the element that functions as the dropdown toggle (generally a button).\n *\n * @memberOf Dropdown\n */\n\n\nexport function useDropdownToggle() {\n  var _ref = useContext(DropdownContext) || {},\n      _ref$show = _ref.show,\n      show = _ref$show === void 0 ? false : _ref$show,\n      _ref$toggle = _ref.toggle,\n      toggle = _ref$toggle === void 0 ? noop : _ref$toggle,\n      setToggle = _ref.setToggle;\n\n  return [{\n    ref: setToggle || noop,\n    'aria-haspopup': true,\n    'aria-expanded': !!show\n  }, {\n    show: show,\n    toggle: toggle\n  }];\n}\nvar propTypes = {\n  /**\n   * A render prop that returns a Toggle element. The `props`\n   * argument should spread through to **a component that can accept a ref**. Use\n   * the `onToggle` argument to toggle the menu open or closed\n   *\n   * @type {Function ({\n   *   show: boolean,\n   *   toggle: (show: boolean) => void,\n   *   props: {\n   *     ref: (?HTMLElement) => void,\n   *     aria-haspopup: true\n   *     aria-expanded: boolean\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired\n};\n\n/**\n * Also exported as `<Dropdown.Toggle>` from `Dropdown`.\n *\n * @displayName DropdownToggle\n * @memberOf Dropdown\n */\nfunction DropdownToggle(_ref2) {\n  var children = _ref2.children;\n\n  var _useDropdownToggle = useDropdownToggle(),\n      props = _useDropdownToggle[0],\n      _useDropdownToggle$ = _useDropdownToggle[1],\n      show = _useDropdownToggle$.show,\n      toggle = _useDropdownToggle$.toggle;\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children({\n    show: show,\n    toggle: toggle,\n    props: props\n  }));\n}\n\nDropdownToggle.displayName = 'ReactOverlaysDropdownToggle';\nDropdownToggle.propTypes = propTypes;\n/** @component */\n\nexport default DropdownToggle;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,IAAIC,IAAI,GAAG,SAASA,IAAI,GAAG,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASC,iBAAiB,GAAG;EAClC,IAAIC,IAAI,GAAGJ,UAAU,CAACC,eAAe,CAAC,IAAI,CAAC,CAAC;IACxCI,SAAS,GAAGD,IAAI,CAACE,IAAI;IACrBA,IAAI,GAAGD,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,SAAS;IAC/CE,WAAW,GAAGH,IAAI,CAACI,MAAM;IACzBA,MAAM,GAAGD,WAAW,KAAK,KAAK,CAAC,GAAGL,IAAI,GAAGK,WAAW;IACpDE,SAAS,GAAGL,IAAI,CAACK,SAAS;EAE9B,OAAO,CAAC;IACNC,GAAG,EAAED,SAAS,IAAIP,IAAI;IACtB,eAAe,EAAE,IAAI;IACrB,eAAe,EAAE,CAAC,CAACI;EACrB,CAAC,EAAE;IACDA,IAAI,EAAEA,IAAI;IACVE,MAAM,EAAEA;EACV,CAAC,CAAC;AACJ;AACA,IAAIG,SAAS,GAAG;EACd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAEd,SAAS,CAACe,IAAI,CAACC;AAC3B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAc,CAACC,KAAK,EAAE;EAC7B,IAAIJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ;EAE7B,IAAIK,kBAAkB,GAAGd,iBAAiB,EAAE;IACxCe,KAAK,GAAGD,kBAAkB,CAAC,CAAC,CAAC;IAC7BE,mBAAmB,GAAGF,kBAAkB,CAAC,CAAC,CAAC;IAC3CX,IAAI,GAAGa,mBAAmB,CAACb,IAAI;IAC/BE,MAAM,GAAGW,mBAAmB,CAACX,MAAM;EAEvC,OAAO,aAAaT,KAAK,CAACqB,aAAa,CAACrB,KAAK,CAACsB,QAAQ,EAAE,IAAI,EAAET,QAAQ,CAAC;IACrEN,IAAI,EAAEA,IAAI;IACVE,MAAM,EAAEA,MAAM;IACdU,KAAK,EAAEA;EACT,CAAC,CAAC,CAAC;AACL;AAEAH,cAAc,CAACO,WAAW,GAAG,6BAA6B;AAC1DP,cAAc,CAACJ,SAAS,GAAGA,SAAS;AACpC;;AAEA,eAAeI,cAAc"},"metadata":{},"sourceType":"module"}