{"ast":null,"code":"import matches from 'dom-helpers/matches';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nvar propTypes = {\n  /**\n   * A render prop that returns the root dropdown element. The `props`\n   * argument should spread through to an element containing _both_ the\n   * menu and toggle in order to handle keyboard events for focus management.\n   *\n   * @type {Function ({\n   *   props: {\n   *     onKeyDown: (SyntheticEvent) => void,\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired,\n  /**\n   * Determines the direction and location of the Menu in relation to it's Toggle.\n   */\n  drop: PropTypes.oneOf(['up', 'left', 'right', 'down']),\n  /**\n   * Controls the focus behavior for when the Dropdown is opened. Set to\n   * `true` to always focus the first menu item, `keyboard` to focus only when\n   * navigating via the keyboard, or `false` to disable completely\n   *\n   * The Default behavior is `false` **unless** the Menu has a `role=\"menu\"`\n   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).\n   */\n  focusFirstItemOnShow: PropTypes.oneOf([false, true, 'keyboard']),\n  /**\n   * A css slector string that will return __focusable__ menu items.\n   * Selectors should be relative to the menu component:\n   * e.g. ` > li:not('.disabled')`\n   */\n  itemSelector: PropTypes.string,\n  /**\n   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.\n   */\n  alignEnd: PropTypes.bool,\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  show: PropTypes.bool,\n  /**\n   * Sets the initial show position of the Dropdown.\n   */\n  defaultShow: PropTypes.bool,\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.\n   *\n   * ```ts static\n   * function(\n   *   isOpen: boolean,\n   *   event: SyntheticEvent,\n   * ): void\n   * ```\n   *\n   * @controllable show\n   */\n  onToggle: PropTypes.func\n};\n\n/**\n * @displayName Dropdown\n */\nfunction Dropdown(_ref) {\n  var drop = _ref.drop,\n    alignEnd = _ref.alignEnd,\n    defaultShow = _ref.defaultShow,\n    rawShow = _ref.show,\n    rawOnToggle = _ref.onToggle,\n    _ref$itemSelector = _ref.itemSelector,\n    itemSelector = _ref$itemSelector === void 0 ? '* > *' : _ref$itemSelector,\n    focusFirstItemOnShow = _ref.focusFirstItemOnShow,\n    children = _ref.children;\n  var forceUpdate = useForceUpdate();\n  var _useUncontrolledProp = useUncontrolledProp(rawShow, defaultShow, rawOnToggle),\n    show = _useUncontrolledProp[0],\n    onToggle = _useUncontrolledProp[1];\n  var _useCallbackRef = useCallbackRef(),\n    toggleElement = _useCallbackRef[0],\n    setToggle = _useCallbackRef[1]; // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n  var menuRef = useRef(null);\n  var menuElement = menuRef.current;\n  var setMenu = useCallback(function (ref) {\n    menuRef.current = ref; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  var lastShow = usePrevious(show);\n  var lastSourceEvent = useRef(null);\n  var focusInDropdown = useRef(false);\n  var toggle = useCallback(function (event) {\n    onToggle(!show, event);\n  }, [onToggle, show]);\n  var context = useMemo(function () {\n    return {\n      toggle: toggle,\n      drop: drop,\n      show: show,\n      alignEnd: alignEnd,\n      menuElement: menuElement,\n      toggleElement: toggleElement,\n      setMenu: setMenu,\n      setToggle: setToggle\n    };\n  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n  var focusToggle = useEventCallback(function () {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  var maybeFocusFirst = useEventCallback(function () {\n    var type = lastSourceEvent.current;\n    var focusType = focusFirstItemOnShow;\n    if (focusType == null) {\n      focusType = menuRef.current && matches(menuRef.current, '[role=menu]') ? 'keyboard' : false;\n    }\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n    var first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(function () {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(function () {\n    lastSourceEvent.current = null;\n  });\n  var getNextFocusedChild = function getNextFocusedChild(current, offset) {\n    if (!menuRef.current) return null;\n    var items = qsa(menuRef.current, itemSelector);\n    var index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n  var handleKeyDown = function handleKeyDown(event) {\n    var key = event.key;\n    var target = event.target; // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    var isInput = /input|textarea/i.test(target.tagName);\n    if (isInput && (key === ' ' || key !== 'Escape' && menuRef.current && menuRef.current.contains(target))) {\n      return;\n    }\n    lastSourceEvent.current = event.type;\n    switch (key) {\n      case 'ArrowUp':\n        {\n          var next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n      case 'ArrowDown':\n        event.preventDefault();\n        if (!show) {\n          toggle(event);\n        } else {\n          var _next = getNextFocusedChild(target, 1);\n          if (_next && _next.focus) _next.focus();\n        }\n        return;\n      case 'Escape':\n      case 'Tab':\n        onToggle(false, event);\n        break;\n      default:\n    }\n  };\n  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n    value: context\n  }, children({\n    props: {\n      onKeyDown: handleKeyDown\n    }\n  }));\n}\nDropdown.displayName = 'ReactOverlaysDropdown';\nDropdown.propTypes = propTypes;\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nexport default Dropdown;","map":{"version":3,"names":["matches","qsa","React","useCallback","useRef","useEffect","useMemo","PropTypes","useUncontrolledProp","usePrevious","useCallbackRef","useForceUpdate","useEventCallback","DropdownContext","DropdownMenu","DropdownToggle","propTypes","children","func","isRequired","drop","oneOf","focusFirstItemOnShow","itemSelector","string","alignEnd","bool","show","defaultShow","onToggle","Dropdown","_ref","rawShow","rawOnToggle","_ref$itemSelector","forceUpdate","_useUncontrolledProp","_useCallbackRef","toggleElement","setToggle","menuRef","menuElement","current","setMenu","ref","lastShow","lastSourceEvent","focusInDropdown","toggle","event","context","contains","document","activeElement","focusToggle","focus","maybeFocusFirst","type","focusType","test","first","getNextFocusedChild","offset","items","index","indexOf","Math","max","min","length","handleKeyDown","key","target","isInput","tagName","next","preventDefault","_next","createElement","Provider","value","props","onKeyDown","displayName","Menu","Toggle"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/react-overlays/esm/Dropdown.js"],"sourcesContent":["import matches from 'dom-helpers/matches';\nimport qsa from 'dom-helpers/querySelectorAll';\nimport React, { useCallback, useRef, useEffect, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { useUncontrolledProp } from 'uncontrollable';\nimport usePrevious from '@restart/hooks/usePrevious';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useForceUpdate from '@restart/hooks/useForceUpdate';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport DropdownContext from './DropdownContext';\nimport DropdownMenu from './DropdownMenu';\nimport DropdownToggle from './DropdownToggle';\nvar propTypes = {\n  /**\n   * A render prop that returns the root dropdown element. The `props`\n   * argument should spread through to an element containing _both_ the\n   * menu and toggle in order to handle keyboard events for focus management.\n   *\n   * @type {Function ({\n   *   props: {\n   *     onKeyDown: (SyntheticEvent) => void,\n   *   },\n   * }) => React.Element}\n   */\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Determines the direction and location of the Menu in relation to it's Toggle.\n   */\n  drop: PropTypes.oneOf(['up', 'left', 'right', 'down']),\n\n  /**\n   * Controls the focus behavior for when the Dropdown is opened. Set to\n   * `true` to always focus the first menu item, `keyboard` to focus only when\n   * navigating via the keyboard, or `false` to disable completely\n   *\n   * The Default behavior is `false` **unless** the Menu has a `role=\"menu\"`\n   * where it will default to `keyboard` to match the recommended [ARIA Authoring practices](https://www.w3.org/TR/wai-aria-practices-1.1/#menubutton).\n   */\n  focusFirstItemOnShow: PropTypes.oneOf([false, true, 'keyboard']),\n\n  /**\n   * A css slector string that will return __focusable__ menu items.\n   * Selectors should be relative to the menu component:\n   * e.g. ` > li:not('.disabled')`\n   */\n  itemSelector: PropTypes.string,\n\n  /**\n   * Align the menu to the 'end' side of the placement side of the Dropdown toggle. The default placement is `top-start` or `bottom-start`.\n   */\n  alignEnd: PropTypes.bool,\n\n  /**\n   * Whether or not the Dropdown is visible.\n   *\n   * @controllable onToggle\n   */\n  show: PropTypes.bool,\n\n  /**\n   * Sets the initial show position of the Dropdown.\n   */\n  defaultShow: PropTypes.bool,\n\n  /**\n   * A callback fired when the Dropdown wishes to change visibility. Called with the requested\n   * `show` value, the DOM event, and the source that fired it: `'click'`,`'keydown'`,`'rootClose'`, or `'select'`.\n   *\n   * ```ts static\n   * function(\n   *   isOpen: boolean,\n   *   event: SyntheticEvent,\n   * ): void\n   * ```\n   *\n   * @controllable show\n   */\n  onToggle: PropTypes.func\n};\n\n/**\n * @displayName Dropdown\n */\nfunction Dropdown(_ref) {\n  var drop = _ref.drop,\n      alignEnd = _ref.alignEnd,\n      defaultShow = _ref.defaultShow,\n      rawShow = _ref.show,\n      rawOnToggle = _ref.onToggle,\n      _ref$itemSelector = _ref.itemSelector,\n      itemSelector = _ref$itemSelector === void 0 ? '* > *' : _ref$itemSelector,\n      focusFirstItemOnShow = _ref.focusFirstItemOnShow,\n      children = _ref.children;\n  var forceUpdate = useForceUpdate();\n\n  var _useUncontrolledProp = useUncontrolledProp(rawShow, defaultShow, rawOnToggle),\n      show = _useUncontrolledProp[0],\n      onToggle = _useUncontrolledProp[1];\n\n  var _useCallbackRef = useCallbackRef(),\n      toggleElement = _useCallbackRef[0],\n      setToggle = _useCallbackRef[1]; // We use normal refs instead of useCallbackRef in order to populate the\n  // the value as quickly as possible, otherwise the effect to focus the element\n  // may run before the state value is set\n\n\n  var menuRef = useRef(null);\n  var menuElement = menuRef.current;\n  var setMenu = useCallback(function (ref) {\n    menuRef.current = ref; // ensure that a menu set triggers an update for consumers\n\n    forceUpdate();\n  }, [forceUpdate]);\n  var lastShow = usePrevious(show);\n  var lastSourceEvent = useRef(null);\n  var focusInDropdown = useRef(false);\n  var toggle = useCallback(function (event) {\n    onToggle(!show, event);\n  }, [onToggle, show]);\n  var context = useMemo(function () {\n    return {\n      toggle: toggle,\n      drop: drop,\n      show: show,\n      alignEnd: alignEnd,\n      menuElement: menuElement,\n      toggleElement: toggleElement,\n      setMenu: setMenu,\n      setToggle: setToggle\n    };\n  }, [toggle, drop, show, alignEnd, menuElement, toggleElement, setMenu, setToggle]);\n\n  if (menuElement && lastShow && !show) {\n    focusInDropdown.current = menuElement.contains(document.activeElement);\n  }\n\n  var focusToggle = useEventCallback(function () {\n    if (toggleElement && toggleElement.focus) {\n      toggleElement.focus();\n    }\n  });\n  var maybeFocusFirst = useEventCallback(function () {\n    var type = lastSourceEvent.current;\n    var focusType = focusFirstItemOnShow;\n\n    if (focusType == null) {\n      focusType = menuRef.current && matches(menuRef.current, '[role=menu]') ? 'keyboard' : false;\n    }\n\n    if (focusType === false || focusType === 'keyboard' && !/^key.+$/.test(type)) {\n      return;\n    }\n\n    var first = qsa(menuRef.current, itemSelector)[0];\n    if (first && first.focus) first.focus();\n  });\n  useEffect(function () {\n    if (show) maybeFocusFirst();else if (focusInDropdown.current) {\n      focusInDropdown.current = false;\n      focusToggle();\n    } // only `show` should be changing\n  }, [show, focusInDropdown, focusToggle, maybeFocusFirst]);\n  useEffect(function () {\n    lastSourceEvent.current = null;\n  });\n\n  var getNextFocusedChild = function getNextFocusedChild(current, offset) {\n    if (!menuRef.current) return null;\n    var items = qsa(menuRef.current, itemSelector);\n    var index = items.indexOf(current) + offset;\n    index = Math.max(0, Math.min(index, items.length));\n    return items[index];\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    var key = event.key;\n    var target = event.target; // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400\n    // in inscrutability\n\n    var isInput = /input|textarea/i.test(target.tagName);\n\n    if (isInput && (key === ' ' || key !== 'Escape' && menuRef.current && menuRef.current.contains(target))) {\n      return;\n    }\n\n    lastSourceEvent.current = event.type;\n\n    switch (key) {\n      case 'ArrowUp':\n        {\n          var next = getNextFocusedChild(target, -1);\n          if (next && next.focus) next.focus();\n          event.preventDefault();\n          return;\n        }\n\n      case 'ArrowDown':\n        event.preventDefault();\n\n        if (!show) {\n          toggle(event);\n        } else {\n          var _next = getNextFocusedChild(target, 1);\n\n          if (_next && _next.focus) _next.focus();\n        }\n\n        return;\n\n      case 'Escape':\n      case 'Tab':\n        onToggle(false, event);\n        break;\n\n      default:\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(DropdownContext.Provider, {\n    value: context\n  }, children({\n    props: {\n      onKeyDown: handleKeyDown\n    }\n  }));\n}\n\nDropdown.displayName = 'ReactOverlaysDropdown';\nDropdown.propTypes = propTypes;\nDropdown.Menu = DropdownMenu;\nDropdown.Toggle = DropdownToggle;\nexport default Dropdown;"],"mappings":"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"},"metadata":{},"sourceType":"module"}