{"ast":null,"code":"import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment: function InlineFragment(node) {\n      var typeCondition = node.typeCondition;\n      if (typeCondition) {\n        var type = typeFromAST(context.getSchema(), typeCondition);\n        if (type && !isCompositeType(type)) {\n          var typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(\"Fragment cannot condition on non composite type \\\"\".concat(typeStr, \"\\\".\"), {\n            nodes: typeCondition\n          }));\n        }\n      }\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      var type = typeFromAST(context.getSchema(), node.typeCondition);\n      if (type && !isCompositeType(type)) {\n        var typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(\"Fragment \\\"\".concat(node.name.value, \"\\\" cannot condition on non composite type \\\"\").concat(typeStr, \"\\\".\"), {\n          nodes: node.typeCondition\n        }));\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","print","isCompositeType","typeFromAST","FragmentsOnCompositeTypesRule","context","InlineFragment","node","typeCondition","type","getSchema","typeStr","reportError","nodes","FragmentDefinition","name","value"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { print } from '../../language/printer.mjs';\nimport { isCompositeType } from '../../type/definition.mjs';\nimport { typeFromAST } from '../../utilities/typeFromAST.mjs';\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n *\n * See https://spec.graphql.org/draft/#sec-Fragments-On-Composite-Types\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(\n            new GraphQLError(\n              `Fragment cannot condition on non composite type \"${typeStr}\".`,\n              {\n                nodes: typeCondition,\n              },\n            ),\n          );\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(\n          new GraphQLError(\n            `Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`,\n            {\n              nodes: node.typeCondition,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,WAAW,QAAQ,iCAAiC;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,6BAA6B,CAACC,OAAO,EAAE;EACrD,OAAO;IACLC,cAAc,0BAACC,IAAI,EAAE;MACnB,IAAMC,aAAa,GAAGD,IAAI,CAACC,aAAa;MAExC,IAAIA,aAAa,EAAE;QACjB,IAAMC,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAS,EAAE,EAAEF,aAAa,CAAC;QAE5D,IAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAI,CAAC,EAAE;UAClC,IAAME,OAAO,GAAGV,KAAK,CAACO,aAAa,CAAC;UACpCH,OAAO,CAACO,WAAW,CACjB,IAAIZ,YAAY,6DACsCW,OAAO,UAC3D;YACEE,KAAK,EAAEL;UACT,CAAC,CACF,CACF;QACH;MACF;IACF,CAAC;IAEDM,kBAAkB,8BAACP,IAAI,EAAE;MACvB,IAAME,IAAI,GAAGN,WAAW,CAACE,OAAO,CAACK,SAAS,EAAE,EAAEH,IAAI,CAACC,aAAa,CAAC;MAEjE,IAAIC,IAAI,IAAI,CAACP,eAAe,CAACO,IAAI,CAAC,EAAE;QAClC,IAAME,OAAO,GAAGV,KAAK,CAACM,IAAI,CAACC,aAAa,CAAC;QACzCH,OAAO,CAACO,WAAW,CACjB,IAAIZ,YAAY,sBACDO,IAAI,CAACQ,IAAI,CAACC,KAAK,yDAA6CL,OAAO,UAChF;UACEE,KAAK,EAAEN,IAAI,CAACC;QACd,CAAC,CACF,CACF;MACH;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}