{"ast":null,"code":"import _classCallCheck from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { isNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport { getNamedType, getNullableType, isCompositeType, isEnumType, isInputObjectType, isInputType, isInterfaceType, isListType, isObjectType, isOutputType } from '../type/definition.mjs';\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport var TypeInfo = /*#__PURE__*/function (_Symbol$toStringTag) {\n  function TypeInfo(schema,\n  /**\n   * Initial type may be provided in rare cases to facilitate traversals\n   *  beginning somewhere other than documents.\n   */\n  initialType, /** @deprecated will be removed in 17.0.0 */\n  getFieldDefFn) {\n    _classCallCheck(this, TypeInfo);\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn !== null && getFieldDefFn !== void 0 ? getFieldDefFn : getFieldDef;\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n  _createClass(TypeInfo, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'TypeInfo';\n    }\n  }, {\n    key: \"getType\",\n    value: function getType() {\n      if (this._typeStack.length > 0) {\n        return this._typeStack[this._typeStack.length - 1];\n      }\n    }\n  }, {\n    key: \"getParentType\",\n    value: function getParentType() {\n      if (this._parentTypeStack.length > 0) {\n        return this._parentTypeStack[this._parentTypeStack.length - 1];\n      }\n    }\n  }, {\n    key: \"getInputType\",\n    value: function getInputType() {\n      if (this._inputTypeStack.length > 0) {\n        return this._inputTypeStack[this._inputTypeStack.length - 1];\n      }\n    }\n  }, {\n    key: \"getParentInputType\",\n    value: function getParentInputType() {\n      if (this._inputTypeStack.length > 1) {\n        return this._inputTypeStack[this._inputTypeStack.length - 2];\n      }\n    }\n  }, {\n    key: \"getFieldDef\",\n    value: function getFieldDef() {\n      if (this._fieldDefStack.length > 0) {\n        return this._fieldDefStack[this._fieldDefStack.length - 1];\n      }\n    }\n  }, {\n    key: \"getDefaultValue\",\n    value: function getDefaultValue() {\n      if (this._defaultValueStack.length > 0) {\n        return this._defaultValueStack[this._defaultValueStack.length - 1];\n      }\n    }\n  }, {\n    key: \"getDirective\",\n    value: function getDirective() {\n      return this._directive;\n    }\n  }, {\n    key: \"getArgument\",\n    value: function getArgument() {\n      return this._argument;\n    }\n  }, {\n    key: \"getEnumValue\",\n    value: function getEnumValue() {\n      return this._enumValue;\n    }\n  }, {\n    key: \"enter\",\n    value: function enter(node) {\n      var schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n      // any assumptions of a valid schema to ensure runtime types are properly\n      // checked before continuing since TypeInfo is used as part of validation\n      // which occurs before guarantees of schema and document validity.\n\n      switch (node.kind) {\n        case Kind.SELECTION_SET:\n          {\n            var namedType = getNamedType(this.getType());\n            this._parentTypeStack.push(isCompositeType(namedType) ? namedType : undefined);\n            break;\n          }\n        case Kind.FIELD:\n          {\n            var parentType = this.getParentType();\n            var fieldDef;\n            var fieldType;\n            if (parentType) {\n              fieldDef = this._getFieldDef(schema, parentType, node);\n              if (fieldDef) {\n                fieldType = fieldDef.type;\n              }\n            }\n            this._fieldDefStack.push(fieldDef);\n            this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n            break;\n          }\n        case Kind.DIRECTIVE:\n          this._directive = schema.getDirective(node.name.value);\n          break;\n        case Kind.OPERATION_DEFINITION:\n          {\n            var rootType = schema.getRootType(node.operation);\n            this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n            break;\n          }\n        case Kind.INLINE_FRAGMENT:\n        case Kind.FRAGMENT_DEFINITION:\n          {\n            var typeConditionAST = node.typeCondition;\n            var outputType = typeConditionAST ? typeFromAST(schema, typeConditionAST) : getNamedType(this.getType());\n            this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n            break;\n          }\n        case Kind.VARIABLE_DEFINITION:\n          {\n            var inputType = typeFromAST(schema, node.type);\n            this._inputTypeStack.push(isInputType(inputType) ? inputType : undefined);\n            break;\n          }\n        case Kind.ARGUMENT:\n          {\n            var _this$getDirective;\n            var argDef;\n            var argType;\n            var fieldOrDirective = (_this$getDirective = this.getDirective()) !== null && _this$getDirective !== void 0 ? _this$getDirective : this.getFieldDef();\n            if (fieldOrDirective) {\n              argDef = fieldOrDirective.args.find(function (arg) {\n                return arg.name === node.name.value;\n              });\n              if (argDef) {\n                argType = argDef.type;\n              }\n            }\n            this._argument = argDef;\n            this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n            this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n            break;\n          }\n        case Kind.LIST:\n          {\n            var listType = getNullableType(this.getInputType());\n            var itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n            this._defaultValueStack.push(undefined);\n            this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n            break;\n          }\n        case Kind.OBJECT_FIELD:\n          {\n            var objectType = getNamedType(this.getInputType());\n            var inputFieldType;\n            var inputField;\n            if (isInputObjectType(objectType)) {\n              inputField = objectType.getFields()[node.name.value];\n              if (inputField) {\n                inputFieldType = inputField.type;\n              }\n            }\n            this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);\n            this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : undefined);\n            break;\n          }\n        case Kind.ENUM:\n          {\n            var enumType = getNamedType(this.getInputType());\n            var enumValue;\n            if (isEnumType(enumType)) {\n              enumValue = enumType.getValue(node.value);\n            }\n            this._enumValue = enumValue;\n            break;\n          }\n        default: // Ignore other nodes\n      }\n    }\n  }, {\n    key: \"leave\",\n    value: function leave(node) {\n      switch (node.kind) {\n        case Kind.SELECTION_SET:\n          this._parentTypeStack.pop();\n          break;\n        case Kind.FIELD:\n          this._fieldDefStack.pop();\n          this._typeStack.pop();\n          break;\n        case Kind.DIRECTIVE:\n          this._directive = null;\n          break;\n        case Kind.OPERATION_DEFINITION:\n        case Kind.INLINE_FRAGMENT:\n        case Kind.FRAGMENT_DEFINITION:\n          this._typeStack.pop();\n          break;\n        case Kind.VARIABLE_DEFINITION:\n          this._inputTypeStack.pop();\n          break;\n        case Kind.ARGUMENT:\n          this._argument = null;\n          this._defaultValueStack.pop();\n          this._inputTypeStack.pop();\n          break;\n        case Kind.LIST:\n        case Kind.OBJECT_FIELD:\n          this._defaultValueStack.pop();\n          this._inputTypeStack.pop();\n          break;\n        case Kind.ENUM:\n          this._enumValue = null;\n          break;\n        default: // Ignore other nodes\n      }\n    }\n  }]);\n  return TypeInfo;\n}(Symbol.toStringTag);\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  var name = fieldNode.name.value;\n  if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      var node = args[0];\n      typeInfo.enter(node);\n      var fn = getEnterLeaveForKind(visitor, node.kind).enter;\n      if (fn) {\n        var result = fn.apply(visitor, args);\n        if (result !== undefined) {\n          typeInfo.leave(node);\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n        return result;\n      }\n    },\n    leave: function leave() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      var node = args[0];\n      var fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      var result;\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}","map":{"version":3,"names":["isNode","Kind","getEnterLeaveForKind","getNamedType","getNullableType","isCompositeType","isEnumType","isInputObjectType","isInputType","isInterfaceType","isListType","isObjectType","isOutputType","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","typeFromAST","TypeInfo","schema","initialType","getFieldDefFn","_schema","_typeStack","_parentTypeStack","_inputTypeStack","_fieldDefStack","_defaultValueStack","_directive","_argument","_enumValue","_getFieldDef","getFieldDef","push","length","node","kind","SELECTION_SET","namedType","getType","undefined","FIELD","parentType","getParentType","fieldDef","fieldType","type","DIRECTIVE","getDirective","name","value","OPERATION_DEFINITION","rootType","getRootType","operation","INLINE_FRAGMENT","FRAGMENT_DEFINITION","typeConditionAST","typeCondition","outputType","VARIABLE_DEFINITION","inputType","ARGUMENT","_this$getDirective","argDef","argType","fieldOrDirective","args","find","arg","defaultValue","LIST","listType","getInputType","itemType","ofType","OBJECT_FIELD","objectType","inputFieldType","inputField","getFields","ENUM","enumType","enumValue","getValue","pop","Symbol","toStringTag","fieldNode","getQueryType","visitWithTypeInfo","typeInfo","visitor","enter","fn","result","apply","leave"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/utilities/TypeInfo.mjs"],"sourcesContent":["import { isNode } from '../language/ast.mjs';\nimport { Kind } from '../language/kinds.mjs';\nimport { getEnterLeaveForKind } from '../language/visitor.mjs';\nimport {\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isListType,\n  isObjectType,\n  isOutputType,\n} from '../type/definition.mjs';\nimport {\n  SchemaMetaFieldDef,\n  TypeMetaFieldDef,\n  TypeNameMetaFieldDef,\n} from '../type/introspection.mjs';\nimport { typeFromAST } from './typeFromAST.mjs';\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(\n    schema,\n    /**\n     * Initial type may be provided in rare cases to facilitate traversals\n     *  beginning somewhere other than documents.\n     */\n    initialType,\n    /** @deprecated will be removed in 17.0.0 */\n    getFieldDefFn,\n  ) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef =\n      getFieldDefFn !== null && getFieldDefFn !== void 0\n        ? getFieldDefFn\n        : getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'TypeInfo';\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"unknown\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET: {\n        const namedType = getNamedType(this.getType());\n\n        this._parentTypeStack.push(\n          isCompositeType(namedType) ? namedType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.FIELD: {\n        const parentType = this.getParentType();\n        let fieldDef;\n        let fieldType;\n\n        if (parentType) {\n          fieldDef = this._getFieldDef(schema, parentType, node);\n\n          if (fieldDef) {\n            fieldType = fieldDef.type;\n          }\n        }\n\n        this._fieldDefStack.push(fieldDef);\n\n        this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n        break;\n      }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION: {\n        const rootType = schema.getRootType(node.operation);\n\n        this._typeStack.push(isObjectType(rootType) ? rootType : undefined);\n\n        break;\n      }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION: {\n        const typeConditionAST = node.typeCondition;\n        const outputType = typeConditionAST\n          ? typeFromAST(schema, typeConditionAST)\n          : getNamedType(this.getType());\n\n        this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n        break;\n      }\n\n      case Kind.VARIABLE_DEFINITION: {\n        const inputType = typeFromAST(schema, node.type);\n\n        this._inputTypeStack.push(\n          isInputType(inputType) ? inputType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ARGUMENT: {\n        var _this$getDirective;\n\n        let argDef;\n        let argType;\n        const fieldOrDirective =\n          (_this$getDirective = this.getDirective()) !== null &&\n          _this$getDirective !== void 0\n            ? _this$getDirective\n            : this.getFieldDef();\n\n        if (fieldOrDirective) {\n          argDef = fieldOrDirective.args.find(\n            (arg) => arg.name === node.name.value,\n          );\n\n          if (argDef) {\n            argType = argDef.type;\n          }\n        }\n\n        this._argument = argDef;\n\n        this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n        this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n        break;\n      }\n\n      case Kind.LIST: {\n        const listType = getNullableType(this.getInputType());\n        const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n        this._defaultValueStack.push(undefined);\n\n        this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n        break;\n      }\n\n      case Kind.OBJECT_FIELD: {\n        const objectType = getNamedType(this.getInputType());\n        let inputFieldType;\n        let inputField;\n\n        if (isInputObjectType(objectType)) {\n          inputField = objectType.getFields()[node.name.value];\n\n          if (inputField) {\n            inputFieldType = inputField.type;\n          }\n        }\n\n        this._defaultValueStack.push(\n          inputField ? inputField.defaultValue : undefined,\n        );\n\n        this._inputTypeStack.push(\n          isInputType(inputFieldType) ? inputFieldType : undefined,\n        );\n\n        break;\n      }\n\n      case Kind.ENUM: {\n        const enumType = getNamedType(this.getInputType());\n        let enumValue;\n\n        if (isEnumType(enumType)) {\n          enumValue = enumType.getValue(node.value);\n        }\n\n        this._enumValue = enumValue;\n        break;\n      }\n\n      default: // Ignore other nodes\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n\n      default: // Ignore other nodes\n    }\n  }\n}\n\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (\n    name === SchemaMetaFieldDef.name &&\n    schema.getQueryType() === parentType\n  ) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(...args) {\n      const node = args[0];\n      typeInfo.enter(node);\n      const fn = getEnterLeaveForKind(visitor, node.kind).enter;\n\n      if (fn) {\n        const result = fn.apply(visitor, args);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(...args) {\n      const node = args[0];\n      const fn = getEnterLeaveForKind(visitor, node.kind).leave;\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, args);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}