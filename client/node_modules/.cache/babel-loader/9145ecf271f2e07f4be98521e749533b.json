{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { getNamedType, isInputObjectType, isInterfaceType, isObjectType, isUnionType } from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(\"Expected \".concat(inspect(schema), \" to be a GraphQL schema.\"));\n  }\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport var GraphQLSchema = /*#__PURE__*/function (_Symbol$toStringTag) {\n  // Used as a cache for validateSchema().\n  function GraphQLSchema(config) {\n    _classCallCheck(this, GraphQLSchema);\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) || devAssert(false, 'Must provide configuration object.');\n    !config.types || Array.isArray(config.types) || devAssert(false, \"\\\"types\\\" must be Array if provided but got: \".concat(inspect(config.types), \".\"));\n    !config.directives || Array.isArray(config.directives) || devAssert(false, '\"directives\" must be Array if provided but got: ' + \"\".concat(inspect(config.directives), \".\"));\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = (_config$extensionASTN = config.extensionASTNodes) !== null && _config$extensionASTN !== void 0 ? _config$extensionASTN : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = (_config$directives = config.directives) !== null && _config$directives !== void 0 ? _config$directives : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    var allReferencedTypes = new Set(config.types);\n    if (config.types != null) {\n      var _iterator = _createForOfIteratorHelper(config.types),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var type = _step.value;\n          // When we ready to process this type, we remove it from \"collected\" types\n          // and then add it together with all dependent types in the correct position.\n          allReferencedTypes.delete(type);\n          collectReferencedTypes(type, allReferencedTypes);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n    var _iterator2 = _createForOfIteratorHelper(this._directives),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var directive = _step2.value;\n        // Directives are not validated until validateSchema() is called.\n        if (isDirective(directive)) {\n          var _iterator4 = _createForOfIteratorHelper(directive.args),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var arg = _step4.value;\n              collectReferencedTypes(arg.type, allReferencedTypes);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n    var _iterator3 = _createForOfIteratorHelper(allReferencedTypes),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var namedType = _step3.value;\n        if (namedType == null) {\n          continue;\n        }\n        var typeName = namedType.name;\n        typeName || devAssert(false, 'One of the provided types for building the Schema is missing a name.');\n        if (this._typeMap[typeName] !== undefined) {\n          throw new Error(\"Schema must contain uniquely named types but contains multiple types named \\\"\".concat(typeName, \"\\\".\"));\n        }\n        this._typeMap[typeName] = namedType;\n        if (isInterfaceType(namedType)) {\n          // Store implementations by interface.\n          var _iterator5 = _createForOfIteratorHelper(namedType.getInterfaces()),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var iface = _step5.value;\n              if (isInterfaceType(iface)) {\n                var implementations = this._implementationsMap[iface.name];\n                if (implementations === undefined) {\n                  implementations = this._implementationsMap[iface.name] = {\n                    objects: [],\n                    interfaces: []\n                  };\n                }\n                implementations.interfaces.push(namedType);\n              }\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        } else if (isObjectType(namedType)) {\n          // Store implementations by objects.\n          var _iterator6 = _createForOfIteratorHelper(namedType.getInterfaces()),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _iface = _step6.value;\n              if (isInterfaceType(_iface)) {\n                var _implementations = this._implementationsMap[_iface.name];\n                if (_implementations === undefined) {\n                  _implementations = this._implementationsMap[_iface.name] = {\n                    objects: [],\n                    interfaces: []\n                  };\n                }\n                _implementations.objects.push(namedType);\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  _createClass(GraphQLSchema, [{\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'GraphQLSchema';\n    }\n  }, {\n    key: \"getQueryType\",\n    value: function getQueryType() {\n      return this._queryType;\n    }\n  }, {\n    key: \"getMutationType\",\n    value: function getMutationType() {\n      return this._mutationType;\n    }\n  }, {\n    key: \"getSubscriptionType\",\n    value: function getSubscriptionType() {\n      return this._subscriptionType;\n    }\n  }, {\n    key: \"getRootType\",\n    value: function getRootType(operation) {\n      switch (operation) {\n        case OperationTypeNode.QUERY:\n          return this.getQueryType();\n        case OperationTypeNode.MUTATION:\n          return this.getMutationType();\n        case OperationTypeNode.SUBSCRIPTION:\n          return this.getSubscriptionType();\n      }\n    }\n  }, {\n    key: \"getTypeMap\",\n    value: function getTypeMap() {\n      return this._typeMap;\n    }\n  }, {\n    key: \"getType\",\n    value: function getType(name) {\n      return this.getTypeMap()[name];\n    }\n  }, {\n    key: \"getPossibleTypes\",\n    value: function getPossibleTypes(abstractType) {\n      return isUnionType(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;\n    }\n  }, {\n    key: \"getImplementations\",\n    value: function getImplementations(interfaceType) {\n      var implementations = this._implementationsMap[interfaceType.name];\n      return implementations !== null && implementations !== void 0 ? implementations : {\n        objects: [],\n        interfaces: []\n      };\n    }\n  }, {\n    key: \"isSubType\",\n    value: function isSubType(abstractType, maybeSubType) {\n      var map = this._subTypeMap[abstractType.name];\n      if (map === undefined) {\n        map = Object.create(null);\n        if (isUnionType(abstractType)) {\n          var _iterator7 = _createForOfIteratorHelper(abstractType.getTypes()),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var type = _step7.value;\n              map[type.name] = true;\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        } else {\n          var implementations = this.getImplementations(abstractType);\n          var _iterator8 = _createForOfIteratorHelper(implementations.objects),\n            _step8;\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var _type = _step8.value;\n              map[_type.name] = true;\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n          var _iterator9 = _createForOfIteratorHelper(implementations.interfaces),\n            _step9;\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var _type2 = _step9.value;\n              map[_type2.name] = true;\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n        }\n        this._subTypeMap[abstractType.name] = map;\n      }\n      return map[maybeSubType.name] !== undefined;\n    }\n  }, {\n    key: \"getDirectives\",\n    value: function getDirectives() {\n      return this._directives;\n    }\n  }, {\n    key: \"getDirective\",\n    value: function getDirective(name) {\n      return this.getDirectives().find(function (directive) {\n        return directive.name === name;\n      });\n    }\n  }, {\n    key: \"toConfig\",\n    value: function toConfig() {\n      return {\n        description: this.description,\n        query: this.getQueryType(),\n        mutation: this.getMutationType(),\n        subscription: this.getSubscriptionType(),\n        types: Object.values(this.getTypeMap()),\n        directives: this.getDirectives(),\n        extensions: this.extensions,\n        astNode: this.astNode,\n        extensionASTNodes: this.extensionASTNodes,\n        assumeValid: this.__validationErrors !== undefined\n      };\n    }\n  }]);\n  return GraphQLSchema;\n}(Symbol.toStringTag);\nfunction collectReferencedTypes(type, typeSet) {\n  var namedType = getNamedType(type);\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n    if (isUnionType(namedType)) {\n      var _iterator10 = _createForOfIteratorHelper(namedType.getTypes()),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var memberType = _step10.value;\n          collectReferencedTypes(memberType, typeSet);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      var _iterator11 = _createForOfIteratorHelper(namedType.getInterfaces()),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var interfaceType = _step11.value;\n          collectReferencedTypes(interfaceType, typeSet);\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      for (var _i = 0, _Object$values = Object.values(namedType.getFields()); _i < _Object$values.length; _i++) {\n        var field = _Object$values[_i];\n        collectReferencedTypes(field.type, typeSet);\n        var _iterator12 = _createForOfIteratorHelper(field.args),\n          _step12;\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var arg = _step12.value;\n            collectReferencedTypes(arg.type, typeSet);\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (var _i2 = 0, _Object$values2 = Object.values(namedType.getFields()); _i2 < _Object$values2.length; _i2++) {\n        var _field = _Object$values2[_i2];\n        collectReferencedTypes(_field.type, typeSet);\n      }\n    }\n  }\n  return typeSet;\n}","map":{"version":3,"names":["devAssert","inspect","instanceOf","isObjectLike","toObjMap","OperationTypeNode","getNamedType","isInputObjectType","isInterfaceType","isObjectType","isUnionType","isDirective","specifiedDirectives","__Schema","isSchema","schema","GraphQLSchema","assertSchema","Error","config","_config$extensionASTN","_config$directives","__validationErrors","assumeValid","undefined","types","Array","isArray","directives","description","extensions","astNode","extensionASTNodes","_queryType","query","_mutationType","mutation","_subscriptionType","subscription","_directives","allReferencedTypes","Set","type","delete","collectReferencedTypes","directive","args","arg","_typeMap","Object","create","_subTypeMap","_implementationsMap","namedType","typeName","name","getInterfaces","iface","implementations","objects","interfaces","push","operation","QUERY","getQueryType","MUTATION","getMutationType","SUBSCRIPTION","getSubscriptionType","getTypeMap","abstractType","getTypes","getImplementations","interfaceType","maybeSubType","map","getDirectives","find","values","Symbol","toStringTag","typeSet","has","add","memberType","getFields","field"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/type/schema.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { instanceOf } from '../jsutils/instanceOf.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { toObjMap } from '../jsutils/toObjMap.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport {\n  getNamedType,\n  isInputObjectType,\n  isInterfaceType,\n  isObjectType,\n  isUnionType,\n} from './definition.mjs';\nimport { isDirective, specifiedDirectives } from './directives.mjs';\nimport { __Schema } from './introspection.mjs';\n/**\n * Test if the given value is a GraphQL schema.\n */\n\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   query: MyAppQueryRootType,\n *   mutation: MyAppMutationRootType,\n * })\n * ```\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n * ```ts\n * const characterInterface = new GraphQLInterfaceType({\n *   name: 'Character',\n *   ...\n * });\n *\n * const humanType = new GraphQLObjectType({\n *   name: 'Human',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const droidType = new GraphQLObjectType({\n *   name: 'Droid',\n *   interfaces: [characterInterface],\n *   ...\n * });\n *\n * const schema = new GraphQLSchema({\n *   query: new GraphQLObjectType({\n *     name: 'Query',\n *     fields: {\n *       hero: { type: characterInterface, ... },\n *     }\n *   }),\n *   ...\n *   // Since this schema references only the `Character` interface it's\n *   // necessary to explicitly list the types that implement it if\n *   // you want them to be included in the final schema.\n *   types: [humanType, droidType],\n * })\n * ```\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. `@include` and\n * `@skip`) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n * ```ts\n * const MyAppSchema = new GraphQLSchema({\n *   ...\n *   directives: specifiedDirectives.concat([ myCustomDirective ]),\n * })\n * ```\n */\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    var _config$extensionASTN, _config$directives;\n\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) ||\n      devAssert(false, 'Must provide configuration object.');\n    !config.types ||\n      Array.isArray(config.types) ||\n      devAssert(\n        false,\n        `\"types\" must be Array if provided but got: ${inspect(config.types)}.`,\n      );\n    !config.directives ||\n      Array.isArray(config.directives) ||\n      devAssert(\n        false,\n        '\"directives\" must be Array if provided but got: ' +\n          `${inspect(config.directives)}.`,\n      );\n    this.description = config.description;\n    this.extensions = toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes =\n      (_config$extensionASTN = config.extensionASTNodes) !== null &&\n      _config$extensionASTN !== void 0\n        ? _config$extensionASTN\n        : [];\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives =\n      (_config$directives = config.directives) !== null &&\n      _config$directives !== void 0\n        ? _config$directives\n        : specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of allReferencedTypes) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName ||\n        devAssert(\n          false,\n          'One of the provided types for building the Schema is missing a name.',\n        );\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(\n          `Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`,\n        );\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: [],\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getRootType(operation) {\n    switch (operation) {\n      case OperationTypeNode.QUERY:\n        return this.getQueryType();\n\n      case OperationTypeNode.MUTATION:\n        return this.getMutationType();\n\n      case OperationTypeNode.SUBSCRIPTION:\n        return this.getSubscriptionType();\n    }\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType)\n      ? abstractType.getTypes()\n      : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations !== null && implementations !== void 0\n      ? implementations\n      : {\n          objects: [],\n          interfaces: [],\n        };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find((directive) => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: Object.values(this.getTypeMap()),\n      directives: this.getDirectives(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes,\n      assumeValid: this.__validationErrors !== undefined,\n    };\n  }\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of Object.values(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,0BAA0B;AACpD,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,QAAQ,QAAQ,yBAAyB;AAClD,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SACEC,YAAY,EACZC,iBAAiB,EACjBC,eAAe,EACfC,YAAY,EACZC,WAAW,QACN,kBAAkB;AACzB,SAASC,WAAW,EAAEC,mBAAmB,QAAQ,kBAAkB;AACnE,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C;AACA;AACA;;AAEA,OAAO,SAASC,QAAQ,CAACC,MAAM,EAAE;EAC/B,OAAOb,UAAU,CAACa,MAAM,EAAEC,aAAa,CAAC;AAC1C;AACA,OAAO,SAASC,YAAY,CAACF,MAAM,EAAE;EACnC,IAAI,CAACD,QAAQ,CAACC,MAAM,CAAC,EAAE;IACrB,MAAM,IAAIG,KAAK,oBAAajB,OAAO,CAACc,MAAM,CAAC,8BAA2B;EACxE;EAEA,OAAOA,MAAM;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaC,aAAa;EACxB;EACA,uBAAYG,MAAM,EAAE;IAAA;IAClB,IAAIC,qBAAqB,EAAEC,kBAAkB;;IAE7C;IACA;IACA,IAAI,CAACC,kBAAkB,GAAGH,MAAM,CAACI,WAAW,KAAK,IAAI,GAAG,EAAE,GAAGC,SAAS,CAAC,CAAC;;IAExErB,YAAY,CAACgB,MAAM,CAAC,IAClBnB,SA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"},"metadata":{},"sourceType":"module"}