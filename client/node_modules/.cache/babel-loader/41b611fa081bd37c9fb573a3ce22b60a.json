{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  var schema = context.getSchema();\n  var existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  var knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n  function checkValueUniqueness(node) {\n    var _node$values;\n    var typeName = node.name.value;\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    var valueNodes = (_node$values = node.values) !== null && _node$values !== void 0 ? _node$values : [];\n    var valueNames = knownValueNames[typeName];\n    var _iterator = _createForOfIteratorHelper(valueNodes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var valueDef = _step.value;\n        var valueName = valueDef.name.value;\n        var existingType = existingTypeMap[typeName];\n        if (isEnumType(existingType) && existingType.getValue(valueName)) {\n          context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" already exists in the schema. It cannot also be defined in this type extension.\"), {\n            nodes: valueDef.name\n          }));\n        } else if (valueNames[valueName]) {\n          context.reportError(new GraphQLError(\"Enum value \\\"\".concat(typeName, \".\").concat(valueName, \"\\\" can only be defined once.\"), {\n            nodes: [valueNames[valueName], valueDef.name]\n          }));\n        } else {\n          valueNames[valueName] = valueDef.name;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["GraphQLError","isEnumType","UniqueEnumValueNamesRule","context","schema","getSchema","existingTypeMap","getTypeMap","Object","create","knownValueNames","EnumTypeDefinition","checkValueUniqueness","EnumTypeExtension","node","_node$values","typeName","name","value","valueNodes","values","valueNames","valueDef","valueName","existingType","getValue","reportError","nodes"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { isEnumType } from '../../type/definition.mjs';\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness,\n  };\n\n  function checkValueUniqueness(node) {\n    var _node$values;\n\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const valueNodes =\n      (_node$values = node.values) !== null && _node$values !== void 0\n        ? _node$values\n        : [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`,\n            {\n              nodes: valueDef.name,\n            },\n          ),\n        );\n      } else if (valueNames[valueName]) {\n        context.reportError(\n          new GraphQLError(\n            `Enum value \"${typeName}.${valueName}\" can only be defined once.`,\n            {\n              nodes: [valueNames[valueName], valueDef.name],\n            },\n          ),\n        );\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,UAAU,QAAQ,2BAA2B;;AAEtD;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,wBAAwB,CAACC,OAAO,EAAE;EAChD,IAAMC,MAAM,GAAGD,OAAO,CAACE,SAAS,EAAE;EAClC,IAAMC,eAAe,GAAGF,MAAM,GAAGA,MAAM,CAACG,UAAU,EAAE,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC1E,IAAMC,eAAe,GAAGF,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EAC3C,OAAO;IACLE,kBAAkB,EAAEC,oBAAoB;IACxCC,iBAAiB,EAAED;EACrB,CAAC;EAED,SAASA,oBAAoB,CAACE,IAAI,EAAE;IAClC,IAAIC,YAAY;IAEhB,IAAMC,QAAQ,GAAGF,IAAI,CAACG,IAAI,CAACC,KAAK;IAEhC,IAAI,CAACR,eAAe,CAACM,QAAQ,CAAC,EAAE;MAC9BN,eAAe,CAACM,QAAQ,CAAC,GAAGR,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;IACjD,CAAC,CAAC;;IAEF;;IAEA,IAAMU,UAAU,GACd,CAACJ,YAAY,GAAGD,IAAI,CAACM,MAAM,MAAM,IAAI,IAAIL,YAAY,KAAK,KAAK,CAAC,GAC5DA,YAAY,GACZ,EAAE;IACR,IAAMM,UAAU,GAAGX,eAAe,CAACM,QAAQ,CAAC;IAAC,2CAEtBG,UAAU;MAAA;IAAA;MAAjC,oDAAmC;QAAA,IAAxBG,QAAQ;QACjB,IAAMC,SAAS,GAAGD,QAAQ,CAACL,IAAI,CAACC,KAAK;QACrC,IAAMM,YAAY,GAAGlB,eAAe,CAACU,QAAQ,CAAC;QAE9C,IAAIf,UAAU,CAACuB,YAAY,CAAC,IAAIA,YAAY,CAACC,QAAQ,CAACF,SAAS,CAAC,EAAE;UAChEpB,OAAO,CAACuB,WAAW,CACjB,IAAI1B,YAAY,wBACCgB,QAAQ,cAAIO,SAAS,yFACpC;YACEI,KAAK,EAAEL,QAAQ,CAACL;UAClB,CAAC,CACF,CACF;QACH,CAAC,MAAM,IAAII,UAAU,CAACE,SAAS,CAAC,EAAE;UAChCpB,OAAO,CAACuB,WAAW,CACjB,IAAI1B,YAAY,wBACCgB,QAAQ,cAAIO,SAAS,mCACpC;YACEI,KAAK,EAAE,CAACN,UAAU,CAACE,SAAS,CAAC,EAAED,QAAQ,CAACL,IAAI;UAC9C,CAAC,CACF,CACF;QACH,CAAC,MAAM;UACLI,UAAU,CAACE,SAAS,CAAC,GAAGD,QAAQ,CAACL,IAAI;QACvC;MACF;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module"}