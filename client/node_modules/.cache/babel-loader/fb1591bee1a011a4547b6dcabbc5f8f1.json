{"ast":null,"code":"import _slicedToArray from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport { isEnumType, isInputObjectType, isInterfaceType, isListType, isNamedType, isNonNullType, isObjectType, isRequiredArgument, isRequiredInputField, isScalarType, isUnionType } from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] = 'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] = 'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] = 'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] = 'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] = 'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\nexport { BreakingChangeType };\nvar DangerousChangeType;\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] = 'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] = 'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\nexport { DangerousChangeType };\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in BreakingChangeType;\n  });\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(function (change) {\n    return change.type in DangerousChangeType;\n  });\n}\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [].concat(_toConsumableArray(findTypeChanges(oldSchema, newSchema)), _toConsumableArray(findDirectiveChanges(oldSchema, newSchema)));\n}\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var directivesDiff = diff(oldSchema.getDirectives(), newSchema.getDirectives());\n  var _iterator = _createForOfIteratorHelper(directivesDiff.removed),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var oldDirective = _step.value;\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REMOVED,\n        description: \"\".concat(oldDirective.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var _iterator2 = _createForOfIteratorHelper(directivesDiff.persisted),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n        _oldDirective = _step2$value[0],\n        newDirective = _step2$value[1];\n      var argsDiff = diff(_oldDirective.args, newDirective.args);\n      var _iterator3 = _createForOfIteratorHelper(argsDiff.added),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var newArg = _step3.value;\n          if (isRequiredArgument(newArg)) {\n            schemaChanges.push({\n              type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n              description: \"A required arg \".concat(newArg.name, \" on directive \").concat(_oldDirective.name, \" was added.\")\n            });\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      var _iterator4 = _createForOfIteratorHelper(argsDiff.removed),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var oldArg = _step4.value;\n          schemaChanges.push({\n            type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n            description: \"\".concat(oldArg.name, \" was removed from \").concat(_oldDirective.name, \".\")\n          });\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      if (_oldDirective.isRepeatable && !newDirective.isRepeatable) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n          description: \"Repeatable flag was removed from \".concat(_oldDirective.name, \".\")\n        });\n      }\n      var _iterator5 = _createForOfIteratorHelper(_oldDirective.locations),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var location = _step5.value;\n          if (!newDirective.locations.includes(location)) {\n            schemaChanges.push({\n              type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n              description: \"\".concat(location, \" was removed from \").concat(_oldDirective.name, \".\")\n            });\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return schemaChanges;\n}\nfunction findTypeChanges(oldSchema, newSchema) {\n  var schemaChanges = [];\n  var typesDiff = diff(Object.values(oldSchema.getTypeMap()), Object.values(newSchema.getTypeMap()));\n  var _iterator6 = _createForOfIteratorHelper(typesDiff.removed),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var oldType = _step6.value;\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED,\n        description: isSpecifiedScalarType(oldType) ? \"Standard scalar \".concat(oldType.name, \" was removed because it is not referenced anymore.\") : \"\".concat(oldType.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  var _iterator7 = _createForOfIteratorHelper(typesDiff.persisted),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        _oldType = _step7$value[0],\n        newType = _step7$value[1];\n      if (isEnumType(_oldType) && isEnumType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findEnumTypeChanges(_oldType, newType)));\n      } else if (isUnionType(_oldType) && isUnionType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findUnionTypeChanges(_oldType, newType)));\n      } else if (isInputObjectType(_oldType) && isInputObjectType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findInputObjectTypeChanges(_oldType, newType)));\n      } else if (isObjectType(_oldType) && isObjectType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findFieldChanges(_oldType, newType)).concat(_toConsumableArray(findImplementedInterfacesChanges(_oldType, newType))));\n      } else if (isInterfaceType(_oldType) && isInterfaceType(newType)) {\n        schemaChanges.push.apply(schemaChanges, _toConsumableArray(findFieldChanges(_oldType, newType)).concat(_toConsumableArray(findImplementedInterfacesChanges(_oldType, newType))));\n      } else if (_oldType.constructor !== newType.constructor) {\n        schemaChanges.push({\n          type: BreakingChangeType.TYPE_CHANGED_KIND,\n          description: \"\".concat(_oldType.name, \" changed from \") + \"\".concat(typeKindName(_oldType), \" to \").concat(typeKindName(newType), \".\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  return schemaChanges;\n}\nfunction findInputObjectTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));\n  var _iterator8 = _createForOfIteratorHelper(fieldsDiff.added),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var newField = _step8.value;\n      if (isRequiredInputField(newField)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n          description: \"A required field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n        });\n      } else {\n        schemaChanges.push({\n          type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n          description: \"An optional field \".concat(newField.name, \" on input type \").concat(oldType.name, \" was added.\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n  var _iterator9 = _createForOfIteratorHelper(fieldsDiff.removed),\n    _step9;\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var oldField = _step9.value;\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_REMOVED,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n  var _iterator10 = _createForOfIteratorHelper(fieldsDiff.persisted),\n    _step10;\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var _step10$value = _slicedToArray(_step10.value, 2),\n        _oldField = _step10$value[0],\n        _newField = _step10$value[1];\n      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldField.type, _newField.type);\n      if (!isSafe) {\n        schemaChanges.push({\n          type: BreakingChangeType.FIELD_CHANGED_KIND,\n          description: \"\".concat(oldType.name, \".\").concat(_oldField.name, \" changed type from \") + \"\".concat(String(_oldField.type), \" to \").concat(String(_newField.type), \".\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n  return schemaChanges;\n}\nfunction findUnionTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n  var _iterator11 = _createForOfIteratorHelper(possibleTypesDiff.added),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var newPossibleType = _step11.value;\n      schemaChanges.push({\n        type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n        description: \"\".concat(newPossibleType.name, \" was added to union type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n  var _iterator12 = _createForOfIteratorHelper(possibleTypesDiff.removed),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var oldPossibleType = _step12.value;\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n        description: \"\".concat(oldPossibleType.name, \" was removed from union type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n  return schemaChanges;\n}\nfunction findEnumTypeChanges(oldType, newType) {\n  var schemaChanges = [];\n  var valuesDiff = diff(oldType.getValues(), newType.getValues());\n  var _iterator13 = _createForOfIteratorHelper(valuesDiff.added),\n    _step13;\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var newValue = _step13.value;\n      schemaChanges.push({\n        type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n        description: \"\".concat(newValue.name, \" was added to enum type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n  var _iterator14 = _createForOfIteratorHelper(valuesDiff.removed),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var oldValue = _step14.value;\n      schemaChanges.push({\n        type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n        description: \"\".concat(oldValue.name, \" was removed from enum type \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  return schemaChanges;\n}\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  var schemaChanges = [];\n  var interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n  var _iterator15 = _createForOfIteratorHelper(interfacesDiff.added),\n    _step15;\n  try {\n    for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n      var newInterface = _step15.value;\n      schemaChanges.push({\n        type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n        description: \"\".concat(newInterface.name, \" added to interfaces implemented by \").concat(oldType.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator15.e(err);\n  } finally {\n    _iterator15.f();\n  }\n  var _iterator16 = _createForOfIteratorHelper(interfacesDiff.removed),\n    _step16;\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var oldInterface = _step16.value;\n      schemaChanges.push({\n        type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n        description: \"\".concat(oldType.name, \" no longer implements interface \").concat(oldInterface.name, \".\")\n      });\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n  return schemaChanges;\n}\nfunction findFieldChanges(oldType, newType) {\n  var schemaChanges = [];\n  var fieldsDiff = diff(Object.values(oldType.getFields()), Object.values(newType.getFields()));\n  var _iterator17 = _createForOfIteratorHelper(fieldsDiff.removed),\n    _step17;\n  try {\n    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n      var oldField = _step17.value;\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_REMOVED,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator17.e(err);\n  } finally {\n    _iterator17.f();\n  }\n  var _iterator18 = _createForOfIteratorHelper(fieldsDiff.persisted),\n    _step18;\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var _step18$value = _slicedToArray(_step18.value, 2),\n        _oldField2 = _step18$value[0],\n        newField = _step18$value[1];\n      schemaChanges.push.apply(schemaChanges, _toConsumableArray(findArgChanges(oldType, _oldField2, newField)));\n      var isSafe = isChangeSafeForObjectOrInterfaceField(_oldField2.type, newField.type);\n      if (!isSafe) {\n        schemaChanges.push({\n          type: BreakingChangeType.FIELD_CHANGED_KIND,\n          description: \"\".concat(oldType.name, \".\").concat(_oldField2.name, \" changed type from \") + \"\".concat(String(_oldField2.type), \" to \").concat(String(newField.type), \".\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n  return schemaChanges;\n}\nfunction findArgChanges(oldType, oldField, newField) {\n  var schemaChanges = [];\n  var argsDiff = diff(oldField.args, newField.args);\n  var _iterator19 = _createForOfIteratorHelper(argsDiff.removed),\n    _step19;\n  try {\n    for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n      var oldArg = _step19.value;\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_REMOVED,\n        description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(oldArg.name, \" was removed.\")\n      });\n    }\n  } catch (err) {\n    _iterator19.e(err);\n  } finally {\n    _iterator19.f();\n  }\n  var _iterator20 = _createForOfIteratorHelper(argsDiff.persisted),\n    _step20;\n  try {\n    for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n      var _step20$value = _slicedToArray(_step20.value, 2),\n        _oldArg = _step20$value[0],\n        newArg = _step20$value[1];\n      var isSafe = isChangeSafeForInputObjectFieldOrFieldArg(_oldArg.type, newArg.type);\n      if (!isSafe) {\n        schemaChanges.push({\n          type: BreakingChangeType.ARG_CHANGED_KIND,\n          description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed type from \") + \"\".concat(String(_oldArg.type), \" to \").concat(String(newArg.type), \".\")\n        });\n      } else if (_oldArg.defaultValue !== undefined) {\n        if (newArg.defaultValue === undefined) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" defaultValue was removed.\")\n          });\n        } else {\n          // Since we looking only for client's observable changes we should\n          // compare default values in the same representation as they are\n          // represented inside introspection.\n          var oldValueStr = stringifyValue(_oldArg.defaultValue, _oldArg.type);\n          var newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n          if (oldValueStr !== newValueStr) {\n            schemaChanges.push({\n              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n              description: \"\".concat(oldType.name, \".\").concat(oldField.name, \" arg \").concat(_oldArg.name, \" has changed defaultValue from \").concat(oldValueStr, \" to \").concat(newValueStr, \".\")\n            });\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator20.e(err);\n  } finally {\n    _iterator20.f();\n  }\n  var _iterator21 = _createForOfIteratorHelper(argsDiff.added),\n    _step21;\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var _newArg = _step21.value;\n      if (isRequiredArgument(_newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_ARG_ADDED,\n          description: \"A required arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n        });\n      } else {\n        schemaChanges.push({\n          type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n          description: \"An optional arg \".concat(_newArg.name, \" on \").concat(oldType.name, \".\").concat(oldField.name, \" was added.\")\n        });\n      }\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n  return schemaChanges;\n}\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      isListType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType) ||\n      // moving from nullable to non-null of the same underlying type is safe\n      isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n    );\n  }\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType);\n  }\n  return (\n    // if they're both named types, see if their names are equivalent\n    isNamedType(newType) && oldType.name === newType.name ||\n    // moving from nullable to non-null of the same underlying type is safe\n    isNonNullType(newType) && isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType)\n  );\n}\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return isListType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType);\n  }\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType) ||\n      // moving from non-null to nullable of the same underlying type is safe\n      !isNonNullType(newType) && isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType)\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\nfunction stringifyValue(value, type) {\n  var ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\nfunction diff(oldArray, newArray) {\n  var added = [];\n  var removed = [];\n  var persisted = [];\n  var oldMap = keyMap(oldArray, function (_ref) {\n    var name = _ref.name;\n    return name;\n  });\n  var newMap = keyMap(newArray, function (_ref2) {\n    var name = _ref2.name;\n    return name;\n  });\n  var _iterator22 = _createForOfIteratorHelper(oldArray),\n    _step22;\n  try {\n    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n      var oldItem = _step22.value;\n      var newItem = newMap[oldItem.name];\n      if (newItem === undefined) {\n        removed.push(oldItem);\n      } else {\n        persisted.push([oldItem, newItem]);\n      }\n    }\n  } catch (err) {\n    _iterator22.e(err);\n  } finally {\n    _iterator22.f();\n  }\n  var _iterator23 = _createForOfIteratorHelper(newArray),\n    _step23;\n  try {\n    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n      var _newItem = _step23.value;\n      if (oldMap[_newItem.name] === undefined) {\n        added.push(_newItem);\n      }\n    }\n  } catch (err) {\n    _iterator23.e(err);\n  } finally {\n    _iterator23.f();\n  }\n  return {\n    added: added,\n    persisted: persisted,\n    removed: removed\n  };\n}","map":{"version":3,"names":["inspect","invariant","keyMap","print","isEnumType","isInputObjectType","isInterfaceType","isListType","isNamedType","isNonNullType","isObjectType","isRequiredArgument","isRequiredInputField","isScalarType","isUnionType","isSpecifiedScalarType","astFromValue","sortValueNode","BreakingChangeType","DangerousChangeType","findBreakingChanges","oldSchema","newSchema","findSchemaChanges","filter","change","type","findDangerousChanges","findTypeChanges","findDirectiveChanges","schemaChanges","directivesDiff","diff","getDirectives","removed","oldDirective","push","DIRECTIVE_REMOVED","description","name","persisted","newDirective","argsDiff","args","added","newArg","REQUIRED_DIRECTIVE_ARG_ADDED","oldArg","DIRECTIVE_ARG_REMOVED","isRepeatable","DIRECTIVE_REPEATABLE_REMOVED","locations","location","includes","DIRECTIVE_LOCATION_REMOVED","typesDiff","Object","values","getTypeMap","oldType","TYPE_REMOVED","newType","findEnumTypeChanges","findUnionTypeChanges","findInputObjectTypeChanges","findFieldChanges","findImplementedInterfacesChanges","constructor","TYPE_CHANGED_KIND","typeKindName","fieldsDiff","getFields","newField","REQUIRED_INPUT_FIELD_ADDED","OPTIONAL_INPUT_FIELD_ADDED","oldField","FIELD_REMOVED","isSafe","isChangeSafeForInputObjectFieldOrFieldArg","FIELD_CHANGED_KIND","String","possibleTypesDiff","getTypes","newPossibleType","TYPE_ADDED_TO_UNION","oldPossibleType","TYPE_REMOVED_FROM_UNION","valuesDiff","getValues","newValue","VALUE_ADDED_TO_ENUM","oldValue","VALUE_REMOVED_FROM_ENUM","interfacesDiff","getInterfaces","newInterface","IMPLEMENTED_INTERFACE_ADDED","oldInterface","IMPLEMENTED_INTERFACE_REMOVED","findArgChanges","isChangeSafeForObjectOrInterfaceField","ARG_REMOVED","ARG_CHANGED_KIND","defaultValue","undefined","ARG_DEFAULT_VALUE_CHANGE","oldValueStr","stringifyValue","newValueStr","REQUIRED_ARG_ADDED","OPTIONAL_ARG_ADDED","ofType","value","ast","oldArray","newArray","oldMap","newMap","oldItem","newItem"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/utilities/findBreakingChanges.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { keyMap } from '../jsutils/keyMap.mjs';\nimport { print } from '../language/printer.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInterfaceType,\n  isListType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isScalarType,\n  isUnionType,\n} from '../type/definition.mjs';\nimport { isSpecifiedScalarType } from '../type/scalars.mjs';\nimport { astFromValue } from './astFromValue.mjs';\nimport { sortValueNode } from './sortValueNode.mjs';\nvar BreakingChangeType;\n\n(function (BreakingChangeType) {\n  BreakingChangeType['TYPE_REMOVED'] = 'TYPE_REMOVED';\n  BreakingChangeType['TYPE_CHANGED_KIND'] = 'TYPE_CHANGED_KIND';\n  BreakingChangeType['TYPE_REMOVED_FROM_UNION'] = 'TYPE_REMOVED_FROM_UNION';\n  BreakingChangeType['VALUE_REMOVED_FROM_ENUM'] = 'VALUE_REMOVED_FROM_ENUM';\n  BreakingChangeType['REQUIRED_INPUT_FIELD_ADDED'] =\n    'REQUIRED_INPUT_FIELD_ADDED';\n  BreakingChangeType['IMPLEMENTED_INTERFACE_REMOVED'] =\n    'IMPLEMENTED_INTERFACE_REMOVED';\n  BreakingChangeType['FIELD_REMOVED'] = 'FIELD_REMOVED';\n  BreakingChangeType['FIELD_CHANGED_KIND'] = 'FIELD_CHANGED_KIND';\n  BreakingChangeType['REQUIRED_ARG_ADDED'] = 'REQUIRED_ARG_ADDED';\n  BreakingChangeType['ARG_REMOVED'] = 'ARG_REMOVED';\n  BreakingChangeType['ARG_CHANGED_KIND'] = 'ARG_CHANGED_KIND';\n  BreakingChangeType['DIRECTIVE_REMOVED'] = 'DIRECTIVE_REMOVED';\n  BreakingChangeType['DIRECTIVE_ARG_REMOVED'] = 'DIRECTIVE_ARG_REMOVED';\n  BreakingChangeType['REQUIRED_DIRECTIVE_ARG_ADDED'] =\n    'REQUIRED_DIRECTIVE_ARG_ADDED';\n  BreakingChangeType['DIRECTIVE_REPEATABLE_REMOVED'] =\n    'DIRECTIVE_REPEATABLE_REMOVED';\n  BreakingChangeType['DIRECTIVE_LOCATION_REMOVED'] =\n    'DIRECTIVE_LOCATION_REMOVED';\n})(BreakingChangeType || (BreakingChangeType = {}));\n\nexport { BreakingChangeType };\nvar DangerousChangeType;\n\n(function (DangerousChangeType) {\n  DangerousChangeType['VALUE_ADDED_TO_ENUM'] = 'VALUE_ADDED_TO_ENUM';\n  DangerousChangeType['TYPE_ADDED_TO_UNION'] = 'TYPE_ADDED_TO_UNION';\n  DangerousChangeType['OPTIONAL_INPUT_FIELD_ADDED'] =\n    'OPTIONAL_INPUT_FIELD_ADDED';\n  DangerousChangeType['OPTIONAL_ARG_ADDED'] = 'OPTIONAL_ARG_ADDED';\n  DangerousChangeType['IMPLEMENTED_INTERFACE_ADDED'] =\n    'IMPLEMENTED_INTERFACE_ADDED';\n  DangerousChangeType['ARG_DEFAULT_VALUE_CHANGE'] = 'ARG_DEFAULT_VALUE_CHANGE';\n})(DangerousChangeType || (DangerousChangeType = {}));\n\nexport { DangerousChangeType };\n\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of breaking changes covered by the other functions down below.\n */\nexport function findBreakingChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in BreakingChangeType,\n  );\n}\n/**\n * Given two schemas, returns an Array containing descriptions of all the types\n * of potentially dangerous changes covered by the other functions down below.\n */\n\nexport function findDangerousChanges(oldSchema, newSchema) {\n  // @ts-expect-error\n  return findSchemaChanges(oldSchema, newSchema).filter(\n    (change) => change.type in DangerousChangeType,\n  );\n}\n\nfunction findSchemaChanges(oldSchema, newSchema) {\n  return [\n    ...findTypeChanges(oldSchema, newSchema),\n    ...findDirectiveChanges(oldSchema, newSchema),\n  ];\n}\n\nfunction findDirectiveChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const directivesDiff = diff(\n    oldSchema.getDirectives(),\n    newSchema.getDirectives(),\n  );\n\n  for (const oldDirective of directivesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.DIRECTIVE_REMOVED,\n      description: `${oldDirective.name} was removed.`,\n    });\n  }\n\n  for (const [oldDirective, newDirective] of directivesDiff.persisted) {\n    const argsDiff = diff(oldDirective.args, newDirective.args);\n\n    for (const newArg of argsDiff.added) {\n      if (isRequiredArgument(newArg)) {\n        schemaChanges.push({\n          type: BreakingChangeType.REQUIRED_DIRECTIVE_ARG_ADDED,\n          description: `A required arg ${newArg.name} on directive ${oldDirective.name} was added.`,\n        });\n      }\n    }\n\n    for (const oldArg of argsDiff.removed) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_ARG_REMOVED,\n        description: `${oldArg.name} was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    if (oldDirective.isRepeatable && !newDirective.isRepeatable) {\n      schemaChanges.push({\n        type: BreakingChangeType.DIRECTIVE_REPEATABLE_REMOVED,\n        description: `Repeatable flag was removed from ${oldDirective.name}.`,\n      });\n    }\n\n    for (const location of oldDirective.locations) {\n      if (!newDirective.locations.includes(location)) {\n        schemaChanges.push({\n          type: BreakingChangeType.DIRECTIVE_LOCATION_REMOVED,\n          description: `${location} was removed from ${oldDirective.name}.`,\n        });\n      }\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findTypeChanges(oldSchema, newSchema) {\n  const schemaChanges = [];\n  const typesDiff = diff(\n    Object.values(oldSchema.getTypeMap()),\n    Object.values(newSchema.getTypeMap()),\n  );\n\n  for (const oldType of typesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED,\n      description: isSpecifiedScalarType(oldType)\n        ? `Standard scalar ${oldType.name} was removed because it is not referenced anymore.`\n        : `${oldType.name} was removed.`,\n    });\n  }\n\n  for (const [oldType, newType] of typesDiff.persisted) {\n    if (isEnumType(oldType) && isEnumType(newType)) {\n      schemaChanges.push(...findEnumTypeChanges(oldType, newType));\n    } else if (isUnionType(oldType) && isUnionType(newType)) {\n      schemaChanges.push(...findUnionTypeChanges(oldType, newType));\n    } else if (isInputObjectType(oldType) && isInputObjectType(newType)) {\n      schemaChanges.push(...findInputObjectTypeChanges(oldType, newType));\n    } else if (isObjectType(oldType) && isObjectType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (isInterfaceType(oldType) && isInterfaceType(newType)) {\n      schemaChanges.push(\n        ...findFieldChanges(oldType, newType),\n        ...findImplementedInterfacesChanges(oldType, newType),\n      );\n    } else if (oldType.constructor !== newType.constructor) {\n      schemaChanges.push({\n        type: BreakingChangeType.TYPE_CHANGED_KIND,\n        description:\n          `${oldType.name} changed from ` +\n          `${typeKindName(oldType)} to ${typeKindName(newType)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findInputObjectTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const newField of fieldsDiff.added) {\n    if (isRequiredInputField(newField)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_INPUT_FIELD_ADDED,\n        description: `A required field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_INPUT_FIELD_ADDED,\n        description: `An optional field ${newField.name} on input type ${oldType.name} was added.`,\n      });\n    }\n  }\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findUnionTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const possibleTypesDiff = diff(oldType.getTypes(), newType.getTypes());\n\n  for (const newPossibleType of possibleTypesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.TYPE_ADDED_TO_UNION,\n      description: `${newPossibleType.name} was added to union type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldPossibleType of possibleTypesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.TYPE_REMOVED_FROM_UNION,\n      description: `${oldPossibleType.name} was removed from union type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findEnumTypeChanges(oldType, newType) {\n  const schemaChanges = [];\n  const valuesDiff = diff(oldType.getValues(), newType.getValues());\n\n  for (const newValue of valuesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.VALUE_ADDED_TO_ENUM,\n      description: `${newValue.name} was added to enum type ${oldType.name}.`,\n    });\n  }\n\n  for (const oldValue of valuesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.VALUE_REMOVED_FROM_ENUM,\n      description: `${oldValue.name} was removed from enum type ${oldType.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findImplementedInterfacesChanges(oldType, newType) {\n  const schemaChanges = [];\n  const interfacesDiff = diff(oldType.getInterfaces(), newType.getInterfaces());\n\n  for (const newInterface of interfacesDiff.added) {\n    schemaChanges.push({\n      type: DangerousChangeType.IMPLEMENTED_INTERFACE_ADDED,\n      description: `${newInterface.name} added to interfaces implemented by ${oldType.name}.`,\n    });\n  }\n\n  for (const oldInterface of interfacesDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.IMPLEMENTED_INTERFACE_REMOVED,\n      description: `${oldType.name} no longer implements interface ${oldInterface.name}.`,\n    });\n  }\n\n  return schemaChanges;\n}\n\nfunction findFieldChanges(oldType, newType) {\n  const schemaChanges = [];\n  const fieldsDiff = diff(\n    Object.values(oldType.getFields()),\n    Object.values(newType.getFields()),\n  );\n\n  for (const oldField of fieldsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.FIELD_REMOVED,\n      description: `${oldType.name}.${oldField.name} was removed.`,\n    });\n  }\n\n  for (const [oldField, newField] of fieldsDiff.persisted) {\n    schemaChanges.push(...findArgChanges(oldType, oldField, newField));\n    const isSafe = isChangeSafeForObjectOrInterfaceField(\n      oldField.type,\n      newField.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.FIELD_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} changed type from ` +\n          `${String(oldField.type)} to ${String(newField.type)}.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction findArgChanges(oldType, oldField, newField) {\n  const schemaChanges = [];\n  const argsDiff = diff(oldField.args, newField.args);\n\n  for (const oldArg of argsDiff.removed) {\n    schemaChanges.push({\n      type: BreakingChangeType.ARG_REMOVED,\n      description: `${oldType.name}.${oldField.name} arg ${oldArg.name} was removed.`,\n    });\n  }\n\n  for (const [oldArg, newArg] of argsDiff.persisted) {\n    const isSafe = isChangeSafeForInputObjectFieldOrFieldArg(\n      oldArg.type,\n      newArg.type,\n    );\n\n    if (!isSafe) {\n      schemaChanges.push({\n        type: BreakingChangeType.ARG_CHANGED_KIND,\n        description:\n          `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed type from ` +\n          `${String(oldArg.type)} to ${String(newArg.type)}.`,\n      });\n    } else if (oldArg.defaultValue !== undefined) {\n      if (newArg.defaultValue === undefined) {\n        schemaChanges.push({\n          type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n          description: `${oldType.name}.${oldField.name} arg ${oldArg.name} defaultValue was removed.`,\n        });\n      } else {\n        // Since we looking only for client's observable changes we should\n        // compare default values in the same representation as they are\n        // represented inside introspection.\n        const oldValueStr = stringifyValue(oldArg.defaultValue, oldArg.type);\n        const newValueStr = stringifyValue(newArg.defaultValue, newArg.type);\n\n        if (oldValueStr !== newValueStr) {\n          schemaChanges.push({\n            type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\n            description: `${oldType.name}.${oldField.name} arg ${oldArg.name} has changed defaultValue from ${oldValueStr} to ${newValueStr}.`,\n          });\n        }\n      }\n    }\n  }\n\n  for (const newArg of argsDiff.added) {\n    if (isRequiredArgument(newArg)) {\n      schemaChanges.push({\n        type: BreakingChangeType.REQUIRED_ARG_ADDED,\n        description: `A required arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    } else {\n      schemaChanges.push({\n        type: DangerousChangeType.OPTIONAL_ARG_ADDED,\n        description: `An optional arg ${newArg.name} on ${oldType.name}.${oldField.name} was added.`,\n      });\n    }\n  }\n\n  return schemaChanges;\n}\n\nfunction isChangeSafeForObjectOrInterfaceField(oldType, newType) {\n  if (isListType(oldType)) {\n    return (\n      // if they're both lists, make sure the underlying types are compatible\n      (isListType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from nullable to non-null of the same underlying type is safe\n      (isNonNullType(newType) &&\n        isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    // if they're both non-null, make sure the underlying types are compatible\n    return (\n      isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType.ofType, newType.ofType)\n    );\n  }\n\n  return (\n    // if they're both named types, see if their names are equivalent\n    (isNamedType(newType) && oldType.name === newType.name) || // moving from nullable to non-null of the same underlying type is safe\n    (isNonNullType(newType) &&\n      isChangeSafeForObjectOrInterfaceField(oldType, newType.ofType))\n  );\n}\n\nfunction isChangeSafeForInputObjectFieldOrFieldArg(oldType, newType) {\n  if (isListType(oldType)) {\n    // if they're both lists, make sure the underlying types are compatible\n    return (\n      isListType(newType) &&\n      isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType.ofType)\n    );\n  }\n\n  if (isNonNullType(oldType)) {\n    return (\n      // if they're both non-null, make sure the underlying types are\n      // compatible\n      (isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(\n          oldType.ofType,\n          newType.ofType,\n        )) || // moving from non-null to nullable of the same underlying type is safe\n      (!isNonNullType(newType) &&\n        isChangeSafeForInputObjectFieldOrFieldArg(oldType.ofType, newType))\n    );\n  } // if they're both named types, see if their names are equivalent\n\n  return isNamedType(newType) && oldType.name === newType.name;\n}\n\nfunction typeKindName(type) {\n  if (isScalarType(type)) {\n    return 'a Scalar type';\n  }\n\n  if (isObjectType(type)) {\n    return 'an Object type';\n  }\n\n  if (isInterfaceType(type)) {\n    return 'an Interface type';\n  }\n\n  if (isUnionType(type)) {\n    return 'a Union type';\n  }\n\n  if (isEnumType(type)) {\n    return 'an Enum type';\n  }\n\n  if (isInputObjectType(type)) {\n    return 'an Input type';\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected type: ' + inspect(type));\n}\n\nfunction stringifyValue(value, type) {\n  const ast = astFromValue(value, type);\n  ast != null || invariant(false);\n  return print(sortValueNode(ast));\n}\n\nfunction diff(oldArray, newArray) {\n  const added = [];\n  const removed = [];\n  const persisted = [];\n  const oldMap = keyMap(oldArray, ({ name }) => name);\n  const newMap = keyMap(newArray, ({ name }) => name);\n\n  for (const oldItem of oldArray) {\n    const newItem = newMap[oldItem.name];\n\n    if (newItem === undefined) {\n      removed.push(oldItem);\n    } else {\n      persisted.push([oldItem, newItem]);\n    }\n  }\n\n  for (const newItem of newArray) {\n    if (oldMap[newItem.name] === undefined) {\n      added.push(newItem);\n    }\n  }\n\n  return {\n    added,\n    persisted,\n    removed,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}