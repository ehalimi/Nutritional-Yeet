{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators.mjs';\nimport { isEnumType, isInputObjectType, isInputType, isInterfaceType, isNamedType, isNonNullType, isObjectType, isOutputType, isRequiredArgument, isRequiredInputField, isUnionType } from './definition.mjs';\nimport { GraphQLDeprecatedDirective, isDirective } from './directives.mjs';\nimport { isIntrospectionType } from './introspection.mjs';\nimport { assertSchema } from './schema.mjs';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  var context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  var errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  var errors = validateSchema(schema);\n  if (errors.length !== 0) {\n    throw new Error(errors.map(function (error) {\n      return error.message;\n    }).join('\\n\\n'));\n  }\n}\nvar SchemaValidationContext = /*#__PURE__*/function () {\n  function SchemaValidationContext(schema) {\n    _classCallCheck(this, SchemaValidationContext);\n    this._errors = [];\n    this.schema = schema;\n  }\n  _createClass(SchemaValidationContext, [{\n    key: \"reportError\",\n    value: function reportError(message, nodes) {\n      var _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n      this._errors.push(new GraphQLError(message, {\n        nodes: _nodes\n      }));\n    }\n  }, {\n    key: \"getErrors\",\n    value: function getErrors() {\n      return this._errors;\n    }\n  }]);\n  return SchemaValidationContext;\n}();\nfunction validateRootTypes(context) {\n  var schema = context.schema;\n  var queryType = schema.getQueryType();\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    var _getOperationTypeNode;\n    context.reportError(\"Query root type must be Object type, it cannot be \".concat(inspect(queryType), \".\"), (_getOperationTypeNode = getOperationTypeNode(schema, OperationTypeNode.QUERY)) !== null && _getOperationTypeNode !== void 0 ? _getOperationTypeNode : queryType.astNode);\n  }\n  var mutationType = schema.getMutationType();\n  if (mutationType && !isObjectType(mutationType)) {\n    var _getOperationTypeNode2;\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(mutationType), \".\"), (_getOperationTypeNode2 = getOperationTypeNode(schema, OperationTypeNode.MUTATION)) !== null && _getOperationTypeNode2 !== void 0 ? _getOperationTypeNode2 : mutationType.astNode);\n  }\n  var subscriptionType = schema.getSubscriptionType();\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    var _getOperationTypeNode3;\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + \"\".concat(inspect(subscriptionType), \".\"), (_getOperationTypeNode3 = getOperationTypeNode(schema, OperationTypeNode.SUBSCRIPTION)) !== null && _getOperationTypeNode3 !== void 0 ? _getOperationTypeNode3 : subscriptionType.astNode);\n  }\n}\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n  return (_flatMap$find = [schema.astNode].concat(_toConsumableArray(schema.extensionASTNodes)).flatMap(\n  // FIXME: https://github.com/graphql/graphql-js/issues/2203\n  function (schemaNode) {\n    var _schemaNode$operation;\n    return (/* c8 ignore next */\n      (_schemaNode$operation = schemaNode === null || schemaNode === void 0 ? void 0 : schemaNode.operationTypes) !== null && _schemaNode$operation !== void 0 ? _schemaNode$operation : []\n    );\n  }).find(function (operationNode) {\n    return operationNode.operation === operation;\n  })) === null || _flatMap$find === void 0 ? void 0 : _flatMap$find.type;\n}\nfunction validateDirectives(context) {\n  var _iterator = _createForOfIteratorHelper(context.schema.getDirectives()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var directive = _step.value;\n      // Ensure all directives are in fact GraphQL directives.\n      if (!isDirective(directive)) {\n        context.reportError(\"Expected directive but got: \".concat(inspect(directive), \".\"), directive === null || directive === void 0 ? void 0 : directive.astNode);\n        continue;\n      } // Ensure they are named correctly.\n\n      validateName(context, directive); // TODO: Ensure proper locations.\n      // Ensure the arguments are valid.\n      var _iterator2 = _createForOfIteratorHelper(directive.args),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var arg = _step2.value;\n          // Ensure they are named correctly.\n          validateName(context, arg); // Ensure the type is an input type.\n\n          if (!isInputType(arg.type)) {\n            context.reportError(\"The type of @\".concat(directive.name, \"(\").concat(arg.name, \":) must be Input Type \") + \"but got: \".concat(inspect(arg.type), \".\"), arg.astNode);\n          }\n          if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n            var _arg$astNode;\n            context.reportError(\"Required argument @\".concat(directive.name, \"(\").concat(arg.name, \":) cannot be deprecated.\"), [getDeprecatedDirectiveNode(arg.astNode), (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0 ? void 0 : _arg$astNode.type]);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\"Name \\\"\".concat(node.name, \"\\\" must not begin with \\\"__\\\", which is reserved by GraphQL introspection.\"), node.astNode);\n  }\n}\nfunction validateTypes(context) {\n  var validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);\n  var typeMap = context.schema.getTypeMap();\n  for (var _i = 0, _Object$values = Object.values(typeMap); _i < _Object$values.length; _i++) {\n    var type = _Object$values[_i];\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\"Expected GraphQL named type but got: \".concat(inspect(type), \".\"), type.astNode);\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\nfunction validateFields(context, type) {\n  var fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(\"Type \".concat(type.name, \" must define one or more fields.\"), [type.astNode].concat(_toConsumableArray(type.extensionASTNodes)));\n  }\n  for (var _i2 = 0, _fields = fields; _i2 < _fields.length; _i2++) {\n    var field = _fields[_i2];\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n      context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \" must be Output Type \") + \"but got: \".concat(inspect(field.type), \".\"), (_field$astNode = field.astNode) === null || _field$astNode === void 0 ? void 0 : _field$astNode.type);\n    } // Ensure the arguments are valid\n    var _iterator3 = _createForOfIteratorHelper(field.args),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var arg = _step3.value;\n        var argName = arg.name; // Ensure they are named correctly.\n\n        validateName(context, arg); // Ensure the type is an input type\n\n        if (!isInputType(arg.type)) {\n          var _arg$astNode2;\n          context.reportError(\"The type of \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) must be Input \") + \"Type but got: \".concat(inspect(arg.type), \".\"), (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0 ? void 0 : _arg$astNode2.type);\n        }\n        if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n          var _arg$astNode3;\n          context.reportError(\"Required argument \".concat(type.name, \".\").concat(field.name, \"(\").concat(argName, \":) cannot be deprecated.\"), [getDeprecatedDirectiveNode(arg.astNode), (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0 ? void 0 : _arg$astNode3.type]);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n}\nfunction validateInterfaces(context, type) {\n  var ifaceTypeNames = Object.create(null);\n  var _iterator4 = _createForOfIteratorHelper(type.getInterfaces()),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var iface = _step4.value;\n      if (!isInterfaceType(iface)) {\n        context.reportError(\"Type \".concat(inspect(type), \" must only implement Interface types, \") + \"it cannot implement \".concat(inspect(iface), \".\"), getAllImplementsInterfaceNodes(type, iface));\n        continue;\n      }\n      if (type === iface) {\n        context.reportError(\"Type \".concat(type.name, \" cannot implement itself because it would create a circular reference.\"), getAllImplementsInterfaceNodes(type, iface));\n        continue;\n      }\n      if (ifaceTypeNames[iface.name]) {\n        context.reportError(\"Type \".concat(type.name, \" can only implement \").concat(iface.name, \" once.\"), getAllImplementsInterfaceNodes(type, iface));\n        continue;\n      }\n      ifaceTypeNames[iface.name] = true;\n      validateTypeImplementsAncestors(context, type, iface);\n      validateTypeImplementsInterface(context, type, iface);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n}\nfunction validateTypeImplementsInterface(context, type, iface) {\n  var typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (var _i3 = 0, _Object$values2 = Object.values(iface.getFields()); _i3 < _Object$values2.length; _i3++) {\n    var ifaceField = _Object$values2[_i3];\n    var fieldName = ifaceField.name;\n    var typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expected but \").concat(type.name, \" does not provide it.\"), [ifaceField.astNode, type.astNode].concat(_toConsumableArray(type.extensionASTNodes)));\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      var _ifaceField$astNode, _typeField$astNode;\n      context.reportError(\"Interface field \".concat(iface.name, \".\").concat(fieldName, \" expects type \") + \"\".concat(inspect(ifaceField.type), \" but \").concat(type.name, \".\").concat(fieldName, \" \") + \"is type \".concat(inspect(typeField.type), \".\"), [(_ifaceField$astNode = ifaceField.astNode) === null || _ifaceField$astNode === void 0 ? void 0 : _ifaceField$astNode.type, (_typeField$astNode = typeField.astNode) === null || _typeField$astNode === void 0 ? void 0 : _typeField$astNode.type]);\n    } // Assert each interface field arg is implemented.\n    var _iterator5 = _createForOfIteratorHelper(ifaceField.args),\n      _step5;\n    try {\n      var _loop = function _loop() {\n        var ifaceArg = _step5.value;\n        var argName = ifaceArg.name;\n        var typeArg = typeField.args.find(function (arg) {\n          return arg.name === argName;\n        }); // Assert interface field arg exists on object field.\n\n        if (!typeArg) {\n          context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) expected but \").concat(type.name, \".\").concat(fieldName, \" does not provide it.\"), [ifaceArg.astNode, typeField.astNode]);\n          return \"continue\";\n        } // Assert interface field arg type matches object field arg type.\n        // (invariant)\n        // TODO: change to contravariant?\n\n        if (!isEqualType(ifaceArg.type, typeArg.type)) {\n          context.reportError(\"Interface field argument \".concat(iface.name, \".\").concat(fieldName, \"(\").concat(argName, \":) \") + \"expects type \".concat(inspect(ifaceArg.type), \" but \") + \"\".concat(type.name, \".\").concat(fieldName, \"(\").concat(argName, \":) is type \") + \"\".concat(inspect(typeArg.type), \".\"), [(_ifaceArg$astNode = ifaceArg.astNode) === null || _ifaceArg$astNode === void 0 ? void 0 : _ifaceArg$astNode.type, (_typeArg$astNode = typeArg.astNode) === null || _typeArg$astNode === void 0 ? void 0 : _typeArg$astNode.type]);\n        } // TODO: validate default values?\n      };\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n        var _ret = _loop();\n        if (_ret === \"continue\") continue;\n      } // Assert additional arguments must not be required.\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    var _iterator6 = _createForOfIteratorHelper(typeField.args),\n      _step6;\n    try {\n      var _loop2 = function _loop2() {\n        var typeArg = _step6.value;\n        var argName = typeArg.name;\n        var ifaceArg = ifaceField.args.find(function (arg) {\n          return arg.name === argName;\n        });\n        if (!ifaceArg && isRequiredArgument(typeArg)) {\n          context.reportError(\"Object field \".concat(type.name, \".\").concat(fieldName, \" includes required argument \").concat(argName, \" that is missing from the Interface field \").concat(iface.name, \".\").concat(fieldName, \".\"), [typeArg.astNode, ifaceField.astNode]);\n        }\n      };\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        _loop2();\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  }\n}\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  var ifaceInterfaces = type.getInterfaces();\n  var _iterator7 = _createForOfIteratorHelper(iface.getInterfaces()),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var transitive = _step7.value;\n      if (!ifaceInterfaces.includes(transitive)) {\n        context.reportError(transitive === type ? \"Type \".concat(type.name, \" cannot implement \").concat(iface.name, \" because it would create a circular reference.\") : \"Type \".concat(type.name, \" must implement \").concat(transitive.name, \" because it is implemented by \").concat(iface.name, \".\"), [].concat(_toConsumableArray(getAllImplementsInterfaceNodes(iface, transitive)), _toConsumableArray(getAllImplementsInterfaceNodes(type, iface))));\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n}\nfunction validateUnionMembers(context, union) {\n  var memberTypes = union.getTypes();\n  if (memberTypes.length === 0) {\n    context.reportError(\"Union type \".concat(union.name, \" must define one or more member types.\"), [union.astNode].concat(_toConsumableArray(union.extensionASTNodes)));\n  }\n  var includedTypeNames = Object.create(null);\n  var _iterator8 = _createForOfIteratorHelper(memberTypes),\n    _step8;\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var memberType = _step8.value;\n      if (includedTypeNames[memberType.name]) {\n        context.reportError(\"Union type \".concat(union.name, \" can only include type \").concat(memberType.name, \" once.\"), getUnionMemberTypeNodes(union, memberType.name));\n        continue;\n      }\n      includedTypeNames[memberType.name] = true;\n      if (!isObjectType(memberType)) {\n        context.reportError(\"Union type \".concat(union.name, \" can only include Object types, \") + \"it cannot include \".concat(inspect(memberType), \".\"), getUnionMemberTypeNodes(union, String(memberType)));\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n}\nfunction validateEnumValues(context, enumType) {\n  var enumValues = enumType.getValues();\n  if (enumValues.length === 0) {\n    context.reportError(\"Enum type \".concat(enumType.name, \" must define one or more values.\"), [enumType.astNode].concat(_toConsumableArray(enumType.extensionASTNodes)));\n  }\n  var _iterator9 = _createForOfIteratorHelper(enumValues),\n    _step9;\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var enumValue = _step9.value;\n      // Ensure valid name.\n      validateName(context, enumValue);\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n}\nfunction validateInputFields(context, inputObj) {\n  var fields = Object.values(inputObj.getFields());\n  if (fields.length === 0) {\n    context.reportError(\"Input Object type \".concat(inputObj.name, \" must define one or more fields.\"), [inputObj.astNode].concat(_toConsumableArray(inputObj.extensionASTNodes)));\n  } // Ensure the arguments are valid\n\n  for (var _i4 = 0, _fields2 = fields; _i4 < _fields2.length; _i4++) {\n    var field = _fields2[_i4];\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n      context.reportError(\"The type of \".concat(inputObj.name, \".\").concat(field.name, \" must be Input Type \") + \"but got: \".concat(inspect(field.type), \".\"), (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0 ? void 0 : _field$astNode2.type);\n    }\n    if (isRequiredInputField(field) && field.deprecationReason != null) {\n      var _field$astNode3;\n      context.reportError(\"Required input field \".concat(inputObj.name, \".\").concat(field.name, \" cannot be deprecated.\"), [getDeprecatedDirectiveNode(field.astNode), (_field$astNode3 = field.astNode) === null || _field$astNode3 === void 0 ? void 0 : _field$astNode3.type]);\n    }\n  }\n}\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  var fieldPath = []; // Position in the type path\n\n  var fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    var fields = Object.values(inputObj.getFields());\n    for (var _i5 = 0, _fields3 = fields; _i5 < _fields3.length; _i5++) {\n      var field = _fields3[_i5];\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        var fieldType = field.type.ofType;\n        var cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          var cyclePath = fieldPath.slice(cycleIndex);\n          var pathStr = cyclePath.map(function (fieldObj) {\n            return fieldObj.name;\n          }).join('.');\n          context.reportError(\"Cannot reference Input Object \\\"\".concat(fieldType.name, \"\\\" within itself through a series of non-null fields: \\\"\").concat(pathStr, \"\\\".\"), cyclePath.map(function (fieldObj) {\n            return fieldObj.astNode;\n          }));\n        }\n        fieldPath.pop();\n      }\n    }\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  var astNode = type.astNode,\n    extensionASTNodes = type.extensionASTNodes;\n  var nodes = astNode != null ? [astNode].concat(_toConsumableArray(extensionASTNodes)) : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes.flatMap(function (typeNode) {\n    var _typeNode$interfaces;\n    return (/* c8 ignore next */\n      (_typeNode$interfaces = typeNode.interfaces) !== null && _typeNode$interfaces !== void 0 ? _typeNode$interfaces : []\n    );\n  }).filter(function (ifaceNode) {\n    return ifaceNode.name.value === iface.name;\n  });\n}\nfunction getUnionMemberTypeNodes(union, typeName) {\n  var astNode = union.astNode,\n    extensionASTNodes = union.extensionASTNodes;\n  var nodes = astNode != null ? [astNode].concat(_toConsumableArray(extensionASTNodes)) : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes.flatMap(function (unionNode) {\n    var _unionNode$types;\n    return (/* c8 ignore next */\n      (_unionNode$types = unionNode.types) !== null && _unionNode$types !== void 0 ? _unionNode$types : []\n    );\n  }).filter(function (typeNode) {\n    return typeNode.name.value === typeName;\n  });\n}\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n  return definitionNode === null || definitionNode === void 0 ? void 0 : (_definitionNode$direc = definitionNode.directives) === null || _definitionNode$direc === void 0 ? void 0 : _definitionNode$direc.find(function (node) {\n    return node.name.value === GraphQLDeprecatedDirective.name;\n  });\n}","map":{"version":3,"names":["inspect","GraphQLError","OperationTypeNode","isEqualType","isTypeSubTypeOf","isEnumType","isInputObjectType","isInputType","isInterfaceType","isNamedType","isNonNullType","isObjectType","isOutputType","isRequiredArgument","isRequiredInputField","isUnionType","GraphQLDeprecatedDirective","isDirective","isIntrospectionType","assertSchema","validateSchema","schema","__validationErrors","context","SchemaValidationContext","validateRootTypes","validateDirectives","validateTypes","errors","getErrors","assertValidSchema","length","Error","map","error","message","join","_errors","nodes","_nodes","Array","isArray","filter","Boolean","push","queryType","getQueryType","reportError","astNode","_getOperationTypeNode","getOperationTypeNode","QUERY","mutationType","getMutationType","_getOperationTypeNode2","MUTATION","subscriptionType","getSubscriptionType","_getOperationTypeNode3","SUBSCRIPTION","operation","_flatMap$find","extensionASTNodes","flatMap","schemaNode","_schemaNode$operation","operationTypes","find","operationNode","type","getDirectives","directive","validateName","args","arg","name","deprecationReason","_arg$astNode","getDeprecatedDirectiveNode","node","startsWith","validateInputObjectCircularRefs","createInputObjectCircularRefsValidator","typeMap","getTypeMap","Object","values","validateFields","validateInterfaces","validateUnionMembers","validateEnumValues","validateInputFields","fields","getFields","field","_field$astNode","argName","_arg$astNode2","_arg$astNode3","ifaceTypeNames","create","getInterfaces","iface","getAllImplementsInterfaceNodes","validateTypeImplementsAncestors","validateTypeImplementsInterface","typeFieldMap","ifaceField","fieldName","typeField","_ifaceField$astNode","_typeField$astNode","ifaceArg","typeArg","_ifaceArg$astNode","_typeArg$astNode","ifaceInterfaces","transitive","includes","union","memberTypes","getTypes","includedTypeNames","memberType","getUnionMemberTypeNodes","String","enumType","enumValues","getValues","enumValue","inputObj","_field$astNode2","_field$astNode3","visitedTypes","fieldPath","fieldPathIndexByTypeName","detectCycleRecursive","ofType","fieldType","cycleIndex","undefined","cyclePath","slice","pathStr","fieldObj","pop","typeNode","_typeNode$interfaces","interfaces","ifaceNode","value","typeName","unionNode","_unionNode$types","types","definitionNode","_definitionNode$direc","directives"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/type/validate.mjs"],"sourcesContent":["import { inspect } from '../jsutils/inspect.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { OperationTypeNode } from '../language/ast.mjs';\nimport { isEqualType, isTypeSubTypeOf } from '../utilities/typeComparators.mjs';\nimport {\n  isEnumType,\n  isInputObjectType,\n  isInputType,\n  isInterfaceType,\n  isNamedType,\n  isNonNullType,\n  isObjectType,\n  isOutputType,\n  isRequiredArgument,\n  isRequiredInputField,\n  isUnionType,\n} from './definition.mjs';\nimport { GraphQLDeprecatedDirective, isDirective } from './directives.mjs';\nimport { isIntrospectionType } from './introspection.mjs';\nimport { assertSchema } from './schema.mjs';\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map((error) => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this._errors.push(\n      new GraphQLError(message, {\n        nodes: _nodes,\n      }),\n    );\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    var _getOperationTypeNode;\n\n    context.reportError(\n      `Query root type must be Object type, it cannot be ${inspect(\n        queryType,\n      )}.`,\n      (_getOperationTypeNode = getOperationTypeNode(\n        schema,\n        OperationTypeNode.QUERY,\n      )) !== null && _getOperationTypeNode !== void 0\n        ? _getOperationTypeNode\n        : queryType.astNode,\n    );\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    var _getOperationTypeNode2;\n\n    context.reportError(\n      'Mutation root type must be Object type if provided, it cannot be ' +\n        `${inspect(mutationType)}.`,\n      (_getOperationTypeNode2 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.MUTATION,\n      )) !== null && _getOperationTypeNode2 !== void 0\n        ? _getOperationTypeNode2\n        : mutationType.astNode,\n    );\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    var _getOperationTypeNode3;\n\n    context.reportError(\n      'Subscription root type must be Object type if provided, it cannot be ' +\n        `${inspect(subscriptionType)}.`,\n      (_getOperationTypeNode3 = getOperationTypeNode(\n        schema,\n        OperationTypeNode.SUBSCRIPTION,\n      )) !== null && _getOperationTypeNode3 !== void 0\n        ? _getOperationTypeNode3\n        : subscriptionType.astNode,\n    );\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  var _flatMap$find;\n\n  return (_flatMap$find = [schema.astNode, ...schema.extensionASTNodes]\n    .flatMap(\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n      (schemaNode) => {\n        var _schemaNode$operation;\n\n        return (\n          /* c8 ignore next */\n          (_schemaNode$operation =\n            schemaNode === null || schemaNode === void 0\n              ? void 0\n              : schemaNode.operationTypes) !== null &&\n            _schemaNode$operation !== void 0\n            ? _schemaNode$operation\n            : []\n        );\n      },\n    )\n    .find((operationNode) => operationNode.operation === operation)) === null ||\n    _flatMap$find === void 0\n    ? void 0\n    : _flatMap$find.type;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(\n        `Expected directive but got: ${inspect(directive)}.`,\n        directive === null || directive === void 0 ? void 0 : directive.astNode,\n      );\n      continue;\n    } // Ensure they are named correctly.\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(\n          `The type of @${directive.name}(${arg.name}:) must be Input Type ` +\n            `but got: ${inspect(arg.type)}.`,\n          arg.astNode,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode;\n\n        context.reportError(\n          `Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode = arg.astNode) === null || _arg$astNode === void 0\n              ? void 0\n              : _arg$astNode.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  if (node.name.startsWith('__')) {\n    context.reportError(\n      `Name \"${node.name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`,\n      node.astNode,\n    );\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs =\n    createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of Object.values(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(\n        `Expected GraphQL named type but got: ${inspect(type)}.`,\n        type.astNode,\n      );\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = Object.values(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, [\n      type.astNode,\n      ...type.extensionASTNodes,\n    ]);\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      var _field$astNode;\n\n      context.reportError(\n        `The type of ${type.name}.${field.name} must be Output Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode = field.astNode) === null || _field$astNode === void 0\n          ? void 0\n          : _field$astNode.type,\n      );\n    } // Ensure the arguments are valid\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        var _arg$astNode2;\n\n        context.reportError(\n          `The type of ${type.name}.${field.name}(${argName}:) must be Input ` +\n            `Type but got: ${inspect(arg.type)}.`,\n          (_arg$astNode2 = arg.astNode) === null || _arg$astNode2 === void 0\n            ? void 0\n            : _arg$astNode2.type,\n        );\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        var _arg$astNode3;\n\n        context.reportError(\n          `Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`,\n          [\n            getDeprecatedDirectiveNode(arg.astNode),\n            (_arg$astNode3 = arg.astNode) === null || _arg$astNode3 === void 0\n              ? void 0\n              : _arg$astNode3.type,\n          ],\n        );\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!isInterfaceType(iface)) {\n      context.reportError(\n        `Type ${inspect(type)} must only implement Interface types, ` +\n          `it cannot implement ${inspect(iface)}.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(\n        `Type ${type.name} cannot implement itself because it would create a circular reference.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(\n        `Type ${type.name} can only implement ${iface.name} once.`,\n        getAllImplementsInterfaceNodes(type, iface),\n      );\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of Object.values(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`,\n        [ifaceField.astNode, type.astNode, ...type.extensionASTNodes],\n      );\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      var _ifaceField$astNode, _typeField$astNode;\n\n      context.reportError(\n        `Interface field ${iface.name}.${fieldName} expects type ` +\n          `${inspect(ifaceField.type)} but ${type.name}.${fieldName} ` +\n          `is type ${inspect(typeField.type)}.`,\n        [\n          (_ifaceField$astNode = ifaceField.astNode) === null ||\n          _ifaceField$astNode === void 0\n            ? void 0\n            : _ifaceField$astNode.type,\n          (_typeField$astNode = typeField.astNode) === null ||\n          _typeField$astNode === void 0\n            ? void 0\n            : _typeField$astNode.type,\n        ],\n      );\n    } // Assert each interface field arg is implemented.\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find((arg) => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`,\n          [ifaceArg.astNode, typeField.astNode],\n        );\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        var _ifaceArg$astNode, _typeArg$astNode;\n\n        context.reportError(\n          `Interface field argument ${iface.name}.${fieldName}(${argName}:) ` +\n            `expects type ${inspect(ifaceArg.type)} but ` +\n            `${type.name}.${fieldName}(${argName}:) is type ` +\n            `${inspect(typeArg.type)}.`,\n          [\n            (_ifaceArg$astNode = ifaceArg.astNode) === null ||\n            _ifaceArg$astNode === void 0\n              ? void 0\n              : _ifaceArg$astNode.type,\n            (_typeArg$astNode = typeArg.astNode) === null ||\n            _typeArg$astNode === void 0\n              ? void 0\n              : _typeArg$astNode.type,\n          ],\n        );\n      } // TODO: validate default values?\n    } // Assert additional arguments must not be required.\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find((arg) => arg.name === argName);\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(\n          `Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`,\n          [typeArg.astNode, ifaceField.astNode],\n        );\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (!ifaceInterfaces.includes(transitive)) {\n      context.reportError(\n        transitive === type\n          ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.`\n          : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`,\n        [\n          ...getAllImplementsInterfaceNodes(iface, transitive),\n          ...getAllImplementsInterfaceNodes(type, iface),\n        ],\n      );\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(\n      `Union type ${union.name} must define one or more member types.`,\n      [union.astNode, ...union.extensionASTNodes],\n    );\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(\n        `Union type ${union.name} can only include type ${memberType.name} once.`,\n        getUnionMemberTypeNodes(union, memberType.name),\n      );\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(\n        `Union type ${union.name} can only include Object types, ` +\n          `it cannot include ${inspect(memberType)}.`,\n        getUnionMemberTypeNodes(union, String(memberType)),\n      );\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(\n      `Enum type ${enumType.name} must define one or more values.`,\n      [enumType.astNode, ...enumType.extensionASTNodes],\n    );\n  }\n\n  for (const enumValue of enumValues) {\n    // Ensure valid name.\n    validateName(context, enumValue);\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = Object.values(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(\n      `Input Object type ${inputObj.name} must define one or more fields.`,\n      [inputObj.astNode, ...inputObj.extensionASTNodes],\n    );\n  } // Ensure the arguments are valid\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      var _field$astNode2;\n\n      context.reportError(\n        `The type of ${inputObj.name}.${field.name} must be Input Type ` +\n          `but got: ${inspect(field.type)}.`,\n        (_field$astNode2 = field.astNode) === null || _field$astNode2 === void 0\n          ? void 0\n          : _field$astNode2.type,\n      );\n    }\n\n    if (isRequiredInputField(field) && field.deprecationReason != null) {\n      var _field$astNode3;\n\n      context.reportError(\n        `Required input field ${inputObj.name}.${field.name} cannot be deprecated.`,\n        [\n          getDeprecatedDirectiveNode(field.astNode),\n          (_field$astNode3 = field.astNode) === null ||\n          _field$astNode3 === void 0\n            ? void 0\n            : _field$astNode3.type,\n        ],\n      );\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = Object.values(inputObj.getFields());\n\n    for (const field of fields) {\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map((fieldObj) => fieldObj.name).join('.');\n          context.reportError(\n            `Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`,\n            cyclePath.map((fieldObj) => fieldObj.astNode),\n          );\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  const { astNode, extensionASTNodes } = type;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((typeNode) => {\n      var _typeNode$interfaces;\n\n      return (\n        /* c8 ignore next */\n        (_typeNode$interfaces = typeNode.interfaces) !== null &&\n          _typeNode$interfaces !== void 0\n          ? _typeNode$interfaces\n          : []\n      );\n    })\n    .filter((ifaceNode) => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  const { astNode, extensionASTNodes } = union;\n  const nodes =\n    astNode != null ? [astNode, ...extensionASTNodes] : extensionASTNodes; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n  return nodes\n    .flatMap((unionNode) => {\n      var _unionNode$types;\n\n      return (\n        /* c8 ignore next */\n        (_unionNode$types = unionNode.types) !== null &&\n          _unionNode$types !== void 0\n          ? _unionNode$types\n          : []\n      );\n    })\n    .filter((typeNode) => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  var _definitionNode$direc;\n\n  return definitionNode === null || definitionNode === void 0\n    ? void 0\n    : (_definitionNode$direc = definitionNode.directives) === null ||\n      _definitionNode$direc === void 0\n    ? void 0\n    : _definitionNode$direc.find(\n        (node) => node.name.value === GraphQLDeprecatedDirective.name,\n      );\n}\n"],"mappings":";;;;AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,iBAAiB,QAAQ,qBAAqB;AACvD,SAASC,WAAW,EAAEC,eAAe,QAAQ,kCAAkC;AAC/E,SACEC,UAAU,EACVC,iBAAiB,EACjBC,WAAW,EACXC,eAAe,EACfC,WAAW,EACXC,aAAa,EACbC,YAAY,EACZC,YAAY,EACZC,kBAAkB,EAClBC,oBAAoB,EACpBC,WAAW,QACN,kBAAkB;AACzB,SAASC,0BAA0B,EAAEC,WAAW,QAAQ,kBAAkB;AAC1E,SAASC,mBAAmB,QAAQ,qBAAqB;AACzD,SAASC,YAAY,QAAQ,cAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAc,CAACC,MAAM,EAAE;EACrC;EACAF,YAAY,CAACE,MAAM,CAAC,CAAC,CAAC;;EAEtB,IAAIA,MAAM,CAACC,kBAAkB,EAAE;IAC7B,OAAOD,MAAM,CAACC,kBAAkB;EAClC,CAAC,CAAC;;EAEF,IAAMC,OAAO,GAAG,IAAIC,uBAAuB,CAACH,MAAM,CAAC;EACnDI,iBAAiB,CAACF,OAAO,CAAC;EAC1BG,kBAAkB,CAACH,OAAO,CAAC;EAC3BI,aAAa,CAACJ,OAAO,CAAC,CAAC,CAAC;EACxB;;EAEA,IAAMK,MAAM,GAAGL,OAAO,CAACM,SAAS,EAAE;EAClCR,MAAM,CAACC,kBAAkB,GAAGM,MAAM;EAClC,OAAOA,MAAM;AACf;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,iBAAiB,CAACT,MAAM,EAAE;EACxC,IAAMO,MAAM,GAAGR,cAAc,CAACC,MAAM,CAAC;EAErC,IAAIO,MAAM,CAACG,MAAM,KAAK,CAAC,EAAE;IACvB,MAAM,IAAIC,KAAK,CAACJ,MAAM,CAACK,GAAG,CAAC,UAACC,KAAK;MAAA,OAAKA,KAAK,CAACC,OAAO;IAAA,EAAC,CAACC,IAAI,CAAC,MAAM,CAAC,CAAC;EACpE;AACF;AAAC,IAEKZ,uBAAuB;EAC3B,iCAAYH,MAAM,EAAE;IAAA;IAClB,IAAI,CAACgB,OAAO,GAAG,EAAE;IACjB,IAAI,CAAChB,MAAM,GAAGA,MAAM;EACtB;EAAC;IAAA;IAAA,OAED,qBAAYc,OAAO,EAAEG,KAAK,EAAE;MAC1B,IAAMC,MAAM,GAAGC,KAAK,CAACC,OAAO,CAACH,KAAK,CAAC,GAAGA,KAAK,CAACI,MAAM,CAACC,OAAO,CAAC,GAAGL,KAAK;MAEnE,IAAI,CAACD,OAAO,CAACO,IAAI,CACf,IAAI3C,YAAY,CAACkC,OAAO,EAAE;QACxBG,KAAK,EAAEC;MACT,CAAC,CAAC,CACH;IACH;EAAC;IAAA;IAAA,OAED,qBAAY;MACV,OAAO,IAAI,CAACF,OAAO;IACrB;EAAC;EAAA;AAAA;AAGH,SAASZ,iBAAiB,CAACF,OAAO,EAAE;EAClC,IAAMF,MAAM,GAAGE,OAAO,CAACF,MAAM;EAC7B,IAAMwB,SAAS,GAAGxB,MAAM,CAACyB,YAAY,EAAE;EAEvC,IAAI,CAACD,SAAS,EAAE;IACdtB,OAAO,CAACwB,WAAW,CAAC,mCAAmC,EAAE1B,MAAM,CAAC2B,OAAO,CAAC;EAC1E,CAAC,MAAM,IAAI,CAACrC,YAAY,CAACkC,SAAS,CAAC,EAAE;IACnC,IAAII,qBAAqB;IAEzB1B,OAAO,CAACwB,WAAW,6DACoC/C,OAAO,CAC1D6C,SAAS,CACV,QACD,CAACI,qBAAqB,GAAGC,oBAAoB,CAC3C7B,MAAM,EACNnB,iBAAiB,CAACiD,KAAK,CACxB,MAAM,IAAI,IAAIF,qBAAqB,KAAK,KAAK,CAAC,GAC3CA,qBAAqB,GACrBJ,SAAS,CAACG,OAAO,CACtB;EACH;EAEA,IAAMI,YAAY,GAAG/B,MAAM,CAACgC,eAAe,EAAE;EAE7C,IAAID,YAAY,IAAI,CAACzC,YAAY,CAACyC,YAAY,CAAC,EAAE;IAC/C,IAAIE,sBAAsB;IAE1B/B,OAAO,CAACwB,WAAW,CACjB,mEAAmE,aAC9D/C,OAAO,CAACoD,YAAY,CAAC,MAAG,EAC7B,CAACE,sBAAsB,GAAGJ,oBAAoB,CAC5C7B,MAAM,EACNnB,iBAAiB,CAACqD,QAAQ,CAC3B,MAAM,IAAI,IAAID,sBAAsB,KAAK,KAAK,CAAC,GAC5CA,sBAAsB,GACtBF,YAAY,CAACJ,OAAO,CACzB;EACH;EAEA,IAAMQ,gBAAgB,GAAGnC,MAAM,CAACoC,mBAAmB,EAAE;EAErD,IAAID,gBAAgB,IAAI,CAAC7C,YAAY,CAAC6C,gBAAgB,CAAC,EAAE;IACvD,IAAIE,sBAAsB;IAE1BnC,OAAO,CAACwB,WAAW,CACjB,uEAAuE,aAClE/C,OAAO,CAACwD,gBAAgB,CAAC,MAAG,EACjC,CAACE,sBAAsB,GAAGR,oBAAoB,CAC5C7B,MAAM,EACNnB,iBAAiB,CAACyD,YAAY,CAC/B,MAAM,IAAI,IAAID,sBAAsB,KAAK,KAAK,CAAC,GAC5CA,sBAAsB,GACtBF,gBAAgB,CAACR,OAAO,CAC7B;EACH;AACF;AAEA,SAASE,oBAAoB,CAAC7B,MAAM,EAAEuC,SAAS,EAAE;EAC/C,IAAIC,aAAa;EAEjB,OAAO,CAACA,aAAa,GAAG,CAACxC,MAAM,CAAC2B,OAAO,4BAAK3B,MAAM,CAACyC,iBAAiB,GACjEC,OAAO;EACN;EACA,UAACC,UAAU,EAAK;IACd,IAAIC,qBAAqB;IAEzB,OACE;MACA,CAACA,qBAAqB,GACpBD,UAAU,KAAK,IAAI,IAAIA,UAAU,KAAK,KAAK,CAAC,GACxC,KAAK,CAAC,GACNA,UAAU,CAACE,cAAc,MAAM,IAAI,IACvCD,qBAAqB,KAAK,KAAK,CAAC,GAC9BA,qBAAqB,GACrB;IAAE;EAEV,CAAC,CACF,CACAE,IAAI,CAAC,UAACC,aAAa;IAAA,OAAKA,aAAa,CAACR,SAAS,KAAKA,SAAS;EAAA,EAAC,MAAM,IAAI,IACzEC,aAAa,KAAK,KAAK,CAAC,GACtB,KAAK,CAAC,GACNA,aAAa,CAACQ,IAAI;AACxB;AAEA,SAAS3C,kBAAkB,CAACH,OAAO,EAAE;EAAA,2CACXA,OAAO,CAACF,MAAM,CAACiD,aAAa,EAAE;IAAA;EAAA;IAAtD,oDAAwD;MAAA,IAA7CC,SAAS;MAClB;MACA,IAAI,CAACtD,WAAW,CAACsD,SAAS,CAAC,EAAE;QAC3BhD,OAAO,CAACwB,WAAW,uCACc/C,OAAO,CAACuE,SAAS,CAAC,QACjDA,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACvB,OAAO,CACxE;QACD;MACF,CAAC,CAAC;;MAEFwB,YAAY,CAACjD,OAAO,EAAEgD,SAAS,CAAC,CAAC,CAAC;MAClC;MAAA,4CAEkBA,SAAS,CAACE,IAAI;QAAA;MAAA;QAAhC,uDAAkC;UAAA,IAAvBC,GAAG;UACZ;UACAF,YAAY,CAACjD,OAAO,EAAEmD,GAAG,CAAC,CAAC,CAAC;;UAE5B,IAAI,CAACnE,WAAW,CAACmE,GAAG,CAACL,IAAI,CAAC,EAAE;YAC1B9C,OAAO,CAACwB,WAAW,CACjB,uBAAgBwB,SAAS,CAACI,IAAI,cAAID,GAAG,CAACC,IAAI,iDAC5B3E,OAAO,CAAC0E,GAAG,CAACL,IAAI,CAAC,MAAG,EAClCK,GAAG,CAAC1B,OAAO,CACZ;UACH;UAEA,IAAInC,kBAAkB,CAAC6D,GAAG,CAAC,IAAIA,GAAG,CAACE,iBAAiB,IAAI,IAAI,EAAE;YAC5D,IAAIC,YAAY;YAEhBtD,OAAO,CAACwB,WAAW,8BACKwB,SAAS,CAACI,IAAI,cAAID,GAAG,CAACC,IAAI,+BAChD,CACEG,0BAA0B,CAACJ,GAAG,CAAC1B,OAAO,CAAC,EACvC,CAAC6B,YAAY,GAAGH,GAAG,CAAC1B,OAAO,MAAM,IAAI,IAAI6B,YAAY,KAAK,KAAK,CAAC,GAC5D,KAAK,CAAC,GACNA,YAAY,CAACR,IAAI,CACtB,CACF;UACH;QACF;MAAC;QAAA;MAAA;QAAA;MAAA;IACH;EAAC;IAAA;EAAA;IAAA;EAAA;AACH;AAEA,SAASG,YAAY,CAACjD,OAAO,EAAEwD,IAAI,EAAE;EACnC;EACA,IAAIA,IAAI,CAACJ,IAAI,CAACK,UAAU,CAAC,IAAI,CAAC,EAAE;IAC9BzD,OAAO,CAACwB,WAAW,kBACRgC,IAAI,CAACJ,IAAI,iFAClBI,IAAI,CAAC/B,OAAO,CACb;EACH;AACF;AAEA,SAASrB,aAAa,CAACJ,OAAO,EAAE;EAC9B,IAAM0D,+BAA+B,GACnCC,sCAAsC,CAAC3D,OAAO,CAAC;EACjD,IAAM4D,OAAO,GAAG5D,OAAO,CAACF,MAAM,CAAC+D,UAAU,EAAE;EAE3C,kCAAmBC,MAAM,CAACC,MAAM,CAACH,OAAO,CAAC,oCAAE;IAAtC,IAAMd,IAAI;IACb;IACA,IAAI,CAAC5D,WAAW,CAAC4D,IAAI,CAAC,EAAE;MACtB9C,OAAO,CAACwB,WAAW,gDACuB/C,OAAO,CAACqE,IAAI,CAAC,QACrDA,IAAI,CAACrB,OAAO,CACb;MACD;IACF,CAAC,CAAC;;IAEF,IAAI,CAAC9B,mBAAmB,CAACmD,IAAI,CAAC,EAAE;MAC9BG,YAAY,CAACjD,OAAO,EAAE8C,IAAI,CAAC;IAC7B;IAEA,IAAI1D,YAAY,CAAC0D,IAAI,CAAC,EAAE;MACtB;MACAkB,cAAc,CAAChE,OAAO,EAAE8C,IAAI,CAAC,CAAC,CAAC;;MAE/BmB,kBAAkB,CAACjE,OAAO,EAAE8C,IAAI,CAAC;IACnC,CAAC,MAAM,IAAI7D,eAAe,CAAC6D,IAAI,CAAC,EAAE;MAChC;MACAkB,cAAc,CAAChE,OAAO,EAAE8C,IAAI,CAAC,CAAC,CAAC;;MAE/BmB,kBAAkB,CAACjE,OAAO,EAAE8C,IAAI,CAAC;IACnC,CAAC,MAAM,IAAItD,WAAW,CAACsD,IAAI,CAAC,EAAE;MAC5B;MACAoB,oBAAoB,CAAClE,OAAO,EAAE8C,IAAI,CAAC;IACrC,CAAC,MAAM,IAAIhE,UAAU,CAACgE,IAAI,CAAC,EAAE;MAC3B;MACAqB,kBAAkB,CAACnE,OAAO,EAAE8C,IAAI,CAAC;IACnC,CAAC,MAAM,IAAI/D,iBAAiB,CAAC+D,IAAI,CAAC,EAAE;MAClC;MACAsB,mBAAmB,CAACpE,OAAO,EAAE8C,IAAI,CAAC,CAAC,CAAC;;MAEpCY,+BAA+B,CAACZ,IAAI,CAAC;IACvC;EACF;AACF;AAEA,SAASkB,cAAc,CAAChE,OAAO,EAAE8C,IAAI,EAAE;EACrC,IAAMuB,MAAM,GAAGP,MAAM,CAACC,MAAM,CAACjB,IAAI,CAACwB,SAAS,EAAE,CAAC,CAAC,CAAC;;EAEhD,IAAID,MAAM,CAAC7D,MAAM,KAAK,CAAC,EAAE;IACvBR,OAAO,CAACwB,WAAW,gBAASsB,IAAI,CAACM,IAAI,wCACnCN,IAAI,CAACrB,OAAO,4BACTqB,IAAI,CAACP,iBAAiB,GACzB;EACJ;EAEA,4BAAoB8B,MAAM,+BAAE;IAAvB,IAAME,KAAK;IACd;IACAtB,YAAY,CAACjD,OAAO,EAAEuE,KAAK,CAAC,CAAC,CAAC;;IAE9B,IAAI,CAAClF,YAAY,CAACkF,KAAK,CAACzB,IAAI,CAAC,EAAE;MAC7B,IAAI0B,cAAc;MAElBxE,OAAO,CAACwB,WAAW,CACjB,sBAAesB,IAAI,CAACM,IAAI,cAAImB,KAAK,CAACnB,IAAI,gDACxB3E,OAAO,CAAC8F,KAAK,CAACzB,IAAI,CAAC,MAAG,EACpC,CAAC0B,cAAc,GAAGD,KAAK,CAAC9C,OAAO,MAAM,IAAI,IAAI+C,cAAc,KAAK,KAAK,CAAC,GAClE,KAAK,CAAC,GACNA,cAAc,CAAC1B,IAAI,CACxB;IACH,CAAC,CAAC;IAAA,4CAEgByB,KAAK,CAACrB,IAAI;MAAA;IAAA;MAA5B,uDAA8B;QAAA,IAAnBC,GAAG;QACZ,IAAMsB,OAAO,GAAGtB,GAAG,CAACC,IAAI,CAAC,CAAC;;QAE1BH,YAAY,CAACjD,OAAO,EAAEmD,GAAG,CAAC,CAAC,CAAC;;QAE5B,IAAI,CAACnE,WAAW,CAACmE,GAAG,CAACL,IAAI,CAAC,EAAE;UAC1B,IAAI4B,aAAa;UAEjB1E,OAAO,CAACwB,WAAW,CACjB,sBAAesB,IAAI,CAACM,IAAI,cAAImB,KAAK,CAACnB,IAAI,cAAIqB,OAAO,iDAC9BhG,OAAO,CAAC0E,GAAG,CAACL,IAAI,CAAC,MAAG,EACvC,CAAC4B,aAAa,GAAGvB,GAAG,CAAC1B,OAAO,MAAM,IAAI,IAAIiD,aAAa,KAAK,KAAK,CAAC,GAC9D,KAAK,CAAC,GACNA,aAAa,CAAC5B,IAAI,CACvB;QACH;QAEA,IAAIxD,kBAAkB,CAAC6D,GAAG,CAAC,IAAIA,GAAG,CAACE,iBAAiB,IAAI,IAAI,EAAE;UAC5D,IAAIsB,aAAa;UAEjB3E,OAAO,CAACwB,WAAW,6BACIsB,IAAI,CAACM,IAAI,cAAImB,KAAK,CAACnB,IAAI,cAAIqB,OAAO,+BACvD,CACElB,0BAA0B,CAACJ,GAAG,CAAC1B,OAAO,CAAC,EACvC,CAACkD,aAAa,GAAGxB,GAAG,CAAC1B,OAAO,MAAM,IAAI,IAAIkD,aAAa,KAAK,KAAK,CAAC,GAC9D,KAAK,CAAC,GACNA,aAAa,CAAC7B,IAAI,CACvB,CACF;QACH;MACF;IAAC;MAAA;IAAA;MAAA;IAAA;EACH;AACF;AAEA,SAASmB,kBAAkB,CAACjE,OAAO,EAAE8C,IAAI,EAAE;EACzC,IAAM8B,cAAc,GAAGd,MAAM,CAACe,MAAM,CAAC,IAAI,CAAC;EAAC,4CAEvB/B,IAAI,CAACgC,aAAa,EAAE;IAAA;EAAA;IAAxC,uDAA0C;MAAA,IAA/BC,KAAK;MACd,IAAI,CAAC9F,eAAe,CAAC8F,KAAK,CAAC,EAAE;QAC3B/E,OAAO,CAACwB,WAAW,CACjB,eAAQ/C,OAAO,CAACqE,IAAI,CAAC,4EACIrE,OAAO,CAACsG,KAAK,CAAC,MAAG,EAC1CC,8BAA8B,CAAClC,IAAI,EAAEiC,KAAK,CAAC,CAC5C;QACD;MACF;MAEA,IAAIjC,IAAI,KAAKiC,KAAK,EAAE;QAClB/E,OAAO,CAACwB,WAAW,gBACTsB,IAAI,CAACM,IAAI,6EACjB4B,8BAA8B,CAAClC,IAAI,EAAEiC,KAAK,CAAC,CAC5C;QACD;MACF;MAEA,IAAIH,cAAc,CAACG,KAAK,CAAC3B,IAAI,CAAC,EAAE;QAC9BpD,OAAO,CAACwB,WAAW,gBACTsB,IAAI,CAACM,IAAI,iCAAuB2B,KAAK,CAAC3B,IAAI,aAClD4B,8BAA8B,CAAClC,IAAI,EAAEiC,KAAK,CAAC,CAC5C;QACD;MACF;MAEAH,cAAc,CAACG,KAAK,CAAC3B,IAAI,CAAC,GAAG,IAAI;MACjC6B,+BAA+B,CAACjF,OAAO,EAAE8C,IAAI,EAAEiC,KAAK,CAAC;MACrDG,+BAA+B,CAAClF,OAAO,EAAE8C,IAAI,EAAEiC,KAAK,CAAC;IACvD;EAAC;IAAA;EAAA;IAAA;EAAA;AACH;AAEA,SAASG,+BAA+B,CAAClF,OAAO,EAAE8C,IAAI,EAAEiC,KAAK,EAAE;EAC7D,IAAMI,YAAY,GAAGrC,IAAI,CAACwB,SAAS,EAAE,CAAC,CAAC;;EAEvC,oCAAyBR,MAAM,CAACC,MAAM,CAACgB,KAAK,CAACT,SAAS,EAAE,CAAC,uCAAE;IAAtD,IAAMc,UAAU;IACnB,IAAMC,SAAS,GAAGD,UAAU,CAAChC,IAAI;IACjC,IAAMkC,SAAS,GAAGH,YAAY,CAACE,SAAS,CAAC,CAAC,CAAC;;IAE3C,IAAI,CAACC,SAAS,EAAE;MACdtF,OAAO,CAACwB,WAAW,2BACEuD,KAAK,CAAC3B,IAAI,cAAIiC,SAAS,2BAAiBvC,IAAI,CAACM,IAAI,6BACnEgC,UAAU,CAAC3D,OAAO,EAAEqB,IAAI,CAACrB,OAAO,4BAAKqB,IAAI,CAACP,iBAAiB,GAC7D;MACD;IACF,CAAC,CAAC;IACF;;IAEA,IAAI,CAAC1D,eAAe,CAACmB,OAAO,CAACF,MAAM,EAAEwF,SAAS,CAACxC,IAAI,EAAEsC,UAAU,CAACtC,IAAI,CAAC,EAAE;MACrE,IAAIyC,mBAAmB,EAAEC,kBAAkB;MAE3CxF,OAAO,CAACwB,WAAW,CACjB,0BAAmBuD,KAAK,CAAC3B,IAAI,cAAIiC,SAAS,gCACrC5G,OAAO,CAAC2G,UAAU,CAACtC,IAAI,CAAC,kBAAQA,IAAI,CAACM,IAAI,cAAIiC,SAAS,MAAG,qBACjD5G,OAAO,CAAC6G,SAAS,CAACxC,IAAI,CAAC,MAAG,EACvC,CACE,CAACyC,mBAAmB,GAAGH,UAAU,CAAC3D,OAAO,MAAM,IAAI,IACnD8D,mBAAmB,KAAK,KAAK,CAAC,GAC1B,KAAK,CAAC,GACNA,mBAAmB,CAACzC,IAAI,EAC5B,CAAC0C,kBAAkB,GAAGF,SAAS,CAAC7D,OAAO,MAAM,IAAI,IACjD+D,kBAAkB,KAAK,KAAK,CAAC,GACzB,KAAK,CAAC,GACNA,kBAAkB,CAAC1C,IAAI,CAC5B,CACF;IACH,CAAC,CAAC;IAAA,4CAEqBsC,UAAU,CAAClC,IAAI;MAAA;IAAA;MAAA;QAAA,IAA3BuC,QAAQ;QACjB,IAAMhB,OAAO,GAAGgB,QAAQ,CAACrC,IAAI;QAC7B,IAAMsC,OAAO,GAAGJ,SAAS,CAACpC,IAAI,CAACN,IAAI,CAAC,UAACO,GAAG;UAAA,OAAKA,GAAG,CAACC,IAAI,KAAKqB,OAAO;QAAA,EAAC,CAAC,CAAC;;QAEpE,IAAI,CAACiB,OAAO,EAAE;UACZ1F,OAAO,CAACwB,WAAW,oCACWuD,KAAK,CAAC3B,IAAI,cAAIiC,SAAS,cAAIZ,OAAO,6BAAmB3B,IAAI,CAACM,IAAI,cAAIiC,SAAS,4BACvG,CAACI,QAAQ,CAAChE,OAAO,EAAE6D,SAAS,CAAC7D,OAAO,CAAC,CACtC;UACD;QACF,CAAC,CAAC;QACF;QACA;;QAEA,IAAI,CAAC7C,WAAW,CAAC6G,QAAQ,CAAC3C,IAAI,EAAE4C,OAAO,CAAC5C,IAAI,CAAC,EAAE;UAG7C9C,OAAO,CAACwB,WAAW,CACjB,mCAA4BuD,KAAK,CAAC3B,IAAI,cAAIiC,SAAS,cAAIZ,OAAO,kCAC5ChG,OAAO,CAACgH,QAAQ,CAAC3C,IAAI,CAAC,UAAO,aAC1CA,IAAI,CAACM,IAAI,cAAIiC,SAAS,cAAIZ,OAAO,gBAAa,aAC9ChG,OAAO,CAACiH,OAAO,CAAC5C,IAAI,CAAC,MAAG,EAC7B,CACE,CAAC6C,iBAAiB,GAAGF,QAAQ,CAAChE,OAAO,MAAM,IAAI,IAC/CkE,iBAAiB,KAAK,KAAK,CAAC,GACxB,KAAK,CAAC,GACNA,iBAAiB,CAAC7C,IAAI,EAC1B,CAAC8C,gBAAgB,GAAGF,OAAO,CAACjE,OAAO,MAAM,IAAI,IAC7CmE,gBAAgB,KAAK,KAAK,CAAC,GACvB,KAAK,CAAC,GACNA,gBAAgB,CAAC9C,IAAI,CAC1B,CACF;QACH,CAAC,CAAC;MAAA;MAjCJ,uDAAwC;QAAA,IAehC6C,iBAAiB,EAAEC,gBAAgB;QAAA;QAAA,yBANvC;MAyBJ,CAAC,CAAC;IAAA;MAAA;IAAA;MAAA;IAAA;IAAA,4CAEoBN,SAAS,CAACpC,IAAI;MAAA;IAAA;MAAA;QAAA,IAAzBwC,OAAO;QAChB,IAAMjB,OAAO,GAAGiB,OAAO,CAACtC,IAAI;QAC5B,IAAMqC,QAAQ,GAAGL,UAAU,CAAClC,IAAI,CAACN,IAAI,CAAC,UAACO,GAAG;UAAA,OAAKA,GAAG,CAACC,IAAI,KAAKqB,OAAO;QAAA,EAAC;QAEpE,IAAI,CAACgB,QAAQ,IAAInG,kBAAkB,CAACoG,OAAO,CAAC,EAAE;UAC5C1F,OAAO,CAACwB,WAAW,wBACDsB,IAAI,CAACM,IAAI,cAAIiC,SAAS,yCAA+BZ,OAAO,uDAA6CM,KAAK,CAAC3B,IAAI,cAAIiC,SAAS,QAChJ,CAACK,OAAO,CAACjE,OAAO,EAAE2D,UAAU,CAAC3D,OAAO,CAAC,CACtC;QACH;MAAC;MATH,uDAAsC;QAAA;MAUtC;IAAC;MAAA;IAAA;MAAA;IAAA;EACH;AACF;AAEA,SAASwD,+BAA+B,CAACjF,OAAO,EAAE8C,IAAI,EAAEiC,KAAK,EAAE;EAC7D,IAAMc,eAAe,GAAG/C,IAAI,CAACgC,aAAa,EAAE;EAAC,4CAEpBC,KAAK,CAACD,aAAa,EAAE;IAAA;EAAA;IAA9C,uDAAgD;MAAA,IAArCgB,UAAU;MACnB,IAAI,CAACD,eAAe,CAACE,QAAQ,CAACD,UAAU,CAAC,EAAE;QACzC9F,OAAO,CAACwB,WAAW,CACjBsE,UAAU,KAAKhD,IAAI,kBACPA,IAAI,CAACM,IAAI,+BAAqB2B,KAAK,CAAC3B,IAAI,qEACxCN,IAAI,CAACM,IAAI,6BAAmB0C,UAAU,CAAC1C,IAAI,2CAAiC2B,KAAK,CAAC3B,IAAI,MAAG,+BAEhG4B,8BAA8B,CAACD,KAAK,EAAEe,UAAU,CAAC,sBACjDd,8BAA8B,CAAClC,IAAI,EAAEiC,KAAK,CAAC,GAEjD;MACH;IACF;EAAC;IAAA;EAAA;IAAA;EAAA;AACH;AAEA,SAASb,oBAAoB,CAAClE,OAAO,EAAEgG,KAAK,EAAE;EAC5C,IAAMC,WAAW,GAAGD,KAAK,CAACE,QAAQ,EAAE;EAEpC,IAAID,WAAW,CAACzF,MAAM,KAAK,CAAC,EAAE;IAC5BR,OAAO,CAACwB,WAAW,sBACHwE,KAAK,CAAC5C,IAAI,8CACvB4C,KAAK,CAACvE,OAAO,4BAAKuE,KAAK,CAACzD,iBAAiB,GAC3C;EACH;EAEA,IAAM4D,iBAAiB,GAAGrC,MAAM,CAACe,MAAM,CAAC,IAAI,CAAC;EAAC,4CAErBoB,WAAW;IAAA;EAAA;IAApC,uDAAsC;MAAA,IAA3BG,UAAU;MACnB,IAAID,iBAAiB,CAACC,UAAU,CAAChD,IAAI,CAAC,EAAE;QACtCpD,OAAO,CAACwB,WAAW,sBACHwE,KAAK,CAAC5C,IAAI,oCAA0BgD,UAAU,CAAChD,IAAI,aACjEiD,uBAAuB,CAACL,KAAK,EAAEI,UAAU,CAAChD,IAAI,CAAC,CAChD;QACD;MACF;MAEA+C,iBAAiB,CAACC,UAAU,CAAChD,IAAI,CAAC,GAAG,IAAI;MAEzC,IAAI,CAAChE,YAAY,CAACgH,UAAU,CAAC,EAAE;QAC7BpG,OAAO,CAACwB,WAAW,CACjB,qBAAcwE,KAAK,CAAC5C,IAAI,oEACD3E,OAAO,CAAC2H,UAAU,CAAC,MAAG,EAC7CC,uBAAuB,CAACL,KAAK,EAAEM,MAAM,CAACF,UAAU,CAAC,CAAC,CACnD;MACH;IACF;EAAC;IAAA;EAAA;IAAA;EAAA;AACH;AAEA,SAASjC,kBAAkB,CAACnE,OAAO,EAAEuG,QAAQ,EAAE;EAC7C,IAAMC,UAAU,GAAGD,QAAQ,CAACE,SAAS,EAAE;EAEvC,IAAID,UAAU,CAAChG,MAAM,KAAK,CAAC,EAAE;IAC3BR,OAAO,CAACwB,WAAW,qBACJ+E,QAAQ,CAACnD,IAAI,wCACzBmD,QAAQ,CAAC9E,OAAO,4BAAK8E,QAAQ,CAAChE,iBAAiB,GACjD;EACH;EAAC,4CAEuBiE,UAAU;IAAA;EAAA;IAAlC,uDAAoC;MAAA,IAAzBE,SAAS;MAClB;MACAzD,YAAY,CAACjD,OAAO,EAAE0G,SAAS,CAAC;IAClC;EAAC;IAAA;EAAA;IAAA;EAAA;AACH;AAEA,SAAStC,mBAAmB,CAACpE,OAAO,EAAE2G,QAAQ,EAAE;EAC9C,IAAMtC,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC4C,QAAQ,CAACrC,SAAS,EAAE,CAAC;EAElD,IAAID,MAAM,CAAC7D,MAAM,KAAK,CAAC,EAAE;IACvBR,OAAO,CAACwB,WAAW,6BACImF,QAAQ,CAACvD,IAAI,wCACjCuD,QAAQ,CAAClF,OAAO,4BAAKkF,QAAQ,CAACpE,iBAAiB,GACjD;EACH,CAAC,CAAC;;EAEF,6BAAoB8B,MAAM,gCAAE;IAAvB,IAAME,KAAK;IACd;IACAtB,YAAY,CAACjD,OAAO,EAAEuE,KAAK,CAAC,CAAC,CAAC;;IAE9B,IAAI,CAACvF,WAAW,CAACuF,KAAK,CAACzB,IAAI,CAAC,EAAE;MAC5B,IAAI8D,eAAe;MAEnB5G,OAAO,CAACwB,WAAW,CACjB,sBAAemF,QAAQ,CAACvD,IAAI,cAAImB,KAAK,CAACnB,IAAI,+CAC5B3E,OAAO,CAAC8F,KAAK,CAACzB,IAAI,CAAC,MAAG,EACpC,CAAC8D,eAAe,GAAGrC,KAAK,CAAC9C,OAAO,MAAM,IAAI,IAAImF,eAAe,KAAK,KAAK,CAAC,GACpE,KAAK,CAAC,GACNA,eAAe,CAAC9D,IAAI,CACzB;IACH;IAEA,IAAIvD,oBAAoB,CAACgF,KAAK,CAAC,IAAIA,KAAK,CAAClB,iBAAiB,IAAI,IAAI,EAAE;MAClE,IAAIwD,eAAe;MAEnB7G,OAAO,CAACwB,WAAW,gCACOmF,QAAQ,CAACvD,IAAI,cAAImB,KAAK,CAACnB,IAAI,6BACnD,CACEG,0BAA0B,CAACgB,KAAK,CAAC9C,OAAO,CAAC,EACzC,CAACoF,eAAe,GAAGtC,KAAK,CAAC9C,OAAO,MAAM,IAAI,IAC1CoF,eAAe,KAAK,KAAK,CAAC,GACtB,KAAK,CAAC,GACNA,eAAe,CAAC/D,IAAI,CACzB,CACF;IACH;EACF;AACF;AAEA,SAASa,sCAAsC,CAAC3D,OAAO,EAAE;EACvD;EACA;EACA;EACA,IAAM8G,YAAY,GAAGhD,MAAM,CAACe,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE1C,IAAMkC,SAAS,GAAG,EAAE,CAAC,CAAC;;EAEtB,IAAMC,wBAAwB,GAAGlD,MAAM,CAACe,MAAM,CAAC,IAAI,CAAC;EACpD,OAAOoC,oBAAoB,CAAC,CAAC;EAC7B;EACA;;EAEA,SAASA,oBAAoB,CAACN,QAAQ,EAAE;IACtC,IAAIG,YAAY,CAACH,QAAQ,CAACvD,IAAI,CAAC,EAAE;MAC/B;IACF;IAEA0D,YAAY,CAACH,QAAQ,CAACvD,IAAI,CAAC,GAAG,IAAI;IAClC4D,wBAAwB,CAACL,QAAQ,CAACvD,IAAI,CAAC,GAAG2D,SAAS,CAACvG,MAAM;IAC1D,IAAM6D,MAAM,GAAGP,MAAM,CAACC,MAAM,CAAC4C,QAAQ,CAACrC,SAAS,EAAE,CAAC;IAElD,6BAAoBD,MAAM,gCAAE;MAAvB,IAAME,KAAK;MACd,IAAIpF,aAAa,CAACoF,KAAK,CAACzB,IAAI,CAAC,IAAI/D,iBAAiB,CAACwF,KAAK,CAACzB,IAAI,CAACoE,MAAM,CAAC,EAAE;QACrE,IAAMC,SAAS,GAAG5C,KAAK,CAACzB,IAAI,CAACoE,MAAM;QACnC,IAAME,UAAU,GAAGJ,wBAAwB,CAACG,SAAS,CAAC/D,IAAI,CAAC;QAC3D2D,SAAS,CAAC1F,IAAI,CAACkD,KAAK,CAAC;QAErB,IAAI6C,UAAU,KAAKC,SAAS,EAAE;UAC5BJ,oBAAoB,CAACE,SAAS,CAAC;QACjC,CAAC,MAAM;UACL,IAAMG,SAAS,GAAGP,SAAS,CAACQ,KAAK,CAACH,UAAU,CAAC;UAC7C,IAAMI,OAAO,GAAGF,SAAS,CAAC5G,GAAG,CAAC,UAAC+G,QAAQ;YAAA,OAAKA,QAAQ,CAACrE,IAAI;UAAA,EAAC,CAACvC,IAAI,CAAC,GAAG,CAAC;UACpEb,OAAO,CAACwB,WAAW,2CACiB2F,SAAS,CAAC/D,IAAI,qEAAyDoE,OAAO,UAChHF,SAAS,CAAC5G,GAAG,CAAC,UAAC+G,QAAQ;YAAA,OAAKA,QAAQ,CAAChG,OAAO;UAAA,EAAC,CAC9C;QACH;QAEAsF,SAAS,CAACW,GAAG,EAAE;MACjB;IACF;IAEAV,wBAAwB,CAACL,QAAQ,CAACvD,IAAI,CAAC,GAAGiE,SAAS;EACrD;AACF;AAEA,SAASrC,8BAA8B,CAAClC,IAAI,EAAEiC,KAAK,EAAE;EACnD,IAAQtD,OAAO,GAAwBqB,IAAI,CAAnCrB,OAAO;IAAEc,iBAAiB,GAAKO,IAAI,CAA1BP,iBAAiB;EAClC,IAAMxB,KAAK,GACTU,OAAO,IAAI,IAAI,IAAIA,OAAO,4BAAKc,iBAAiB,KAAIA,iBAAiB,CAAC,CAAC;;EAEzE,OAAOxB,KAAK,CACTyB,OAAO,CAAC,UAACmF,QAAQ,EAAK;IACrB,IAAIC,oBAAoB;IAExB,OACE;MACA,CAACA,oBAAoB,GAAGD,QAAQ,CAACE,UAAU,MAAM,IAAI,IACnDD,oBAAoB,KAAK,KAAK,CAAC,GAC7BA,oBAAoB,GACpB;IAAE;EAEV,CAAC,CAAC,CACDzG,MAAM,CAAC,UAAC2G,SAAS;IAAA,OAAKA,SAAS,CAAC1E,IAAI,CAAC2E,KAAK,KAAKhD,KAAK,CAAC3B,IAAI;EAAA,EAAC;AAC/D;AAEA,SAASiD,uBAAuB,CAACL,KAAK,EAAEgC,QAAQ,EAAE;EAChD,IAAQvG,OAAO,GAAwBuE,KAAK,CAApCvE,OAAO;IAAEc,iBAAiB,GAAKyD,KAAK,CAA3BzD,iBAAiB;EAClC,IAAMxB,KAAK,GACTU,OAAO,IAAI,IAAI,IAAIA,OAAO,4BAAKc,iBAAiB,KAAIA,iBAAiB,CAAC,CAAC;;EAEzE,OAAOxB,KAAK,CACTyB,OAAO,CAAC,UAACyF,SAAS,EAAK;IACtB,IAAIC,gBAAgB;IAEpB,OACE;MACA,CAACA,gBAAgB,GAAGD,SAAS,CAACE,KAAK,MAAM,IAAI,IAC3CD,gBAAgB,KAAK,KAAK,CAAC,GACzBA,gBAAgB,GAChB;IAAE;EAEV,CAAC,CAAC,CACD/G,MAAM,CAAC,UAACwG,QAAQ;IAAA,OAAKA,QAAQ,CAACvE,IAAI,CAAC2E,KAAK,KAAKC,QAAQ;EAAA,EAAC;AAC3D;AAEA,SAASzE,0BAA0B,CAAC6E,cAAc,EAAE;EAClD,IAAIC,qBAAqB;EAEzB,OAAOD,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,KAAK,CAAC,GACvD,KAAK,CAAC,GACN,CAACC,qBAAqB,GAAGD,cAAc,CAACE,UAAU,MAAM,IAAI,IAC5DD,qBAAqB,KAAK,KAAK,CAAC,GAChC,KAAK,CAAC,GACNA,qBAAqB,CAACzF,IAAI,CACxB,UAACY,IAAI;IAAA,OAAKA,IAAI,CAACJ,IAAI,CAAC2E,KAAK,KAAKtI,0BAA0B,CAAC2D,IAAI;EAAA,EAC9D;AACP"},"metadata":{},"sourceType":"module"}