{"ast":null,"code":"import _slicedToArray from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition: function DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      var argumentNodes = (_directiveNode$argume = directiveNode.arguments) !== null && _directiveNode$argume !== void 0 ? _directiveNode$argume : [];\n      return checkArgUniqueness(\"@\".concat(directiveNode.name.value), argumentNodes);\n    },\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField\n  };\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n    var typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    var fieldNodes = (_typeNode$fields = typeNode.fields) !== null && _typeNode$fields !== void 0 ? _typeNode$fields : [];\n    var _iterator = _createForOfIteratorHelper(fieldNodes),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var fieldDef = _step.value;\n        var _fieldDef$arguments;\n        var fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n        /* c8 ignore next */\n\n        var argumentNodes = (_fieldDef$arguments = fieldDef.arguments) !== null && _fieldDef$arguments !== void 0 ? _fieldDef$arguments : [];\n        checkArgUniqueness(\"\".concat(typeName, \".\").concat(fieldName), argumentNodes);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return false;\n  }\n  function checkArgUniqueness(parentName, argumentNodes) {\n    var seenArgs = groupBy(argumentNodes, function (arg) {\n      return arg.name.value;\n    });\n    var _iterator2 = _createForOfIteratorHelper(seenArgs),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n          argName = _step2$value[0],\n          argNodes = _step2$value[1];\n        if (argNodes.length > 1) {\n          context.reportError(new GraphQLError(\"Argument \\\"\".concat(parentName, \"(\").concat(argName, \":)\\\" can only be defined once.\"), {\n            nodes: argNodes.map(function (node) {\n              return node.name;\n            })\n          }));\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["groupBy","GraphQLError","UniqueArgumentDefinitionNamesRule","context","DirectiveDefinition","directiveNode","_directiveNode$argume","argumentNodes","arguments","checkArgUniqueness","name","value","InterfaceTypeDefinition","checkArgUniquenessPerField","InterfaceTypeExtension","ObjectTypeDefinition","ObjectTypeExtension","typeNode","_typeNode$fields","typeName","fieldNodes","fields","fieldDef","_fieldDef$arguments","fieldName","parentName","seenArgs","arg","argName","argNodes","length","reportError","nodes","map","node"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/validation/rules/UniqueArgumentDefinitionNamesRule.mjs"],"sourcesContent":["import { groupBy } from '../../jsutils/groupBy.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique argument definition names\n *\n * A GraphQL Object or Interface type is only valid if all its fields have uniquely named arguments.\n * A GraphQL Directive is only valid if all its arguments are uniquely named.\n */\nexport function UniqueArgumentDefinitionNamesRule(context) {\n  return {\n    DirectiveDefinition(directiveNode) {\n      var _directiveNode$argume;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argumentNodes =\n        (_directiveNode$argume = directiveNode.arguments) !== null &&\n        _directiveNode$argume !== void 0\n          ? _directiveNode$argume\n          : [];\n      return checkArgUniqueness(`@${directiveNode.name.value}`, argumentNodes);\n    },\n\n    InterfaceTypeDefinition: checkArgUniquenessPerField,\n    InterfaceTypeExtension: checkArgUniquenessPerField,\n    ObjectTypeDefinition: checkArgUniquenessPerField,\n    ObjectTypeExtension: checkArgUniquenessPerField,\n  };\n\n  function checkArgUniquenessPerField(typeNode) {\n    var _typeNode$fields;\n\n    const typeName = typeNode.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n    /* c8 ignore next */\n\n    const fieldNodes =\n      (_typeNode$fields = typeNode.fields) !== null &&\n      _typeNode$fields !== void 0\n        ? _typeNode$fields\n        : [];\n\n    for (const fieldDef of fieldNodes) {\n      var _fieldDef$arguments;\n\n      const fieldName = fieldDef.name.value; // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n\n      const argumentNodes =\n        (_fieldDef$arguments = fieldDef.arguments) !== null &&\n        _fieldDef$arguments !== void 0\n          ? _fieldDef$arguments\n          : [];\n      checkArgUniqueness(`${typeName}.${fieldName}`, argumentNodes);\n    }\n\n    return false;\n  }\n\n  function checkArgUniqueness(parentName, argumentNodes) {\n    const seenArgs = groupBy(argumentNodes, (arg) => arg.name.value);\n\n    for (const [argName, argNodes] of seenArgs) {\n      if (argNodes.length > 1) {\n        context.reportError(\n          new GraphQLError(\n            `Argument \"${parentName}(${argName}:)\" can only be defined once.`,\n            {\n              nodes: argNodes.map((node) => node.name),\n            },\n          ),\n        );\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":";;AAAA,SAASA,OAAO,QAAQ,2BAA2B;AACnD,SAASC,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iCAAiC,CAACC,OAAO,EAAE;EACzD,OAAO;IACLC,mBAAmB,+BAACC,aAAa,EAAE;MACjC,IAAIC,qBAAqB;;MAEzB;;MAEA;MACA,IAAMC,aAAa,GACjB,CAACD,qBAAqB,GAAGD,aAAa,CAACG,SAAS,MAAM,IAAI,IAC1DF,qBAAqB,KAAK,KAAK,CAAC,GAC5BA,qBAAqB,GACrB,EAAE;MACR,OAAOG,kBAAkB,YAAKJ,aAAa,CAACK,IAAI,CAACC,KAAK,GAAIJ,aAAa,CAAC;IAC1E,CAAC;IAEDK,uBAAuB,EAAEC,0BAA0B;IACnDC,sBAAsB,EAAED,0BAA0B;IAClDE,oBAAoB,EAAEF,0BAA0B;IAChDG,mBAAmB,EAAEH;EACvB,CAAC;EAED,SAASA,0BAA0B,CAACI,QAAQ,EAAE;IAC5C,IAAIC,gBAAgB;IAEpB,IAAMC,QAAQ,GAAGF,QAAQ,CAACP,IAAI,CAACC,KAAK,CAAC,CAAC;;IAEtC;;IAEA,IAAMS,UAAU,GACd,CAACF,gBAAgB,GAAGD,QAAQ,CAACI,MAAM,MAAM,IAAI,IAC7CH,gBAAgB,KAAK,KAAK,CAAC,GACvBA,gBAAgB,GAChB,EAAE;IAAC,2CAEcE,UAAU;MAAA;IAAA;MAAjC,oDAAmC;QAAA,IAAxBE,QAAQ;QACjB,IAAIC,mBAAmB;QAEvB,IAAMC,SAAS,GAAGF,QAAQ,CAACZ,IAAI,CAACC,KAAK,CAAC,CAAC;;QAEvC;;QAEA,IAAMJ,aAAa,GACjB,CAACgB,mBAAmB,GAAGD,QAAQ,CAACd,SAAS,MAAM,IAAI,IACnDe,mBAAmB,KAAK,KAAK,CAAC,GAC1BA,mBAAmB,GACnB,EAAE;QACRd,kBAAkB,WAAIU,QAAQ,cAAIK,SAAS,GAAIjB,aAAa,CAAC;MAC/D;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAO,KAAK;EACd;EAEA,SAASE,kBAAkB,CAACgB,UAAU,EAAElB,aAAa,EAAE;IACrD,IAAMmB,QAAQ,GAAG1B,OAAO,CAACO,aAAa,EAAE,UAACoB,GAAG;MAAA,OAAKA,GAAG,CAACjB,IAAI,CAACC,KAAK;IAAA,EAAC;IAAC,4CAE/Be,QAAQ;MAAA;IAAA;MAA1C,uDAA4C;QAAA;UAAhCE,OAAO;UAAEC,QAAQ;QAC3B,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;UACvB3B,OAAO,CAAC4B,WAAW,CACjB,IAAI9B,YAAY,sBACDwB,UAAU,cAAIG,OAAO,qCAClC;YACEI,KAAK,EAAEH,QAAQ,CAACI,GAAG,CAAC,UAACC,IAAI;cAAA,OAAKA,IAAI,CAACxB,IAAI;YAAA;UACzC,CAAC,CACF,CACF;QACH;MACF;IAAC;MAAA;IAAA;MAAA;IAAA;IAED,OAAO,KAAK;EACd;AACF"},"metadata":{},"sourceType":"module"}