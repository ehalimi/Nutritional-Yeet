{"ast":null,"code":"import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  var knownNameStack = [];\n  var knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter: function enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n      leave: function leave() {\n        var prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var fieldName = node.name.value;\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(\"There can be only one input field named \\\"\".concat(fieldName, \"\\\".\"), {\n          nodes: [knownNames[fieldName], node.name]\n        }));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n  };\n}","map":{"version":3,"names":["invariant","GraphQLError","UniqueInputFieldNamesRule","context","knownNameStack","knownNames","Object","create","ObjectValue","enter","push","leave","prevKnownNames","pop","ObjectField","node","fieldName","name","value","reportError","nodes"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs"],"sourcesContent":["import { invariant } from '../../jsutils/invariant.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Input-Object-Field-Uniqueness\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        const prevKnownNames = knownNameStack.pop();\n        prevKnownNames || invariant(false);\n        knownNames = prevKnownNames;\n      },\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(\n          new GraphQLError(\n            `There can be only one input field named \"${fieldName}\".`,\n            {\n              nodes: [knownNames[fieldName], node.name],\n            },\n          ),\n        );\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    },\n  };\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,6BAA6B;AACvD,SAASC,YAAY,QAAQ,8BAA8B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyB,CAACC,OAAO,EAAE;EACjD,IAAMC,cAAc,GAAG,EAAE;EACzB,IAAIC,UAAU,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;EACpC,OAAO;IACLC,WAAW,EAAE;MACXC,KAAK,mBAAG;QACNL,cAAc,CAACM,IAAI,CAACL,UAAU,CAAC;QAC/BA,UAAU,GAAGC,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MAClC,CAAC;MAEDI,KAAK,mBAAG;QACN,IAAMC,cAAc,GAAGR,cAAc,CAACS,GAAG,EAAE;QAC3CD,cAAc,IAAIZ,SAAS,CAAC,KAAK,CAAC;QAClCK,UAAU,GAAGO,cAAc;MAC7B;IACF,CAAC;IAEDE,WAAW,uBAACC,IAAI,EAAE;MAChB,IAAMC,SAAS,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAK;MAEjC,IAAIb,UAAU,CAACW,SAAS,CAAC,EAAE;QACzBb,OAAO,CAACgB,WAAW,CACjB,IAAIlB,YAAY,qDAC8Be,SAAS,UACrD;UACEI,KAAK,EAAE,CAACf,UAAU,CAACW,SAAS,CAAC,EAAED,IAAI,CAACE,IAAI;QAC1C,CAAC,CACF,CACF;MACH,CAAC,MAAM;QACLZ,UAAU,CAACW,SAAS,CAAC,GAAGD,IAAI,CAACE,IAAI;MACnC;IACF;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}