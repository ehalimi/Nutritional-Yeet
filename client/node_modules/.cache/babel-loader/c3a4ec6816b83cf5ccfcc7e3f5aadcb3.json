{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return _objectSpread(_objectSpread({}, KnownArgumentNamesOnDirectivesRule(context)), {}, {\n    Argument: function Argument(argNode) {\n      var argDef = context.getArgument();\n      var fieldDef = context.getFieldDef();\n      var parentType = context.getParentType();\n      if (!argDef && fieldDef && parentType) {\n        var argName = argNode.name.value;\n        var knownArgsNames = fieldDef.args.map(function (arg) {\n          return arg.name;\n        });\n        var suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on field \\\"\").concat(parentType.name, \".\").concat(fieldDef.name, \"\\\".\") + didYouMean(suggestions), {\n          nodes: argNode\n        }));\n      }\n    }\n  });\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  var directiveArgs = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n  var _iterator = _createForOfIteratorHelper(definedDirectives),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var directive = _step.value;\n      directiveArgs[directive.name] = directive.args.map(function (arg) {\n        return arg.name;\n      });\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var astDefinitions = context.getDocument().definitions;\n  var _iterator2 = _createForOfIteratorHelper(astDefinitions),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var def = _step2.value;\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        var _def$arguments;\n\n        // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n        /* c8 ignore next */\n        var argsNodes = (_def$arguments = def.arguments) !== null && _def$arguments !== void 0 ? _def$arguments : [];\n        directiveArgs[def.name.value] = argsNodes.map(function (arg) {\n          return arg.name.value;\n        });\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return {\n    Directive: function Directive(directiveNode) {\n      var directiveName = directiveNode.name.value;\n      var knownArgs = directiveArgs[directiveName];\n      if (directiveNode.arguments && knownArgs) {\n        var _iterator3 = _createForOfIteratorHelper(directiveNode.arguments),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var argNode = _step3.value;\n            var argName = argNode.name.value;\n            if (!knownArgs.includes(argName)) {\n              var suggestions = suggestionList(argName, knownArgs);\n              context.reportError(new GraphQLError(\"Unknown argument \\\"\".concat(argName, \"\\\" on directive \\\"@\").concat(directiveName, \"\\\".\") + didYouMean(suggestions), {\n                nodes: argNode\n              }));\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["didYouMean","suggestionList","GraphQLError","Kind","specifiedDirectives","KnownArgumentNamesRule","context","KnownArgumentNamesOnDirectivesRule","Argument","argNode","argDef","getArgument","fieldDef","getFieldDef","parentType","getParentType","argName","name","value","knownArgsNames","args","map","arg","suggestions","reportError","nodes","directiveArgs","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","_def$arguments","argsNodes","arguments","Directive","directiveNode","directiveName","knownArgs","includes"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs"],"sourcesContent":["import { didYouMean } from '../../jsutils/didYouMean.mjs';\nimport { suggestionList } from '../../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n *\n * See https://spec.graphql.org/draft/#sec-Argument-Names\n * See https://spec.graphql.org/draft/#sec-Directives-Are-In-Valid-Locations\n */\nexport function KnownArgumentNamesRule(context) {\n  return {\n    // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map((arg) => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(\n          new GraphQLError(\n            `Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` +\n              didYouMean(suggestions),\n            {\n              nodes: argNode,\n            },\n          ),\n        );\n      }\n    },\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map((arg) => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      var _def$arguments;\n\n      // FIXME: https://github.com/graphql/graphql-js/issues/2203\n\n      /* c8 ignore next */\n      const argsNodes =\n        (_def$arguments = def.arguments) !== null && _def$arguments !== void 0\n          ? _def$arguments\n          : [];\n      directiveArgs[def.name.value] = argsNodes.map((arg) => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (!knownArgs.includes(argName)) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(\n              new GraphQLError(\n                `Unknown argument \"${argName}\" on directive \"@${directiveName}\".` +\n                  didYouMean(suggestions),\n                {\n                  nodes: argNode,\n                },\n              ),\n            );\n          }\n        }\n      }\n\n      return false;\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}