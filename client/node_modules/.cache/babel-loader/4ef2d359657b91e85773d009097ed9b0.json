{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document: function Document(node) {\n      var _iterator = _createForOfIteratorHelper(node.definitions),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var definition = _step.value;\n          if (!isExecutableDefinitionNode(definition)) {\n            var defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n            context.reportError(new GraphQLError(\"The \".concat(defName, \" definition is not executable.\"), {\n              nodes: definition\n            }));\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return false;\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","Kind","isExecutableDefinitionNode","ExecutableDefinitionsRule","context","Document","node","definitions","definition","defName","kind","SCHEMA_DEFINITION","SCHEMA_EXTENSION","name","value","reportError","nodes"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isExecutableDefinitionNode } from '../../language/predicates.mjs';\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n *\n * See https://spec.graphql.org/draft/#sec-Executable-Definitions\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName =\n            definition.kind === Kind.SCHEMA_DEFINITION ||\n            definition.kind === Kind.SCHEMA_EXTENSION\n              ? 'schema'\n              : '\"' + definition.name.value + '\"';\n          context.reportError(\n            new GraphQLError(`The ${defName} definition is not executable.`, {\n              nodes: definition,\n            }),\n          );\n        }\n      }\n\n      return false;\n    },\n  };\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,8BAA8B;AAC3D,SAASC,IAAI,QAAQ,0BAA0B;AAC/C,SAASC,0BAA0B,QAAQ,+BAA+B;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,yBAAyB,CAACC,OAAO,EAAE;EACjD,OAAO;IACLC,QAAQ,oBAACC,IAAI,EAAE;MAAA,2CACYA,IAAI,CAACC,WAAW;QAAA;MAAA;QAAzC,oDAA2C;UAAA,IAAhCC,UAAU;UACnB,IAAI,CAACN,0BAA0B,CAACM,UAAU,CAAC,EAAE;YAC3C,IAAMC,OAAO,GACXD,UAAU,CAACE,IAAI,KAAKT,IAAI,CAACU,iBAAiB,IAC1CH,UAAU,CAACE,IAAI,KAAKT,IAAI,CAACW,gBAAgB,GACrC,QAAQ,GACR,GAAG,GAAGJ,UAAU,CAACK,IAAI,CAACC,KAAK,GAAG,GAAG;YACvCV,OAAO,CAACW,WAAW,CACjB,IAAIf,YAAY,eAAQS,OAAO,qCAAkC;cAC/DO,KAAK,EAAER;YACT,CAAC,CAAC,CACH;UACH;QACF;MAAC;QAAA;MAAA;QAAA;MAAA;MAED,OAAO,KAAK;IACd;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module"}