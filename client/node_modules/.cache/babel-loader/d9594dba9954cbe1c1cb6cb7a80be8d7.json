{"ast":null,"code":"import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { isInputObjectType, isLeafType, isListType, isNonNullType } from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type) {\n  var onError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultOnError;\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\nfunction defaultOnError(path, invalidValue, error) {\n  var errorPrefix = 'Invalid value ' + inspect(invalidValue);\n  if (path.length > 0) {\n    errorPrefix += \" at \\\"value\".concat(printPathArray(path), \"\\\"\");\n  }\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n    onError(pathToArray(path), inputValue, new GraphQLError(\"Expected non-nullable type \\\"\".concat(inspect(type), \"\\\" not to be null.\")));\n    return;\n  }\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n  if (isListType(type)) {\n    var itemType = type.ofType;\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, function (itemValue, index) {\n        var itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\" to be an object.\")));\n      return;\n    }\n    var coercedValue = {};\n    var fieldDefs = type.getFields();\n    for (var _i = 0, _Object$values = Object.values(fieldDefs); _i < _Object$values.length; _i++) {\n      var field = _Object$values[_i];\n      var fieldValue = inputValue[field.name];\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          var typeStr = inspect(field.type);\n          onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(field.name, \"\\\" of required type \\\"\").concat(typeStr, \"\\\" was not provided.\")));\n        }\n        continue;\n      }\n      coercedValue[field.name] = coerceInputValueImpl(fieldValue, field.type, onError, addPath(path, field.name, type.name));\n    } // Ensure every provided field is defined.\n\n    for (var _i2 = 0, _Object$keys = Object.keys(inputValue); _i2 < _Object$keys.length; _i2++) {\n      var fieldName = _Object$keys[_i2];\n      if (!fieldDefs[fieldName]) {\n        var suggestions = suggestionList(fieldName, Object.keys(type.getFields()));\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \\\"\").concat(type.name, \"\\\".\") + didYouMean(suggestions)));\n      }\n    }\n    return coercedValue;\n  }\n  if (isLeafType(type)) {\n    var parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\". \") + error.message, {\n          originalError: error\n        }));\n      }\n      return;\n    }\n    if (parseResult === undefined) {\n      onError(pathToArray(path), inputValue, new GraphQLError(\"Expected type \\\"\".concat(type.name, \"\\\".\")));\n    }\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}","map":{"version":3,"names":["didYouMean","inspect","invariant","isIterableObject","isObjectLike","addPath","pathToArray","printPathArray","suggestionList","GraphQLError","isInputObjectType","isLeafType","isListType","isNonNullType","coerceInputValue","inputValue","type","onError","defaultOnError","coerceInputValueImpl","undefined","path","invalidValue","error","errorPrefix","length","message","ofType","itemType","Array","from","itemValue","index","itemPath","name","coercedValue","fieldDefs","getFields","Object","values","field","fieldValue","defaultValue","typeStr","keys","fieldName","suggestions","parseResult","parseValue","originalError"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/utilities/coerceInputValue.mjs"],"sourcesContent":["import { didYouMean } from '../jsutils/didYouMean.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { invariant } from '../jsutils/invariant.mjs';\nimport { isIterableObject } from '../jsutils/isIterableObject.mjs';\nimport { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { printPathArray } from '../jsutils/printPathArray.mjs';\nimport { suggestionList } from '../jsutils/suggestionList.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport {\n  isInputObjectType,\n  isLeafType,\n  isListType,\n  isNonNullType,\n} from '../type/definition.mjs';\n\n/**\n * Coerces a JavaScript value given a GraphQL Input Type.\n */\nexport function coerceInputValue(inputValue, type, onError = defaultOnError) {\n  return coerceInputValueImpl(inputValue, type, onError, undefined);\n}\n\nfunction defaultOnError(path, invalidValue, error) {\n  let errorPrefix = 'Invalid value ' + inspect(invalidValue);\n\n  if (path.length > 0) {\n    errorPrefix += ` at \"value${printPathArray(path)}\"`;\n  }\n\n  error.message = errorPrefix + ': ' + error.message;\n  throw error;\n}\n\nfunction coerceInputValueImpl(inputValue, type, onError, path) {\n  if (isNonNullType(type)) {\n    if (inputValue != null) {\n      return coerceInputValueImpl(inputValue, type.ofType, onError, path);\n    }\n\n    onError(\n      pathToArray(path),\n      inputValue,\n      new GraphQLError(\n        `Expected non-nullable type \"${inspect(type)}\" not to be null.`,\n      ),\n    );\n    return;\n  }\n\n  if (inputValue == null) {\n    // Explicitly return the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isIterableObject(inputValue)) {\n      return Array.from(inputValue, (itemValue, index) => {\n        const itemPath = addPath(path, index, undefined);\n        return coerceInputValueImpl(itemValue, itemType, onError, itemPath);\n      });\n    } // Lists accept a non-list value as a list of one.\n\n    return [coerceInputValueImpl(inputValue, itemType, onError, path)];\n  }\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(inputValue)) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\" to be an object.`),\n      );\n      return;\n    }\n\n    const coercedValue = {};\n    const fieldDefs = type.getFields();\n\n    for (const field of Object.values(fieldDefs)) {\n      const fieldValue = inputValue[field.name];\n\n      if (fieldValue === undefined) {\n        if (field.defaultValue !== undefined) {\n          coercedValue[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          const typeStr = inspect(field.type);\n          onError(\n            pathToArray(path),\n            inputValue,\n            new GraphQLError(\n              `Field \"${field.name}\" of required type \"${typeStr}\" was not provided.`,\n            ),\n          );\n        }\n\n        continue;\n      }\n\n      coercedValue[field.name] = coerceInputValueImpl(\n        fieldValue,\n        field.type,\n        onError,\n        addPath(path, field.name, type.name),\n      );\n    } // Ensure every provided field is defined.\n\n    for (const fieldName of Object.keys(inputValue)) {\n      if (!fieldDefs[fieldName]) {\n        const suggestions = suggestionList(\n          fieldName,\n          Object.keys(type.getFields()),\n        );\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(\n            `Field \"${fieldName}\" is not defined by type \"${type.name}\".` +\n              didYouMean(suggestions),\n          ),\n        );\n      }\n    }\n\n    return coercedValue;\n  }\n\n  if (isLeafType(type)) {\n    let parseResult; // Scalars and Enums determine if a input value is valid via parseValue(),\n    // which can throw to indicate failure. If it throws, maintain a reference\n    // to the original error.\n\n    try {\n      parseResult = type.parseValue(inputValue);\n    } catch (error) {\n      if (error instanceof GraphQLError) {\n        onError(pathToArray(path), inputValue, error);\n      } else {\n        onError(\n          pathToArray(path),\n          inputValue,\n          new GraphQLError(`Expected type \"${type.name}\". ` + error.message, {\n            originalError: error,\n          }),\n        );\n      }\n\n      return;\n    }\n\n    if (parseResult === undefined) {\n      onError(\n        pathToArray(path),\n        inputValue,\n        new GraphQLError(`Expected type \"${type.name}\".`),\n      );\n    }\n\n    return parseResult;\n  }\n  /* c8 ignore next 3 */\n  // Not reachable, all possible types have been considered.\n\n  false || invariant(false, 'Unexpected input type: ' + inspect(type));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}