{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/emahalimi/projects/book-search/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport { isTypeDefinitionNode, isTypeExtensionNode } from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  var uniqueDirectiveMap = Object.create(null);\n  var schema = context.getSchema();\n  var definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n  var _iterator = _createForOfIteratorHelper(definedDirectives),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var directive = _step.value;\n      uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var astDefinitions = context.getDocument().definitions;\n  var _iterator2 = _createForOfIteratorHelper(astDefinitions),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var def = _step2.value;\n      if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n        uniqueDirectiveMap[def.name.value] = !def.repeatable;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  var schemaDirectives = Object.create(null);\n  var typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter: function enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n      var seenDirectives;\n      if (node.kind === Kind.SCHEMA_DEFINITION || node.kind === Kind.SCHEMA_EXTENSION) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        var typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n      var _iterator3 = _createForOfIteratorHelper(node.directives),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var directive = _step3.value;\n          var directiveName = directive.name.value;\n          if (uniqueDirectiveMap[directiveName]) {\n            if (seenDirectives[directiveName]) {\n              context.reportError(new GraphQLError(\"The directive \\\"@\".concat(directiveName, \"\\\" can only be used once at this location.\"), {\n                nodes: [seenDirectives[directiveName], directive]\n              }));\n            } else {\n              seenDirectives[directiveName] = directive;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  };\n}","map":{"version":3,"names":["GraphQLError","Kind","isTypeDefinitionNode","isTypeExtensionNode","specifiedDirectives","UniqueDirectivesPerLocationRule","context","uniqueDirectiveMap","Object","create","schema","getSchema","definedDirectives","getDirectives","directive","name","isRepeatable","astDefinitions","getDocument","definitions","def","kind","DIRECTIVE_DEFINITION","value","repeatable","schemaDirectives","typeDirectivesMap","enter","node","directives","seenDirectives","SCHEMA_DEFINITION","SCHEMA_EXTENSION","typeName","undefined","directiveName","reportError","nodes"],"sources":["/Users/emahalimi/projects/book-search/client/node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs"],"sourcesContent":["import { GraphQLError } from '../../error/GraphQLError.mjs';\nimport { Kind } from '../../language/kinds.mjs';\nimport {\n  isTypeDefinitionNode,\n  isTypeExtensionNode,\n} from '../../language/predicates.mjs';\nimport { specifiedDirectives } from '../../type/directives.mjs';\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n *\n * See https://spec.graphql.org/draft/#sec-Directives-Are-Unique-Per-Location\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema\n    ? schema.getDirectives()\n    : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (!('directives' in node) || !node.directives) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (\n        node.kind === Kind.SCHEMA_DEFINITION ||\n        node.kind === Kind.SCHEMA_EXTENSION\n      ) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(\n              new GraphQLError(\n                `The directive \"@${directiveName}\" can only be used once at this location.`,\n                {\n                  nodes: [seenDirectives[directiveName], directive],\n                },\n              ),\n            );\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}